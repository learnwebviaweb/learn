"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[888],{1888:(Ne,n,a)=>{a.r(n),a.d(n,{WebpackBookModule:()=>Re});var r={};a.r(r),a.d(r,{webpack_2_1_1:()=>g,webpack_2_1_2:()=>f,webpack_2_1_3:()=>b,webpack_2_1_4:()=>x,webpack_2_1_5:()=>h,webpack_2_1_6:()=>_,webpack_2_1_7:()=>w,webpack_2_1_8:()=>k,webpack_2_2_1:()=>y,webpack_2_2_2:()=>S,webpack_2_2_3:()=>v,webpack_2_2_4:()=>L,webpack_2_2_5:()=>T,webpack_2_2_6:()=>C,webpack_2_2_7:()=>O,webpack_2_2_8:()=>W,webpack_3_1_1:()=>j,webpack_3_1_2:()=>P,webpack_3_1_3:()=>J,webpack_3_1_4:()=>I,webpack_3_1_5:()=>B,webpack_3_2_1:()=>A,webpack_3_2_2:()=>H,webpack_3_2_3:()=>M,webpack_3_2_4:()=>E,webpack_3_2_5:()=>z,webpack_3_2_6:()=>D,webpack_3_2_7:()=>F,webpack_3_2_8:()=>q,webpack_3_3_1:()=>U,webpack_3_4_1:()=>R,webpack_4_1_1:()=>N,webpack_4_1_2:()=>$,webpack_4_1_3:()=>Y,webpack_4_1_4:()=>V,webpack_4_1_5:()=>G,webpack_4_1_6:()=>K,webpack_4_1_7:()=>X,webpack_4_2_1:()=>Q,webpack_4_2_2:()=>Z,webpack_4_2_3:()=>ee,webpack_4_2_4:()=>te,webpack_4_2_5:()=>ae,webpack_4_2_6:()=>oe,webpack_4_2_7:()=>ie,webpack_4_3_1:()=>le,webpack_4_3_2:()=>re,webpack_4_3_3:()=>se,webpack_4_3_4:()=>ne,webpack_4_3_5:()=>ce,webpack_4_3_6:()=>pe,webpack_4_4_1:()=>de,webpack_4_4_2:()=>ue,webpack_4_4_3:()=>me,webpack_4_4_4:()=>ge,webpack_4_4_5:()=>fe,webpack_4_4_6:()=>be,webpack_4_4_7:()=>xe,webpack_5_1_1:()=>he,webpack_5_1_10:()=>Ce,webpack_5_1_11:()=>Oe,webpack_5_1_2:()=>_e,webpack_5_1_3:()=>we,webpack_5_1_4:()=>ke,webpack_5_1_5:()=>ye,webpack_5_1_6:()=>Se,webpack_5_1_7:()=>ve,webpack_5_1_8:()=>Le,webpack_5_1_9:()=>Te,webpack_5_2_1:()=>We,webpack_5_2_10:()=>Ee,webpack_5_2_11:()=>ze,webpack_5_2_2:()=>je,webpack_5_2_3:()=>Pe,webpack_5_2_4:()=>Je,webpack_5_2_5:()=>Ie,webpack_5_2_6:()=>Be,webpack_5_2_7:()=>Ae,webpack_5_2_8:()=>He,webpack_5_2_9:()=>Me});var p=a(6895),s=a(9299);const d=[{category:"webpack",chid:1,title:"Introduction to Webpack",sections:[{secid:1,subtitle:"What is Webpack?",paragraphs:[{paraid:1,text:"Webpack is an open-source JavaScript module bundler. It's primarily used for bundling JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset. Here's a more detailed breakdown:"},{paraid:1,text:"<ol><li><strong>Module Bundling</strong></li></ol>"},{paraid:1,text:"<ul>At its core, Webpack takes modules with dependencies and generates static assets representing those modules. It's particularly powerful when you're working with a large number of files that need to be combined into a smaller number of bundled assets.</ul>"},{paraid:1,text:'<ol start="2"><li><strong>Loaders and Plugins</strong></li></ol>'},{paraid:1,text:"<ul>Webpack uses loaders to preprocess files as they are imported. This means it can transform front-end resources like HTML, CSS, and images if the corresponding loaders are included. Plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management, and injection of environment variables.</ul>"},{paraid:1,text:'<ol start="3"><li><strong>Development Server</strong></li></ol>'},{paraid:1,text:"<ul>Webpack can also use a development server called Webpack Dev Server that provides live reloading. This is particularly useful during development, as it can significantly speed up the feedback cycle.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>Code Splitting</strong></li></ol>'},{paraid:1,text:"<ul>Webpack supports splitting your codebase into multiple chunks, which can be loaded on demand or in parallel, which can significantly improve the performance of your application.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>Optimization</strong></li></ol>'},{paraid:1,text:"<ul>It optimizes the output by bundling together only the files that are actually used in your application, which reduces the size of your application and improves load times.</ul>"},{paraid:1,text:"Webpack is highly configurable, and its functionality can be enhanced with various plugins and loaders to transform or optimize your resources. It's become a fundamental tool in modern web development for those reasons, especially within complex projects that make use of numerous assets and require fine-tuned optimization."}]},{secid:2,subtitle:"The Role of Webpack in Modern Web Development",paragraphs:[{paraid:1,text:"Webpack plays a crucial role in modern web development by addressing several challenges and needs that arise with the development of complex applications. Here are key aspects of Webpack's role in the contemporary web development landscape:"},{paraid:1,text:"<ol><li><strong>Modular Development</strong></li></ol>"},{paraid:1,text:"<ul>As applications grow in size, managing the codebase can become challenging. Webpack enables modular development by handling dependencies and allowing developers to structure their code in reusable, manageable modules.</ul>"},{paraid:1,text:'<ol start="2"><li><strong>Performance Optimization</strong></li></ol>'},{paraid:1,text:"<ul>Webpack optimizes the performance of web applications by bundling assets in the most efficient way possible. It reduces the number of HTTP requests by bundling files, minifies code to reduce file sizes, and supports lazy loading to load code chunks on demand.</ul>"},{paraid:1,text:'<ol start="3"><li><strong>Asset Management</strong></li></ol>'},{paraid:1,text:"<ul>Webpack can manage and bundle different types of assets such as JavaScript, CSS, and images. This simplifies the development process and ensures that all resources are optimized and can be served quickly to the browser.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>Transpilation and Polyfilling</strong></li></ol>'},{paraid:1,text:"<ul>Modern JavaScript often requires transpilation to be compatible with a wider range of browsers. Webpack, with the help of loaders like Babel, can transpile ES6, TypeScript, or JSX code into code that browsers can interpret. It also integrates well with polyfills to support older browsers.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>Development Efficiency</strong></li></ol>'},{paraid:1,text:"<ul>With features like hot module replacement and Webpack Dev Server, developers can see their changes in real time without refreshing the browser, which streamlines the development process and increases productivity.</ul>"},{paraid:1,text:'<ol start="6"><li><strong>Customizable Build Processes</strong></li></ol>'},{paraid:1,text:"<ul>Webpack's extensive plugin system allows for a highly customizable build process. Developers can tailor the build to include specific optimizations, define environment variables, and even extend Webpack's functionality.</ul>"},{paraid:1,text:'<ol start="7"><li><strong>Integration with Modern Frameworks</strong></li></ol>'},{paraid:1,text:"<ul>Webpack integrates seamlessly with modern frameworks like React, Angular, and Vue.js. It can handle framework-specific file types and apply optimizations specific to these ecosystems.</ul>"},{paraid:1,text:'<ol start="8"><li><strong>Code Splitting and Lazy Loading</strong></li></ol>'},{paraid:1,text:"<ul>This feature allows developers to split the code into various bundles which can be loaded on demand. It's particularly useful for large applications to improve the initial load time.</ul>"},{paraid:1,text:'<ol start="9"><li><strong>Scalability</strong></li></ol>'},{paraid:1,text:"<ul>Webpack is suitable for both small and large projects, making it a versatile tool that can grow with the project.</ul>"},{paraid:1,text:"By providing these capabilities, Webpack has become a cornerstone in the build processes of modern web applications, enhancing both the developer's experience and the end-user's performance. It abstracts away the complexities of processing and bundling a multitude of resources and assets, allowing developers to focus on writing the actual application code."}]}]},{category:"webpack",chid:2,title:"Getting Started with Webpack",sections:[{secid:1,subtitle:"Installation and Basic Setup",paragraphs:[{paraid:1,text:"Installing and setting up Webpack in your project involves a few key steps. Below is a simplified guide to getting Webpack up and running:"},{paraid:1,text:"<ol><li><strong>Node.js and npm</strong></li></ol>"},{paraid:1,text:"<ul>Ensure that you have Node.js and npm (Node Package Manager) installed. Webpack is a Node.js-based tool, so it's a prerequisite.</ul>"},{paraid:1,text:'<ol start="2"><li><strong>Create Project Directory</strong></li></ol>'},{paraid:1,text:"<ul>Use following commands to create and enter your project directory:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Initialize npm</strong></li></ol>'},{paraid:1,text:"<ul>In your project directory, initialize npm, which will create a package.json file to manage your project's dependencies.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>Install Webpack</strong></li></ol>'},{paraid:1,text:"<ul>Install Webpack and its CLI (Command Line Interface) as development dependencies in your project:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>This command will install the latest version of Webpack and webpack-cli and add them to your `<code>package.json</code>` file.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>Basic Configuration</strong></li></ol>'},{paraid:1,text:"<ul>Create a Webpack configuration file named `<code>webpack.config.js</code>` in your project root. This file will allow you to specify rules, plugins, and other settings:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="5"><li><strong>Add a Build Script</strong></li></ol>'},{paraid:1,text:"<ul>In your `<code>package.json</code>` file, add a script to run Webpack easily:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="6"><li><strong>Your First Bundle</strong></li></ol>'},{paraid:1,text:"<ul>Create an `<code>index.js</code>` file inside a `<code>src</code>` folder in your project, which will be your entry point:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="7"><li><strong>Build</strong></li></ol>'},{paraid:1,text:"<ul>Run the following command to bundle your application:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>After running this command, Webpack will bundle your `<code>src/index.js</code>` into a `<code>dist/bundle.js</code>` file according to the configuration specified.</ul>"},{paraid:1,text:'<ol start="8"><li><strong>HTML File</strong></li></ol>'},{paraid:1,text:"<ul>Create an `<code>index.html</code>` file in the root of your project or in the `<code>dist</code>` folder, and include your bundle with a `<code>script</code>` tag:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_1_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"HTML",exampleTitle:"",codeLangs:"xml",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Now, when you open `<code>index.html</code>` in your browser, you should see the console log output from your `<code>index.js</code>` file.</ul>"},{paraid:1,text:"This setup is very basic and intended for getting started. As you grow your application, you'll likely need to expand on this configuration, adding loaders for handling CSS, images, and transpiling ES6+ JavaScript, as well as plugins for optimizing your output."}]},{secid:2,subtitle:"Understanding the Webpack Configuration File",paragraphs:[{paraid:1,text:"The Webpack configuration file, typically named `<code>webpack.config.js</code>`, is a JavaScript file that defines a set of configurations for Webpack to use when bundling your modules. It's placed at the root of your project and contains options that provide flexibility and control over the build process. Here\u2019s a breakdown of the common parts of a Webpack configuration file:"},{paraid:1,text:"<ol><li><strong>Entry</strong></li></ol>"},{paraid:1,text:"<ul>The `<code>entry</code>` property is the starting point for Webpack. It tells Webpack where to start and follows the graph of dependencies to know what to bundle. You can specify a single entry point or multiple entry points for different parts of your application.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Output</strong></li></ol>'},{paraid:1,text:"<ul>The `<code>output</code>` property tells Webpack where to emit the bundles it creates and how to name these files.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>For multiple entry points, you can use placeholders to define unique names for each output file.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>Loaders</strong></li></ol>'},{paraid:1,text:"<ul>Loaders allow Webpack to process other types of files and convert them into valid modules that can be included in your dependency graph.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="4"><li><strong>Plugins</strong></li></ol>'},{paraid:1,text:"<ul>Plugins can be used for a wide range of tasks like bundle optimization, asset management, and injection of environment variables.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="5"><li><strong>Mode</strong></li></ol>'},{paraid:1,text:"<ul>The `<code>mode</code>` parameter allows you to specify whether you're building in development or production mode, which can trigger Webpack to enable certain built-in optimizations.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="6"><li><strong>DevServer</strong></li></ol>'},{paraid:1,text:"<ul>The `<code>devServer</code>` configuration is used when using the Webpack Development Server, which provides live reloading.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="7"><li><strong>Resolve</strong></li></ol>'},{paraid:1,text:"<ul>The `<code>resolve</code>` property allows you to specify how Webpack should resolve module requests (for example, when you `<code>import</code>` or `<code>require</code>` something).</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_2_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"Understanding and properly configuring the `<code>webpack.config.js</code>` file is critical to harnessing the full power of Webpack. This file is highly configurable and can include a lot more options based on the specific needs of a project."}]}]},{category:"webpack",chid:3,title:"Core Concepts",sections:[{secid:1,subtitle:"Entry Points",paragraphs:[{paraid:1,text:"In Webpack, an entry point indicates which module Webpack should use to begin building out its internal dependency graph. Webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly). It's like telling Webpack, \"Here's the head of the thread; keep pulling until you've got everything you need to bundle the application.\""},{paraid:1,text:"Here\u2019s how entry points can be set up in the Webpack configuration:"},{paraid:1,text:"<ol><li><strong>Single Entry (Shorthand Syntax)</strong></li></ol>"},{paraid:1,text:"<ul>For a single entry point, you can provide a single file path string. This is often used for single-page applications.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Single Entry (Object Syntax)</strong></li></ol>'},{paraid:1,text:"<ul>Alternatively, you can use an object with a single property for a single entry point. This is more verbose but also more explicit, and it's necessary for more advanced configurations.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>Multiple Entry Points</strong></li></ol>'},{paraid:1,text:'<ul>If you\'re working on a larger application with multiple "pages" or entry points, you can define an object with multiple properties. This is useful for multi-page applications that need to output multiple bundled files.</ul>'},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Each property in the entry object results in a separate dependency graph and output file.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>Using Entry Points for Vendor Files</strong></li></ol>'},{paraid:1,text:"<ul>You can also use entry points to separate vendor code from application code. This can be useful for caching purposes, as vendor code tends to change less frequently than the actual application code.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>In this configuration, `<code>lodash</code>` and `<code>jquery</code>` would be bundled separately from your application's code.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>Entry Points with Dynamic Imports</strong></li></ol>'},{paraid:1,text:"<ul>Webpack supports dynamic imports that allow you to split your code at logical breakpoints and load pieces on demand.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>In this example, `<code>lodash</code>` would be loaded only when the getComponent function is called, not with the initial bundle.</ul>"},{paraid:1,text:"Entry points are a powerful feature of Webpack that give developers control over the bundling process. By carefully structuring entry points, developers can optimize loading times, leverage browser caching, and manage the application's resources efficiently."}]},{secid:2,subtitle:"Output",paragraphs:[{paraid:1,text:"The `<code>output</code>` property in Webpack's configuration specifies where to emit the bundled files and how to name these files. It's a way to tell Webpack what to do with the processed modules and assets. Here\u2019s how you can configure the output property in the `<code>webpack.config.js</code>` file:"},{paraid:1,text:"<ol><li><strong>Basic Output Configuration</strong></li></ol>"},{paraid:1,text:"<ul>For a simple single-entry application, your output configuration may look like this:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Multiple Entry Points and Output Files</strong></li></ol>'},{paraid:1,text:"<ul>When you have multiple entry points, you can use placeholders in the filename to ensure that each output bundle has a unique name:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>For the entry configuration:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Webpack would output `<code>app.bundle.js</code>` and `<code>admin.bundle.js</code>` into the `<code>dist</code>` directory.</ul>"},{paraid:1,text:'<ol start="3"><li><strong>Advanced Output Configuration</strong></li></ol>'},{paraid:1,text:"<ul>You can also include other options in your output configuration for more control:</ul>"},{paraid:1,text:"<ul><ol><li><strong>`<code>publicPath</code>`</strong></li></ol></ul>"},{paraid:1,text:"<ul><ul>Specifies the public URL of the output directory when referenced in a browser. Useful for loading assets from a CDN or a separate domain.</ul></ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:1,text:'<ul><ol start="2"><li><strong>`<code>chunkFilename</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Determines the name of non-entry chunk files. Useful for code-splitting scenarios.</ul></ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:1,text:'<ul><ol start="3"><li><strong>`<code>library</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>If you are creating a library, this option allows you to specify the name of the library and its type.</ul></ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:1,text:'<ul><ol start="4"><li><strong>`<code>pathinfo</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>When set, it includes comments with information about the modules.</ul></ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:1,text:'<ol start="4"><li><strong>Environment-Specific Outputs</strong></li></ol>'},{paraid:1,text:"<ul>You might want different output settings for development and production environments. For example, in development, you might want more verbose filenames or path info, while in production, you want everything to be as compact as possible.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"The output configuration in Webpack is critical for defining how and where your application's compiled assets will be deployed. By adjusting the output settings, developers can fine-tune the behavior of the resulting bundle to match the needs of their project's deployment strategy."}]},{secid:3,subtitle:"Loaders",paragraphs:[{paraid:1,text:"Loaders in Webpack transform the files before they are added to the bundle. While Webpack itself only understands JavaScript, loaders allow it to process and bundle other types of files as well. This is how Webpack can internally work with assets like CSS, images, and even newer JavaScript syntax by converting them into valid modules that can be included in the dependency graph."},{paraid:1,text:"<ol><li><strong>How Loaders Work</strong></li></ol>"},{paraid:1,text:"<ul>Loaders have two properties in the Webpack configuration:</ul>"},{paraid:1,text:"<ul><ol><li><strong>`<code>test</code>`</strong></li></ol></ul>"},{paraid:1,text:"<ul><ul>A condition that must be met for the loader to be applied. This is usually provided as a regular expression.</ul></ul>"},{paraid:1,text:'<ul><ol start="2"><li><strong>`<code>use</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>An array or string specifying the loader(s) to use. If multiple loaders are needed, they are applied from last to first (right to left or bottom to top).</ul></ul>"},{paraid:1,text:'<ol start="2"><li><strong>Common Loaders and Their Uses</strong></li></ol>'},{paraid:1,text:"<ul>Here are some commonly used loaders and their purposes:</ul>"},{paraid:1,text:"<ul><ol><li><strong>`<code>babel-loader</code>`</strong></li></ol></ul>"},{paraid:1,text:"<ul><ul>Transpiles ES6+ JavaScript to backwards compatible JavaScript.</ul></ul>"},{paraid:1,text:'<ul><ol start="2"><li><strong>`<code>css-loader</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Interprets `<code>@import</code>` and `<code>url()</code>` like `<code>import/require()</code>` and resolves them.</ul></ul>"},{paraid:1,text:'<ul><ol start="3"><li><strong>`<code>style-loader</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Takes CSS imported by the `<code>css-loader</code>` and adds it to the DOM by injecting a `<code>&lt;style&gt;</code>` tag.</ul></ul>"},{paraid:1,text:'<ul><ol start="4"><li><strong>`<code>sass-loader</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Loads and compiles SASS/SCSS files to CSS.</ul></ul>"},{paraid:1,text:'<ul><ol start="5"><li><strong>`<code>file-loader</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Emits the file into the output folder and returns the URL. It's used for files like images and fonts.</ul></ul>"},{paraid:1,text:'<ul><ol start="6"><li><strong>`<code>url-loader</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Works like the `<code>file-loader</code>`, but can return a Data URL if the file is smaller than a byte limit.</ul></ul>"},{paraid:1,text:'<ul><ol start="7"><li><strong>`<code>ts-loader</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Helps in loading TypeScript files and compiling them to JavaScript.</ul></ul>"},{paraid:1,text:'<ol start="3"><li><strong>Configuring Loaders</strong></li></ol>'},{paraid:1,text:"<ul>Here is an example of how you might configure these loaders in a Webpack configuration file:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"Loaders are a fundamental part of Webpack that provide a method for transforming and bundling a variety of resources. By configuring loaders, developers can incorporate many different file types and pre-processing steps into their build process, significantly enhancing the capabilities of Webpack."}]},{secid:4,subtitle:"Plugins",paragraphs:[{paraid:1,text:"Plugins in Webpack are the backbone of the tool's extensibility. They serve a wide range of purposes, from bundle optimization and asset management to environment variable injection and feature addition. Unlike loaders, which are used to transform certain types of modules, plugins can affect the build process as a whole and are used to perform a wide array of tasks."},{paraid:1,text:"<ol><li><strong>How Plugins Work</strong></li></ol>"},{paraid:1,text:"<ul>Plugins can apply transformations and optimizations to the entire bundle or chunks of your bundles. They can also modify how the bundles are written to disk or do anything else a plugin author can imagine. They are instantiated with the new keyword and often allow for options to be specified.</ul>"},{paraid:1,text:'<ol start="2"><li><strong>Common Plugins and Their Uses</strong></li></ol>'},{paraid:1,text:"<ul>Here are some of the commonly used Webpack plugins:</ul>"},{paraid:1,text:"<ul><ol><li><strong>`<code>HtmlWebpackPlugin</code>`</strong></li></ol></ul>"},{paraid:1,text:"<ul><ul>Simplifies the creation of HTML files to serve your bundles. It's especially useful for injecting scripts or linking CSS files.</ul></ul>"},{paraid:1,text:'<ul><ol start="2"><li><strong>`<code>MiniCssExtractPlugin</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Extracts CSS into separate files. It creates a CSS file per JS file which contains CSS.</ul></ul>"},{paraid:1,text:'<ul><ol start="3"><li><strong>`<code>CleanWebpackPlugin</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Removes/cleans your build folder(s) before building. This ensures that only used files are generated.</ul></ul>"},{paraid:1,text:'<ul><ol start="4"><li><strong>`<code>DefinePlugin</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Allows you to create global constants which can be configured at compile time.</ul></ul>"},{paraid:1,text:'<ul><ol start="5"><li><strong>`<code>TerserPlugin</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Minimizes JavaScript. It's included in Webpack 5 by default in production mode.</ul></ul>"},{paraid:1,text:'<ul><ol start="6"><li><strong>`<code>CompressionWebpackPlugin</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Compresses the assets, producing .gz files or any other format you configure.</ul></ul>"},{paraid:1,text:'<ul><ol start="7"><li><strong>`<code>EnvironmentPlugin</code>`</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>A shorthand for DefinePlugin when you want to expose environment variables.</ul></ul>"},{paraid:1,text:'<ol start="3"><li><strong>Configuring Plugins</strong></li></ol>'},{paraid:1,text:"<ul>Here's how you might include some of these plugins in your Webpack configuration:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_3_4_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"Plugins provide a powerful way to enhance and fine-tune the build process. They work at a broader scope than loaders and can perform tasks ranging from critical path optimizations to simply replacing strings in your bundled files. Understanding how to use plugins effectively is key to leveraging Webpack's full potential in automating and enhancing your build process."}]}]},{category:"webpack",chid:4,title:"Working with Loaders",sections:[{secid:1,subtitle:"Configuring Loaders",paragraphs:[{paraid:1,text:"Configuring loaders in Webpack allows you to process different types of files and convert them into modules as they are added to the dependency graph. Here\u2019s a step-by-step guide to configuring some common loaders:"},{paraid:1,text:"<ol><li><strong>Install Loaders</strong></li></ol>"},{paraid:1,text:"<ul>First, you need to install the loaders you require. For instance, if you want to process CSS, you would need `<code>css-loader</code>` to handle CSS imports and `<code>style-loader</code>` to inject styles into the DOM.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>For other file types, you would install the corresponding loaders. Here are a few examples:</ul>"},{paraid:1,text:"<ul>Babel Loader:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Sass Loader:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>File Loader:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>URL Loader:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Configure Rules</strong></li></ol>'},{paraid:1,text:"<ul>In your `<code>webpack.config.js</code>`, you set up rules inside the `<code>module.rules</code>` array. Each rule contains conditions under which it should match a file and what loaders should be applied to it.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>Run Webpack</strong></li></ol>'},{paraid:1,text:"<ul>After you have set up your rules, you can run Webpack to bundle your project:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Webpack will now process any file that matches the rules you've specified with the corresponding loaders.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>Additional Tips</strong></li></ol>'},{paraid:1,text:"<ul><ol><li><strong>Loaders Order</strong></li></ol></ul>"},{paraid:1,text:"<ul><ul>Remember that loaders are applied in the reverse order they are specified in the `<code>use</code>` array. In the CSS example above, `<code>css-loader</code>` runs before `<code>style-loader</code>`.</ul></ul>"},{paraid:1,text:'<ul><ol start="2"><li><strong>Chaining Loaders</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>You can chain loaders to run in sequence. For example, if you have SASS files, you can use `<code>sass-loader</code>` followed by `<code>css-loader</code>` and then `<code>style-loader</code>`.</ul></ul>"},{paraid:1,text:'<ul><ol start="3"><li><strong>Inline Loaders</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Sometimes, you might want to specify loaders directly in your import statements. For example: `<code>import 'style-loader!css-loader!./styles.css';</code>`. This bypasses the config, but it's not recommended for maintainability.</ul></ul>"},{paraid:1,text:'<ul><ol start="4"><li><strong>Options</strong></li></ol></ul>'},{paraid:1,text:"<ul><ul>Many loaders accept options that can be specified in the `<code>options</code>` object in the rule. These can alter the behavior of the loader.</ul></ul>"},{paraid:1,text:"<ul>By properly configuring loaders, you enable Webpack to handle a wide variety of resources, thereby making your build process more robust and your application more versatile.</ul>"}]},{secid:2,subtitle:"Handling Stylesheets (CSS, SASS)",paragraphs:[{paraid:1,text:"Handling stylesheets, particularly CSS and SASS, in Webpack involves using specific loaders to process these files and include them in your build. Here\u2019s a guide on how to configure Webpack to work with CSS and SASS files:"},{paraid:1,text:"<ol><li><strong>Install Loaders</strong></li></ol>"},{paraid:1,text:"<ul>First, install the necessary loaders: `<code>css-loader</code>`, `<code>style-loader</code>`, and if you're working with SASS, you'll also need `<code>sass-loader</code>` and `<code>sass</code>` (the latter being the actual SASS preprocessor library).</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Configure Webpack to Use Loaders</strong></li></ol>'},{paraid:1,text:"<ul>In your `<code>webpack.config.js</code>` file, set up the rules within the `<code>module</code>` field for both CSS and SASS files.</ul>"},{paraid:1,text:"<ul>For CSS:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>For SASS:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>Importing Stylesheets in Your JavaScript</strong></li></ol>'},{paraid:1,text:"<ul>Now, you can import CSS/SASS files directly in your JavaScript modules, and Webpack will process them according to the rules you've set up.</ul>"},{paraid:1,text:"<ul>For CSS:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>For SASS:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="4"><li><strong>Production Considerations</strong></li></ol>'},{paraid:1,text:"<ul>In a development environment, injecting styles directly into the DOM with `<code>style-loader</code>` is convenient for hot reloading and fast CSS updates. However, for production, it's common to extract CSS into separate files using `<code>MiniCssExtractPlugin</code>`, which provides better performance.</ul>"},{paraid:1,text:"<ul>Install the plugin:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Configure the plugin in `<code>webpack.config.js</code>`:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"By following these steps, you set up Webpack to handle both CSS and SASS files. Remember that the order of loaders is important: they are applied from last to first, so `<code>sass-loader</code>` runs before `<code>css-loader</code>`, which in turn runs before `<code>style-loader</code>` or `<code>MiniCssExtractPlugin.loader</code>`."}]},{secid:3,subtitle:"Transpiling JavaScript with Babel",paragraphs:[{paraid:1,text:"Transpiling JavaScript with Babel in a Webpack setup involves using `<code>babel-loader</code>` to process your JavaScript files. Babel is a JavaScript compiler that converts ECMAScript 2015+ code (ES6+) into a backwards-compatible version of JavaScript that can be run by older browsers."},{paraid:1,text:"Here\u2019s how to set up Babel with Webpack:"},{paraid:1,text:"<ol><li><strong>Install Babel and Babel-Loader</strong></li></ol>"},{paraid:1,text:"<ul>You will need to install `<code>babel-loader</code>` and the core Babel packages:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>If you want to use new JavaScript features that require a polyfill (like async/await), you should also install `<code>@babel/polyfill</code>` (Babel 7.4.0 and above recommend using core-js and regenerator-runtime instead):</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_3_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Configure Babel</strong></li></ol>'},{paraid:1,text:"<ul>Create a Babel configuration file named `<code>.babelrc</code>` in the root of your project, or you can set the Babel options within your Webpack config. Here's what the `<code>.babelrc</code>` might look like:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_3_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ul>The `<code>useBuiltIns: "usage"</code>` setting will add polyfills for the features used in your project, based on your browser targets, without including the whole core-js library.</ul>'},{paraid:1,text:'<ol start="3"><li><strong>Configure Webpack to Use Babel-Loader</strong></li></ol>'},{paraid:1,text:"<ul>In your `<code>webpack.config.js</code>`, you need to add a rule for JavaScript files to use `<code>babel-loader</code>`:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_3_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="4"><li><strong>Run Webpack</strong></li></ol>'},{paraid:1,text:"<ul>After adding `<code>babel-loader</code>` to your Webpack configuration, running Webpack will now transpile your JavaScript files according to your Babel settings.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_3_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Your JavaScript code will now be transpiled from ES6+ to a version of JavaScript that you specify or that works in the browsers you target.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>Import Polyfills (if necessary)</strong></li></ol>'},{paraid:1,text:"<ul>If you are using polyfills, you need to import them at the top of your entry JavaScript file:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_3_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>This ensures that your transpiled code will run correctly in browsers that do not support newer JavaScript features natively.</ul>"},{paraid:1,text:"By following these steps, you'll have set up Babel in your Webpack configuration, enabling you to write modern JavaScript while maintaining support for older browsers."}]},{secid:4,subtitle:"Working with Images and Fonts",paragraphs:[{paraid:1,text:"Working with images and fonts in Webpack requires you to configure specific loaders that will handle the inclusion of these assets in your bundle. Here's how you can set up Webpack to manage images and fonts:"},{paraid:1,text:"<ol><li><strong>Install File Loader and/or URL Loader</strong></li></ol>"},{paraid:1,text:"<ul>To handle images and fonts, you can use `<code>file-loader</code>` or `<code>url-loader</code>`. `<code>url-loader</code>` works like `<code>file-loader</code>`, but can return a Data URL if the file is smaller than a specified limit.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>Configure Loaders for Images</strong></li></ol>'},{paraid:1,text:"<ul>In your `<code>webpack.config.js</code>` file, add a rule for image file types using `<code>file-loader</code>` or `<code>url-loader</code>`. Here's an example using `<code>file-loader</code>`:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>If you want to inline images as Data URLs to reduce HTTP requests, you can use `<code>url-loader</code>`:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>Configure Loaders for Fonts</strong></li></ol>'},{paraid:1,text:"<ul>Similarly, add a rule for font file types. The configuration is much like the one for images:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="4"><li><strong>Importing Images and Fonts in Your JavaScript</strong></li></ol>'},{paraid:1,text:"<ul>Now you can import image and font files directly in your JavaScript modules:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="5"><li><strong>Using Images and Fonts in CSS</strong></li></ol>'},{paraid:1,text:"<ul>With the aforementioned configuration, you can also reference image and font files in your CSS (or SCSS, if you have the sass-loader set up) files:</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"CSS",exampleTitle:"",codeLangs:"css",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"<ul>Webpack will process these URLs using the configured loaders.</ul>"},{paraid:1,text:'<ol start="6"><li><strong>Run Webpack</strong></li></ol>'},{paraid:1,text:"<ul>After setting up the configuration, run Webpack to bundle your project. The images and fonts will be processed according to the rules defined in your configuration file.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_4_4_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"Webpack will now handle images and fonts correctly, either inlining them if they are below the specified limit or emitting them as separate files in the specified directories."}]}]},{category:"webpack",chid:5,title:"Diving into Plugins",sections:[{secid:1,subtitle:"Basic Plugins for Everyday Use",paragraphs:[{paraid:1,text:"In a Webpack configuration, plugins can significantly enhance the functionality and efficiency of your build process. Here are some basic, yet powerful, plugins that are commonly used for everyday Webpack use:"},{paraid:1,text:"<ol><li><strong>HtmlWebpackPlugin</strong></li></ol>"},{paraid:1,text:"<ul>Generates an HTML file for your application by injecting automatically all your generated bundles.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="2"><li><strong>CleanWebpackPlugin</strong></li></ol>'},{paraid:1,text:"<ul>Cleans your build folder(s) before each build, so that only used files will be generated.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="3"><li><strong>MiniCssExtractPlugin</strong></li></ol>'},{paraid:1,text:"<ul>Extracts CSS into separate files. It creates a CSS file per JS file which contains CSS.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="4"><li><strong>DefinePlugin</strong></li></ol>'},{paraid:1,text:"<ul>Allows you to create global constants which can be configured at compile time.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="5"><li><strong>CopyWebpackPlugin</strong></li></ol>'},{paraid:1,text:"<ul>Copies individual files or entire directories, which already exist, to the build directory.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"BASH",exampleTitle:"",codeLangs:"bash",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="6"><li><strong>ProvidePlugin</strong></li></ol>'},{paraid:1,text:"<ul>Automatically load modules instead of having to import or require them everywhere.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:'<ol start="7"><li><strong>EnvironmentPlugin</strong></li></ol>'},{paraid:1,text:"<ul>A shorthand for DefinePlugin when you want to expose environment variables.</ul>"},{paraid:1,text:"",codeConfig:{codeid:"webpack_5_1_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"2.5rem"}},{paraid:1,text:"These plugins can serve as a starting point for setting up a Webpack project, as they cover a broad range of common needs, such as file preparation, environment management, and content injection. Keep in mind that Webpack's ecosystem is large, and there are plugins available for almost any task you can imagine in your build process."}]},{secid:2,subtitle:"Code Minimization and Optimization Plugins",paragraphs:[{paraid:1,text:"Code minimization and optimization are crucial for improving the performance and efficiency of web applications. Webpack provides a number of plugins to help with these tasks, and many of them come built-in with Webpack, especially if you're using Webpack 4 or newer. Here are some plugins and configurations for code minimization and optimization:"},{paraid:1,text:"<ol><li><strong>TerserPlugin</strong></li></ol>"},{paraid:1,text:"<ul>Used for JavaScript minimization. It's included by default in Webpack 5's production mode, but for earlier versions or custom configurations, you can install and set it up manually:</ul>"},{paraid:1,text:'<ol start="2"><li><strong>CssMinimizerWebpackPlugin</strong></li></ol>'},{paraid:1,text:"<ul>For CSS minimization. It uses `<code>cssnano</code>` to optimize and minify your CSS.</ul>"},{paraid:1,text:'<ol start="3"><li><strong>MiniCssExtractPlugin</strong></li></ol>'},{paraid:1,text:"<ul>This plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It is useful for CSS minimization when used in conjunction with `<code>CssMinimizerPlugin</code>`.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>HtmlWebpackPlugin</strong></li></ol>'},{paraid:1,text:"<ul>When used with the `<code>minify</code>` option, this plugin can also minimize HTML.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>OptimizeCSSAssetsPlugin</strong></li></ol>'},{paraid:1,text:"<ul>Note: This plugin is primarily used in Webpack 4 and is replaced by `<code>CssMinimizerPlugin</code>` in Webpack 5. It optimizes and minimizes CSS assets.</ul>"},{paraid:1,text:'<ol start="6"><li><strong>CompressionWebpackPlugin</strong></li></ol>'},{paraid:1,text:"<ul>This plugin can generate compressed versions of assets to serve them with Content-Encoding. For example, it can create `<code>.gz</code>` files for gzip compression which can be served by servers to reduce transfer size.</ul>"},{paraid:1,text:'<ol start="7"><li><strong>Webpack Bundle Analyzer</strong></li></ol>'},{paraid:1,text:"<ul>While not directly related to minimization, this plugin is useful for optimization because it helps understand what's inside your bundles. You can use this information to identify and eliminate unnecessary code.</ul>"},{paraid:1,text:"Remember to only use these plugins in production builds to avoid slowing down development builds, where quick build and rebuild times are more important than optimization. You can control this by having separate Webpack configuration files for development and production, or by using environment variables to toggle these features."}]},{secid:3,subtitle:"Dynamic HTML Generation",paragraphs:[]},{secid:4,subtitle:"Bundle Analysis and Optimization",paragraphs:[]}]},{category:"webpack",chid:6,title:"Introduction to Webpack",sections:[{secid:1,subtitle:"What is Webpack?",paragraphs:[]}]},{category:"webpack",chid:7,title:"Introduction to Webpack",sections:[{secid:1,subtitle:"What is Webpack?",paragraphs:[]}]},{category:"webpack",chid:8,title:"Introduction to Webpack",sections:[{secid:1,subtitle:"What is Webpack?",paragraphs:[]}]},{category:"webpack",chid:9,title:"Introduction to Webpack",sections:[{secid:1,subtitle:"What is Webpack?",paragraphs:[]}]},{category:"webpack",chid:10,title:"Introduction to Webpack",sections:[{secid:1,subtitle:"What is Webpack?",paragraphs:[]}]}];var o=a(4650),u=a(4214);let m=(()=>{class e{constructor(t){this.coreService=t}ngOnInit(){this.coreService.sentBookData(d)}ngOnDestroy(){}}return e.\u0275fac=function(t){return new(t||e)(o.Y36(u.p))},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-webpack-book"]],decls:1,vars:0,template:function(t,c){1&t&&o._UZ(0,"router-outlet")},dependencies:[s.lC]}),e})();const g="mkdir my-webpack-project\ncd my-webpack-project",f="npm init -y",b="npm install --save-dev webpack webpack-cli",x="const path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js', // Your main JavaScript file\n  output: {\n    path: path.resolve(__dirname, 'dist'), // Output directory\n    filename: 'bundle.js' // Output bundle\n  },\n  mode: 'development' // Can be 'development', 'production', or 'none'\n};",h='"scripts": {\n  "build": "webpack"\n}',_="// src/index.js\nconsole.log('Hello, Webpack!');",w="npm run build",k='\x3c!-- dist/index.html --\x3e\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Webpack Example</title>\n</head>\n<body>\n  <script src="bundle.js"><\/script>\n</body>\n</html>',y="module.exports = {\n  entry: './src/index.js' // Single entry point\n  // or for multiple entry points\n  entry: {\n    app: './src/app.js',\n    admin: './src/admin.js'\n  }\n};",S="const path = require('path');\n\nmodule.exports = {\n  // ...\n  output: {\n    path: path.resolve(__dirname, 'dist'), // Output directory\n    filename: 'bundle.js' // Output filename\n  }\n};",v="output: {\n  filename: '[name].bundle.js' // Will create app.bundle.js and admin.bundle.js\n}",L="module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /.css$/, // A regex that tests what kind of files to run through this loader\n        use: [\n          'style-loader', // Adds CSS to the DOM by injecting a `<style>` tag\n          'css-loader' // Interprets `@import` and `url()` like `import/require()` and will resolve them\n        ]\n      },\n      {\n        test: /.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader', // Transpile ES6+ to backwards compatible JavaScript\n          options: {\n            presets: ['@babel/preset-env']\n          }\n        }\n      }\n      // Add more loaders as needed\n    ]\n  }\n};",T="const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html' // Generates an HTML file for your bundle\n    })\n    // Add more plugins as needed\n  ]\n};",C="module.exports = {\n  // ...\n  mode: 'development' // or 'production'\n};",O="module.exports = {\n  // ...\n  devServer: {\n    contentBase: './dist',\n    open: true // Open the browser after server has been started\n  }\n};",W="module.exports = {\n  // ...\n  resolve: {\n    extensions: ['.js', '.jsx'], // Automatically resolve certain extensions\n    alias: {\n      // Create aliases\n      Components: path.resolve(__dirname, 'src/components/')\n    }\n  }\n};",j="module.exports = {\n  entry: './path/to/my/entry/file.js'\n};",P="module.exports = {\n  entry: {\n    main: './path/to/my/entry/file.js'\n  }\n};",J="module.exports = {\n  entry: {\n    pageOne: './src/pageOne/index.js',\n    pageTwo: './src/pageTwo/index.js',\n    pageThree: './src/pageThree/index.js'\n  }\n};",I="module.exports = {\n  entry: {\n    main: './src/index.js',\n    vendor: ['lodash', 'jquery']\n  }\n};",B="function getComponent() {\n  return import('lodash').then(({ default: _ }) => {\n    var element = document.createElement('div');\n    element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n    return element;\n  });\n}\n\ngetComponent().then(component => {\n  document.body.appendChild(component);\n});",A="const path = require('path');\n\nmodule.exports = {\n  // ...\n  output: {\n    path: path.resolve(__dirname, 'dist'), // Absolute path to the directory where output should be placed\n    filename: 'bundle.js' // Name of the single output file\n  }\n};",H="output: {\n  path: path.resolve(__dirname, 'dist'),\n  filename: '[name].bundle.js' // '[name]' is replaced by the name of the entry point\n}",M="entry: {\n  app: './src/app.js',\n  admin: './src/admin.js'\n}",E="output: {\n  publicPath: '/assets/', // It will be used to generate URLs to e.g. images\n}",z="output: {\n  chunkFilename: '[name].chunk.js'\n}",D="output: {\n  library: 'MyLibrary',\n  libraryTarget: 'umd' // Supports CommonJS, AMD and as a variable in the root\n}",F="output: {\n  pathinfo: true\n}",q="output: {\n  filename: process.env.NODE_ENV === 'development' ? '[name].js' : '[name].[contenthash].js'\n}",U="module.exports = {\n  module: {\n    rules: [\n      {\n        test: /.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: ['@babel/preset-env']\n          }\n        }\n      },\n      {\n        test: /.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n      {\n        test: /.(png|svg|jpg|jpeg|gif)$/i,\n        type: 'asset/resource'\n      },\n      {\n        test: /.(woff|woff2|eot|ttf|otf)$/i,\n        type: 'asset/resource'\n      },\n      {\n        test: /.tsx?$/,\n        use: 'ts-loader',\n        exclude: /node_modules/\n      }\n    ]\n  }\n};",R="const HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  // ... other configuration ...\n  plugins: [\n    new CleanWebpackPlugin(),\n    new MiniCssExtractPlugin(),\n    new HtmlWebpackPlugin({\n      title: 'My App',\n      template: 'src/template.html'\n    })\n  ]\n};",N="npm install --save-dev css-loader style-loader",$="npm install --save-dev babel-loader @babel/core @babel/preset-env",Y="npm install --save-dev sass-loader sass",V="npm install --save-dev file-loader",G="npm install --save-dev url-loader",K="module.exports = {\n  module: {\n    rules: [\n      {\n        test: /.css$/, // Matches all .css files\n        use: [\n          'style-loader', // 2. Inject styles into DOM\n          'css-loader' // 1. Turns css into commonjs\n        ]\n      },\n      {\n        test: /.js$/, // Matches all .js files\n        exclude: /node_modules/, // Excludes the node_modules directory\n        use: {\n          loader: 'babel-loader', // Transpile ES6+ to ES5\n          options: {\n            presets: ['@babel/preset-env']\n          }\n        }\n      },\n      {\n        test: /.(png|svg|jpg|jpeg|gif)$/, // Matches image files\n        use: [\n          {\n            loader: 'file-loader', // Outputs image files to output directory\n            options: {\n              name: '[name].[ext]', // Keeps the original file name and extension\n              outputPath: 'images/' // Puts the image files in an \"images\" directory\n            }\n          }\n        ]\n      },\n      // ...more rules for other file types like .scss, .ts, etc.\n    ]\n  },\n  // ...other config settings\n};",X="npm run build",Q="npm install --save-dev css-loader style-loader sass-loader sass",Z="module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: [\n          'style-loader', // 2. After css-loader, takes the CSS and injects it into the DOM\n          'css-loader'    // 1. First, turns CSS into commonjs modules\n        ]\n      },\n      // ... (other rules)\n    ]\n  },\n  // ...\n};",ee="module.exports = {\n  // ...\n  module: {\n    rules: [\n      // ... (existing rules)\n      {\n        test: /.scss$/,\n        use: [\n          'style-loader',   // 3. Injects styles into the DOM\n          'css-loader',     // 2. Turns CSS into commonjs\n          'sass-loader'     // 1. Turns SASS into CSS\n        ]\n      }\n    ]\n  },\n  // ...\n};",te="import './styles.css';",ae="import './styles.scss';",oe="npm install --save-dev mini-css-extract-plugin",ie="const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: [\n          MiniCssExtractPlugin.loader, // 2. Extract CSS into files\n          'css-loader'                 // 1. Turns CSS into commonjs\n        ]\n      },\n      {\n        test: /.scss$/,\n        use: [\n          MiniCssExtractPlugin.loader, // 3. Extract CSS into files\n          'css-loader',                // 2. Turns CSS into commonjs\n          'sass-loader'                // 1. Turns SASS into CSS\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin()\n  ],\n  // ...\n};",le="npm install --save-dev babel-loader @babel/core @babel/preset-env",re="npm install --save core-js regenerator-runtime",se='{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "useBuiltIns": "usage", // or "entry"\n        "corejs": 3 // specify the version of core-js\n      }\n    ]\n  ]\n}',ne="module.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /.js$/, // A regex that tells Webpack to use this loader for all .js files\n        exclude: /node_modules/, // Exclude the node_modules directory\n        use: {\n          loader: 'babel-loader', // Specify the loader\n          options: {\n            presets: ['@babel/preset-env'] // Use the env preset\n          }\n        }\n      },\n      // ... other rules for other types of files\n    ]\n  },\n  // ...\n};",ce="npm run build",pe='import "core-js/stable";\nimport "regenerator-runtime/runtime";',de="npm install --save-dev file-loader url-loader",ue="module.exports = {\n  // ...\n  module: {\n    rules: [\n      // ... (other rules)\n      {\n        test: /.(png|svg|jpe?g|gif)$/i,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n    ]\n  },\n  // ...\n};",me="{\n  test: /.(png|svg|jpe?g|gif)$/i,\n  use: [\n    {\n      loader: 'url-loader',\n      options: {\n        limit: 8192, // Images smaller than 8KB will be inlined as Data URLs\n        name: 'images/[name].[ext]'\n      }\n    }\n  ]\n}",ge="{\n  test: /.(woff|woff2|eot|ttf|otf)$/i,\n  use: [\n    {\n      loader: 'file-loader',\n      options: {\n        name: '[name].[ext]',\n        outputPath: 'fonts/'\n      }\n    }\n  ]\n}",fe="import myImage from './image.png';\nimport myFont from './font.woff2';\n\n// You can then use these imports in your code, for example as a src for an image or in a CSS rule.",be=".my-element {\n  background-image: url('./image.png');\n}\n\n@font-face {\n  font-family: 'MyFont';\n  src: url('./font.woff2') format('woff2');\n}",xe="npm run build",he="npm install --save-dev html-webpack-plugin",_e="const HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'My App',\n      template: './src/template.html' // Loads a custom template\n    })\n  ]\n};",we="npm install --save-dev clean-webpack-plugin",ke="const { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new CleanWebpackPlugin(),\n    // ... other plugins\n  ]\n};",ye="npm install --save-dev mini-css-extract-plugin",Se="const MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  // ...\n  module: {\n    rules: [\n      {\n        test: /.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader']\n      },\n      // ... other rules\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n      chunkFilename: '[id].css'\n    })\n  ]\n};",ve="const webpack = require('webpack');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n    })\n  ]\n};",Le="npm install --save-dev copy-webpack-plugin",Te="const CopyWebpackPlugin = require('copy-webpack-plugin');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new CopyWebpackPlugin({\n      patterns: [\n        { from: 'source', to: 'dest' },\n        { from: 'other', to: 'public' },\n      ],\n    }),\n    // ... other plugins\n  ]\n};",Ce="const webpack = require('webpack');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.ProvidePlugin({\n      $: 'jquery',\n      jQuery: 'jquery'\n    })\n  ]\n};",Oe="const webpack = require('webpack');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    new webpack.EnvironmentPlugin(['NODE_ENV', 'DEBUG'])\n  ]\n};",We="",je="",Pe="",Je="",Ie="",Be="",Ae="",He="",Me="",Ee="",ze="";var De=a(7809);let l=(()=>{class e{constructor(){this.bookData=r}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-webpack-chapter"]],decls:1,vars:1,consts:[[3,"bookData"]],template:function(t,c){1&t&&o._UZ(0,"app-chapter",0),2&t&&o.Q6J("bookData",c.bookData)},dependencies:[De.l]}),e})();const Fe=[{path:"",component:m,children:[{path:"chapter",component:l},{path:"chapter/:chid",component:l},{path:"chapter/:chid/section/:secid",component:l},{path:"**",component:l},{path:"",component:l}]}];let qe=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=o.oAB({type:e}),e.\u0275inj=o.cJS({imports:[s.Bz.forChild(Fe),s.Bz]}),e})();var Ue=a(1375);let Re=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=o.oAB({type:e}),e.\u0275inj=o.cJS({imports:[p.ez,qe,Ue.I]}),e})()}}]);