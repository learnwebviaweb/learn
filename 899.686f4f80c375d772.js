"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[899],{2899:(jo,n,a)=>{a.r(n),a.d(n,{JsBookModule:()=>vo});var r={};a.r(r),a.d(r,{js_2_2_1:()=>f,js_2_2_10:()=>O,js_2_2_11:()=>E,js_2_2_2:()=>_,js_2_2_3:()=>y,js_2_2_4:()=>b,js_2_2_5:()=>v,js_2_2_6:()=>j,js_2_2_7:()=>w,js_2_2_8:()=>S,js_2_2_9:()=>T,js_2_3_1:()=>C,js_2_3_10:()=>W,js_2_3_10_1:()=>X,js_2_3_11:()=>G,js_2_3_11_1:()=>V,js_2_3_12:()=>$,js_2_3_12_1:()=>Q,js_2_3_13:()=>K,js_2_3_13_1:()=>Z,js_2_3_1_1:()=>L,js_2_3_2:()=>k,js_2_3_2_1:()=>J,js_2_3_3:()=>A,js_2_3_3_1:()=>D,js_2_3_4:()=>I,js_2_3_4_1:()=>P,js_2_3_5:()=>H,js_2_3_5_1:()=>F,js_2_3_6:()=>q,js_2_3_6_1:()=>M,js_2_3_7:()=>B,js_2_3_7_1:()=>z,js_2_3_8:()=>R,js_2_3_8_1:()=>N,js_2_3_9:()=>Y,js_2_3_9_1:()=>U,js_2_4_1:()=>ee,js_2_4_10:()=>_e,js_2_4_10_1:()=>ye,js_2_4_11:()=>be,js_2_4_11_1:()=>ve,js_2_4_1_1:()=>te,js_2_4_2:()=>ae,js_2_4_2_1:()=>oe,js_2_4_3:()=>le,js_2_4_3_1:()=>ie,js_2_4_4:()=>re,js_2_4_4_1:()=>se,js_2_4_5:()=>ne,js_2_4_5_1:()=>ce,js_2_4_6:()=>ue,js_2_4_6_1:()=>de,js_2_4_7:()=>pe,js_2_4_7_1:()=>me,js_2_4_8:()=>he,js_2_4_8_1:()=>ge,js_2_4_9:()=>xe,js_2_4_9_1:()=>fe,js_3_1_1:()=>je,js_3_1_1_1:()=>we,js_3_1_2:()=>Se,js_3_1_2_1:()=>Te,js_3_1_3:()=>Oe,js_3_1_3_1:()=>Ee,js_3_1_4:()=>Ce,js_3_1_4_1:()=>Le,js_3_1_5:()=>ke,js_3_1_5_1:()=>Je,js_3_1_6:()=>Ae,js_3_1_6_1:()=>De,js_3_1_7:()=>Ie,js_3_1_7_1:()=>Pe,js_3_2_1:()=>He,js_3_2_1_1:()=>Fe,js_3_2_2:()=>qe,js_3_2_2_1:()=>Me,js_3_2_3:()=>Be,js_3_2_3_1:()=>ze,js_3_2_4:()=>Re,js_3_2_4_1:()=>Ne,js_3_2_5:()=>Ye,js_3_2_5_1:()=>Ue,js_3_2_5a:()=>c,js_3_2_6:()=>We,js_3_2_6_1:()=>Xe,js_3_3_1:()=>Ge,js_3_3_2:()=>Ve,js_3_3_3:()=>$e,js_3_3_3_1:()=>Qe,js_3_3_4:()=>Ke,js_3_3_4_1:()=>Ze,js_3_3_5:()=>et,js_3_3_5_1:()=>tt,js_3_3_6:()=>at,js_3_3_6_1:()=>ot,js_3_3_7:()=>lt,js_3_3_7_1:()=>it,js_3_4_1:()=>rt,js_3_4_2:()=>st,js_3_4_3:()=>nt,js_3_4_3_1:()=>ct,js_3_4_4:()=>ut,js_3_4_4_1:()=>dt,js_3_4_5:()=>pt,js_3_4_5_1:()=>mt,js_3_4_6:()=>ht,js_3_4_6_1:()=>gt,js_3_4_7:()=>xt,js_3_4_7_1:()=>ft,js_3_4_8:()=>_t,js_3_4_8_1:()=>yt,js_3_4_9:()=>bt,js_3_4_9_1:()=>vt,js_4_2_1:()=>jt,js_4_2_10:()=>Bt,js_4_2_10_1:()=>zt,js_4_2_1_1:()=>wt,js_4_2_2:()=>St,js_4_2_2_1:()=>Tt,js_4_2_3:()=>Ot,js_4_2_3_1:()=>Et,js_4_2_4:()=>Ct,js_4_2_4_1:()=>Lt,js_4_2_5:()=>kt,js_4_2_5_1:()=>Jt,js_4_2_6:()=>At,js_4_2_6_1:()=>Dt,js_4_2_7:()=>It,js_4_2_7_1:()=>Pt,js_4_2_8:()=>Ht,js_4_2_8_1:()=>Ft,js_4_2_9:()=>qt,js_4_2_9_1:()=>Mt,js_4_3_1:()=>Rt,js_4_3_2:()=>Nt,js_4_3_2_1:()=>Yt,js_4_3_3:()=>Ut,js_4_3_3_1:()=>Wt,js_4_3_4:()=>Xt,js_4_3_4_1:()=>Gt,js_4_3_5:()=>Vt,js_4_3_5_1:()=>$t,js_4_3_6:()=>Qt,js_4_3_6_1:()=>Kt,js_4_4_1:()=>Zt,js_4_4_1_1:()=>ea,js_5_2_1:()=>ta,js_5_2_1_1:()=>aa,js_5_2_2:()=>oa,js_5_2_2_1:()=>la,js_5_3_1:()=>ia,js_5_3_1_1:()=>ra,js_5_3_2:()=>sa,js_5_3_2_1:()=>na,js_5_4_1:()=>ca,js_5_4_1_1:()=>ua,js_5_4_2:()=>da,js_5_4_2_1:()=>pa,js_5_5_1:()=>ma,js_5_5_1_1:()=>ha,js_6_1_1:()=>ga,js_6_1_1_1:()=>xa,js_6_1_2:()=>fa,js_6_1_2_1:()=>_a,js_6_1_3:()=>ya,js_6_1_4:()=>ba,js_6_1_4_1:()=>va,js_6_2_1:()=>ja,js_6_2_10_1:()=>Aa,js_6_2_11:()=>Da,js_6_2_11_1:()=>Ia,js_6_2_2:()=>wa,js_6_2_3:()=>Sa,js_6_2_4:()=>Ta,js_6_2_5:()=>Oa,js_6_2_5_1:()=>Ea,js_6_2_6:()=>Ca,js_6_2_7:()=>La,js_6_2_8:()=>ka,js_6_2_9:()=>Ja,js_6_3_1:()=>Pa,js_6_3_1_1:()=>Ha,js_6_3_2:()=>Fa,js_6_3_2_1:()=>qa,js_6_3_3:()=>Ma,js_6_3_3_1:()=>Ba,js_7_1_1:()=>za,js_7_1_1_1:()=>Ra,js_7_1_2:()=>Na,js_7_1_2_1:()=>Ya,js_7_1_3:()=>Ua,js_7_1_3_1:()=>Xa,js_7_1_3a:()=>Wa,js_7_2_1:()=>Ga,js_7_2_1_1:()=>Va,js_7_2_2:()=>$a,js_7_2_2_1:()=>Qa,js_7_2_3:()=>Ka,js_7_2_3_1:()=>Za,js_7_2_4:()=>eo,js_7_2_4_1:()=>to,js_7_2_5:()=>ao,js_7_2_5_1:()=>oo,js_7_2_5a:()=>d,js_7_2_6:()=>lo,js_7_2_6_1:()=>io,js_7_2_7:()=>ro,js_7_2_7_1:()=>so,js_7_2_8:()=>no,js_7_2_8_1:()=>co,js_7_3_1:()=>uo,js_7_3_1_1:()=>po,js_7_3_2:()=>mo,js_7_3_2_1:()=>ho,js_8_2_1:()=>go,js_8_2_1_1:()=>xo});var m=a(6895),s=a(9299);const h=[{category:"js",chid:1,title:"Introduction to JavaScript",sections:[{secid:1,subtitle:"What is JavaScript?",paragraphs:[{paraid:1,text:"JavaScript is a high-level, interpreted programming language primarily used for creating interactive and dynamic behavior on websites. It is a versatile language that allows developers to build a wide range of applications, from simple web page enhancements to complex web applications and server-side development."},{paraid:2,text:"Here are some key points about JavaScript:"},{paraid:1,text:"<ol><li><strong>Core Features</strong></li></ol>"},{paraid:1,text:"<ul><ul><li><strong>Dynamic Typing</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>JavaScript is dynamically typed, which means you don't have to specify the data type of a variable when you declare it.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Object-Oriented and Functional</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>JavaScript supports both object-oriented and functional programming paradigms.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Event-Driven</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>It can respond to events, such as user interactions like clicks, form input, and page navigation, making websites more interactive.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Client-Side and Server-Side</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Although originally designed to run in the browser, JavaScript is now used server-side as well, most notably with Node.js.</ul></ul>"},{paraid:1,text:'<ol start="2"><li><strong>Key Components</strong></li></ol>'},{paraid:1,text:"<ul><ul><li><strong>ECMAScript</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>The standardized scripting language specification upon which JavaScript is based.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Document Object Model (DOM)</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>The structure representing a web page, which JavaScript can manipulate.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Asynchronous JavaScript and XML (AJAX)</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>A technique that allows JavaScript to communicate with a server in the background without refreshing the page.</ul></ul>"},{paraid:1,text:'<ol start="3"><li><strong>Areas of Application</strong></li></ol>'},{paraid:1,text:"<ul><ul><li><strong>Web Development</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>JavaScript is crucial for client-side web scripting. Modern web frameworks like Angular, React, and Vue.js are JavaScript-based.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Server-Side Development</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>With Node.js, JavaScript can be used to build robust server-side applications.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Mobile App Development</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Frameworks like React Native enable JavaScript-based mobile app development.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Internet of Things (IoT)</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>JavaScript can be used in IoT development, particularly through Node.js.</ul></ul>"},{paraid:1,text:'<ol start="4"><li><strong>Advantages</strong></li></ol>'},{paraid:1,text:"<ul><ul><li><strong>Versatile</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Can be used for both front-end and back-end development.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Large Ecosystem</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Extensive libraries, frameworks, and community support.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Good Performance</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Just-in-time compilation and other optimizations make JavaScript very fast.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Cross-Platform</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Runs on any device that has a web browser, and server-side via Node.js.</ul></ul>"},{paraid:1,text:'<ol start="5"><li><strong>Limitations</strong></li></ol>'},{paraid:1,text:"<ul><ul><li><strong>Single-Threaded</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Although it can perform asynchronous operations, JavaScript is single-threaded, which can be a limitation for some types of applications.</ul></ul>"},{paraid:1,text:"<ul><ul><li><strong>Client-Side Security</strong></li></ul></ul>"},{paraid:1,text:"<ul><ul>Since JavaScript runs on the client side, it can be exploited for malicious purposes.</ul></ul>"},{paraid:4,text:"Overall, JavaScript is a powerful programming language that enables developers to bring interactivity, functionality, and dynamism to web pages and web applications. Its versatility, widespread adoption, and continuous development make it a popular choice for both beginner and experienced developers in the web development industry."}]},{secid:2,subtitle:"History and Evolution of JavaScript",paragraphs:[{paraid:1,text:"JavaScript has an interesting history and has undergone significant evolution since its creation. Here's an overview of the history and key milestones of JavaScript:"},{paraid:1,text:"<ol><li><strong>Creation of JavaScript</strong></li></ol>"},{paraid:1,text:'<ul>JavaScript was created by Brendan Eich in 1995 while he was working at Netscape Communications. Originally called "Mocha", it was later renamed to "LiveScript" and finally to "JavaScript". The goal was to develop a scripting language for web browsers that could add interactivity and dynamic features to web pages.</ul>'},{paraid:1,text:'<ol start="2"><li><strong>Collaboration with ECMA</strong></li></ol>'},{paraid:1,text:"<ul>In 1996, Netscape submitted JavaScript to Ecma International, a standards organization, for standardization. The standardization process resulted in the creation of the ECMAScript specification, which defines the language syntax, semantics, and standard library. The first standardized version was ECMAScript 1 in 1997.</ul>"},{paraid:1,text:'<ol start="3"><li><strong>Adoption by Multiple Browsers</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript quickly gained popularity due to its ability to enhance web pages. Other browsers, such as Microsoft's Internet Explorer, started implementing JavaScript support, often with their own variations. This led to some compatibility issues between different browser implementations.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>DOM and Dynamic Web Content</strong></li></ol>'},{paraid:1,text:"<ul>In the late 1990s, the Document Object Model (DOM) was introduced. The DOM allowed JavaScript to access and manipulate elements of an HTML document, enabling dynamic updates and interactivity. This advancement played a crucial role in the evolution of JavaScript as a powerful web development language.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>AJAX and Rich Internet Applications</strong></li></ol>'},{paraid:1,text:"<ul>In the early 2000s, JavaScript became a key component in the development of AJAX (Asynchronous JavaScript and XML) techniques. AJAX allowed web applications to retrieve data from servers asynchronously without reloading the entire page. This led to the rise of rich internet applications (RIAs), which provided a more desktop-like user experience within a web browser.</ul>"},{paraid:1,text:'<ol start="6"><li><strong>Frameworks and Libraries</strong></li></ol>'},{paraid:1,text:"<ul>The mid-2000s saw the emergence of JavaScript frameworks and libraries that simplified web development. Libraries like jQuery (2006) provided a concise and convenient API for manipulating the DOM and handling events. Later, powerful frameworks like AngularJS (2009), React (2013), and Vue.js (2014) gained popularity, offering advanced tools for building complex web applications.</ul>"},{paraid:1,text:'<ol start="7"><li><strong>Server-Side JavaScript</strong></li></ol>'},{paraid:1,text:"<ul>In 2009, Ryan Dahl introduced Node.js, a runtime environment that allowed JavaScript to run on the server-side. Node.js enabled developers to use JavaScript for server-side programming, opening up opportunities for full-stack JavaScript development and facilitating the creation of scalable and efficient web applications.</ul>"},{paraid:1,text:'<ol start="8"><li><strong>Evolution of ECMAScript</strong></li></ol>'},{paraid:1,text:"<ul>ECMAScript, the standard for JavaScript, has undergone several significant updates and releases. ECMAScript 3 (1999) introduced many core features still widely used today, while ECMAScript 5 (2009) brought important enhancements. ECMAScript 6 (2015) introduced major language improvements, including classes, arrow functions, and modules. Subsequent versions like ECMAScript 2016, 2017, and 2018 introduced additional features and syntax enhancements.</ul>"},{paraid:1,text:'<ol start="9"><li><strong>Modern JavaScript</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript has continued to evolve with regular updates and new features. Recent developments have focused on improving performance, enhancing developer productivity, and providing better language support for complex applications. Notable features introduced in recent years include async/await for asynchronous programming, spread syntax, optional chaining, and more.</ul>"},{paraid:3,text:"JavaScript has come a long way from its early days as a simple scripting language to its current position as a versatile and powerful programming language for web development. Its evolution, standardization, and the vibrant ecosystem of frameworks and libraries have contributed to its widespread adoption and its position as one of the essential technologies on the web."}]},{secid:3,subtitle:"JavaScript in Web Development",paragraphs:[{paraid:1,text:"JavaScript plays a vital role in web development, enabling developers to create dynamic, interactive, and feature-rich web applications. Here are some key aspects of JavaScript's role in web development:"},{paraid:1,text:"<ol><li><strong>Client-Side Interactivity</strong></li></ol>"},{paraid:1,text:"<ul>JavaScript is primarily used on the client-side, meaning it runs directly in the user's web browser. It allows developers to add interactivity and responsiveness to web pages. JavaScript can handle events, such as button clicks, form submissions, and mouse movements, and respond dynamically by modifying the content, styles, or behavior of the page.</ul>"},{paraid:1,text:'<ol start="2"><li><strong>Manipulating the DOM</strong></li></ol>'},{paraid:1,text:"<ul>The Document Object Model (DOM) is a programming interface that represents the structure and content of an HTML document as a tree of objects. JavaScript provides extensive support for accessing, modifying, and manipulating the DOM elements. Developers can use JavaScript to dynamically update the content, create or remove elements, change styles, and handle user interactions.</ul>"},{paraid:1,text:'<ol start="3"><li><strong>Form Validation</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript enables form validation on the client-side, allowing for immediate feedback to users when they submit forms. Developers can use JavaScript to perform various validations, such as checking for required fields, validating email addresses, enforcing input formats, and displaying error messages without the need for a server roundtrip.</ul>"},{paraid:1,text:'<ol start="4"><li><strong>AJAX and Asynchronous Operations</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript, in combination with AJAX (Asynchronous JavaScript and XML) techniques, allows web applications to retrieve data from servers asynchronously without refreshing the entire page. This enables a smoother user experience, as content can be dynamically loaded and updated in the background, providing real-time updates and reducing server load.</ul>"},{paraid:1,text:'<ol start="5"><li><strong>Rich User Interfaces</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript frameworks and libraries like React, Angular, and Vue.js have gained popularity for building complex user interfaces. These frameworks provide powerful tools for managing state, rendering components, and handling user interactions. They enable developers to create interactive, responsive, and dynamic web applications with reusable components and efficient rendering.</ul>"},{paraid:1,text:'<ol start="6"><li><strong>Browser APIs and Integration</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript provides access to various browser APIs (Application Programming Interfaces) that expose additional functionalities and capabilities to web applications. These APIs include geolocation, local storage, web notifications, audio/video playback, canvas for graphics, and many more. JavaScript allows developers to leverage these APIs to create compelling and interactive experiences directly within the browser.</ul>"},{paraid:1,text:'<ol start="7"><li><strong>Web Application Frameworks</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript is the language of choice for many web application frameworks. These frameworks, such as Express.js, Meteor, and Nest.js, enable developers to build server-side applications, APIs, and full-stack web applications using JavaScript. These frameworks provide structure, routing, database integration, and other essential components for developing scalable and robust web applications.</ul>"},{paraid:1,text:'<ol start="8"><li><strong>Cross-Browser Compatibility</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript is supported by all modern web browsers, making it a reliable choice for developing cross-browser compatible web applications. While there may be some minor differences in browser implementations, JavaScript frameworks and libraries often abstract away these inconsistencies, allowing developers to write code that works across different browsers.</ul>"},{paraid:1,text:'<ol start="9"><li><strong>Continuous Development and Libraries</strong></li></ol>'},{paraid:1,text:"<ul>JavaScript has a vast ecosystem of libraries, frameworks, and tools that continuously evolve and enhance web development capabilities. Developers can leverage these libraries and tools to streamline development processes, enhance functionality, improve performance, and address common challenges.</ul>"},{paraid:3,text:"In summary, JavaScript is a fundamental technology in web development, enabling developers to create dynamic and interactive web applications. Its versatility, extensive browser support, and thriving ecosystem make it a powerful language for building engaging user experiences on the web."}]},{secid:4,subtitle:"Setting Up a JavaScript Development Environment",paragraphs:[{paraid:1,text:"Setting up a JavaScript development environment involves configuring the necessary tools and software to write, test, and run JavaScript code. Here's a general guide on how to set up a JavaScript development environment:"},{paraid:2,text:"<ol><li><strong>Install a Text Editor or Integrated Development Environment (IDE)</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Choose a text editor or IDE that suits your preferences and requirements. Popular options include Visual Studio Code, Sublime Text, Atom, and WebStorm. Download and install the editor or IDE of your choice.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Install Node.js</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Node.js allows you to run JavaScript code on the server-side and provides a package manager called npm (Node Package Manager) for managing JavaScript libraries and tools.</li></ul></ul>"},{paraid:5,text:'<ul><ul><li>Visit the official Node.js website (<a href="https://nodejs.org">https://nodejs.org</a>) and download the recommended version for your operating system.</li></ul></ul>'},{paraid:5,text:"<ul><ul><li>Run the installer and follow the instructions to complete the installation.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Set up a Package.json file</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Open a command prompt or terminal in your project's directory.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Run the command `<code>npm init</code>` and follow the prompts to initialize a new package.json file.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>The package.json file keeps track of your project's dependencies and other important configuration details.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Install JavaScript Libraries and Tools</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Use npm to install any required JavaScript libraries or tools. For example, if you need a library like React, run the command npm `<code>install react</code>`.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Add the necessary libraries and tools as dependencies in your package.json file.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Use a Module Bundler (optional)</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>If you plan to use advanced JavaScript features or want to bundle your code for production, consider using a module bundler like Webpack or Parcel.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Install the desired module bundler globally or locally as per their respective installation instructions.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Configure the bundler to handle JavaScript files and any other necessary assets (CSS, images, etc.) in your project.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Testing and Debugging</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Set up a testing framework like Jest, Mocha, or Jasmine to write and run tests for your JavaScript code.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Use browser developer tools (built into modern browsers) or additional tools like Chrome DevTools or Firefox Developer Tools for debugging JavaScript code.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Browser Live-Reload (optional)</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>Consider using a live-reload tool like Browsersync or webpack-dev-server to automatically refresh the browser whenever you make changes to your JavaScript code.</li></ul></ul>"},{paraid:16,text:'<ol start="8"><li><strong>Version Control</strong></li></ol>'},{paraid:17,text:"<ul><ul><li>Initialize a version control system like Git in your project directory to track code changes and collaborate with others efficiently.</li></ul></ul>"},{paraid:18,text:"Once you have set up your JavaScript development environment, you can start creating JavaScript files, importing dependencies, running scripts, and testing your code. Remember to regularly update your dependencies, maintain good coding practices, and stay updated with the latest developments in the JavaScript ecosystem."},{paraid:19,text:"Note: The specific steps for setting up a JavaScript development environment may vary depending on your operating system, text editor or IDE, and specific project requirements. It's always a good idea to consult the official documentation and resources for the tools and libraries you choose to use."}]}]},{category:"js",chid:2,title:"JavaScript Basics I",sections:[{secid:1,subtitle:"Variables and Data Types",paragraphs:[{paraid:1,text:"In JavaScript, variables are used to store data values that can be manipulated and accessed throughout your code. JavaScript has several data types that represent different kinds of values. Let's explore variables and data types in JavaScript:"},{paraid:2,text:"<ol><li><strong>Declaring Variables</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>In JavaScript, variables are declared using the `<code>var</code>`, `<code>let</code>`, or `<code>const</code>` keywords.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The `<code>var</code>` keyword is used for declaring variables with function scope or global scope. However, it is recommended to use `<code>let</code>` or `<code>const</code>` instead of `<code>var</code>` for better scoping rules and avoiding potential issues.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The `<code>let</code>` keyword is used for declaring variables with block scope, which means they are only accessible within the block of code where they are defined.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The `<code>const</code>` keyword is used for declaring variables that hold constant values. Once assigned, a `<code>const</code>` variable cannot be reassigned a new value. It is also block-scoped.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Data Types</strong></li></ol>'},{paraid:5,text:"<ul>JavaScript has several built-in data types, including:</ul>"},{paraid:6,text:"<ul><ul><li>Primitive Data Types:</li></ul></ul>"},{paraid:7,text:"<ul><ul><strong>Number</strong>: Represents numeric values, both integers and floating-point numbers.<br/><br/>For example:</ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_2_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:"<ul><ul><strong>String</strong>: Represents sequences of characters.<br/><br/>For example:</ul></ul>"},{paraid:10,text:"",codeConfig:{codeid:"js_2_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:"<ul><ul><strong>Boolean</strong>': Represents logical values `<code>true</code>` or `<code>false</code>`.<br/><br/>For example:</ul></ul>"},{paraid:12,text:"",codeConfig:{codeid:"js_2_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:13,text:"<ul><ul><strong>Null</strong>: Represents the intentional absence of any object value.<br/><br/>For example:</ul></ul>"},{paraid:14,text:"",codeConfig:{codeid:"js_2_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:15,text:"<ul><ul><strong>Undefined</strong>: Represents the uninitialized value of a variable.<br/><br/>For example:</ul></ul>"},{paraid:16,text:"",codeConfig:{codeid:"js_2_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:17,text:"<ul><ul><strong>Symbol</strong> (Introduced in ECMAScript 2015): Represents unique and immutable values, often used as object property identifiers.<br/><br/>For example:</ul></ul>"},{paraid:18,text:"",codeConfig:{codeid:"js_2_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:19,text:"<ul><ul><li>Object Data Type:</li></ul></ul>"},{paraid:20,text:"<ul><ul><strong>Object</strong>: Represents a collection of key-value pairs. Objects are more complex data types that can hold properties and methods.<br/><br/>For example:</ul></ul>"},{paraid:21,text:"",codeConfig:{codeid:"js_2_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:22,text:"<ul><ul><li>Special Data Type:</li></ul></ul>"},{paraid:23,text:"<ul><ul><strong>BigInt</strong> (Introduced in ECMAScript 2020): Represents arbitrary-precision integers.<br/><br/>For example:</ul></ul>"},{paraid:24,text:"",codeConfig:{codeid:"js_2_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:25,text:'<ol start="3"><li><strong>Dynamic Typing</strong></li></ol>'},{paraid:26,text:"<ul><ul><li>JavaScript is a dynamically-typed language, meaning variables can hold values of any data type without explicitly specifying the type.</li><li>You can assign different data types to the same variable during the execution of your program.</li></ul></ul>"},{paraid:27,text:'<ol start="4"><li><strong>Type Coercion</strong></li></ol>'},{paraid:28,text:"<ul><ul><li>JavaScript also performs type coercion, which is the automatic conversion of values between different types in certain situations.</li><li>For example, JavaScript can convert a number to a string when performing string concatenation.</li></ul></ul>"},{paraid:29,text:"",codeConfig:{codeid:"js_2_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:30,text:'<ol start="5"><li><strong>Checking Data Type</strong></li></ol>'},{paraid:31,text:"<ul><ul><li>You can use the `<code>typeof</code>` operator to check the data type of a value.<br/><br/>For example:</li></ul></ul>"},{paraid:32,text:"",codeConfig:{codeid:"js_2_2_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:33,text:"<ul><ul><li>The `<code>instanceof</code>` operator checks if an object is an instance of a specific class or constructor function.<br/><br/>For example:</li></ul></ul>"},{paraid:34,text:"",codeConfig:{codeid:"js_2_2_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:35,text:"Understanding variables and data types is essential for working with JavaScript effectively. By knowing how to declare variables and utilize the various data types, you can store and manipulate different kinds of values in your JavaScript code."}]},{secid:2,subtitle:"Operators and Expressions",paragraphs:[{paraid:1,text:"In JavaScript, operators and expressions are used to perform operations on values and produce results. They allow you to manipulate variables, compare values, perform arithmetic calculations, and more. Let's explore the various operators and expressions in JavaScript:"},{paraid:2,text:"<ol><li><strong>Assignment Operators</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>The assignment operator (`<code>=</code>`) is used to assign a value to a variable.<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_2_3_1",exampleid:"js_2_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:"<ul><ul><li>Additional assignment operators include `<code>+=</code>`, `<code>-=</code>`, `<code>*=</code>`, `<code>/=</code>`, and `<code>%=</code>`. These operators perform the corresponding operation and assign the result to the variable.<br/><br/>For example:</li></ul></ul>"},{paraid:6,text:"",codeConfig:{codeid:"js_2_3_2",exampleid:"js_2_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:'<ol start="2"><li><strong>Arithmetic Operators</strong></li></ol>'},{paraid:8,text:"<ul>JavaScript supports standard arithmetic operators.</ul>"},{paraid:9,text:"<ul><ul><li>Addition (`<code>+</code>`), subtraction (`<code>-</code>`), multiplication (`<code>*</code>`), and division (`<code>/</code>`).<br/><br/>For example:</li></ul></ul>"},{paraid:10,text:"",codeConfig:{codeid:"js_2_3_3",exampleid:"js_2_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:"<ul><ul><li>Modulo (`<code>%</code>`), which returns the remainder of a division operation.<br/><br/>For example:</li></ul></ul>"},{paraid:12,text:"",codeConfig:{codeid:"js_2_3_4",exampleid:"js_2_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:13,text:"<ul><ul><li>Increment (`<code>++</code>`) and decrement (`<code>--</code>`) operators for increasing or decreasing a value by 1.<br/><br/>For example:</li></ul></ul>"},{paraid:14,text:"",codeConfig:{codeid:"js_2_3_5",exampleid:"js_2_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:15,text:'<ol start="3"><li><strong>Comparison Operators</strong></li></ol>'},{paraid:16,text:"<ul>Comparison operators are used to compare values and return a Boolean (`<code>true</code>` or `<code>false</code>`) result.</ul>"},{paraid:17,text:"<ul><ul><li>Equal to (`<code>==</code>` or `<code>===</code>`), not equal to (`<code>!=</code>` or `<code>!==</code>`).</li></ul></ul>"},{paraid:17,text:'<ul><ul><li>The "equal to" operator (`<code>==</code>`) and the "not equal to" operator (`<code>!=</code>`) compare the values of two operands, performing type coercion if necessary before making the comparison. Type coercion means that JavaScript will try to convert the operands to the same data type before making the comparison.</li></ul></ul>'},{paraid:17,text:'<ul><ul><li>The "strict equal to" operator (`<code>===</code>`) and the "strict not equal to" operator (`<code>!==</code>`) compare both the values and the types of the operands. It does not perform any type coercion, so for the "strict equal to" operator to return true, both the values and the data types must be the same.<br/><br/>For example:</li></ul></ul>'},{paraid:18,text:"",codeConfig:{codeid:"js_2_3_6",exampleid:"js_2_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:19,text:"<ul><ul><li>Greater than (`<code>></code>`), less than (`<code><</code>`), greater than or equal to (`<code>>=</code>`), less than or equal to (`<code><=</code>`).<br/><br/>For example:</li></ul></ul>"},{paraid:20,text:"",codeConfig:{codeid:"js_2_3_7",exampleid:"js_2_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:21,text:'<ol start="4"><li><strong>Logical Operators</strong></li></ol>'},{paraid:22,text:"<ul>Logical operators are used to combine or manipulate Boolean values.</ul>"},{paraid:23,text:"<ul><ul><li>Logical AND (`<code>&&</code>`), which returns `<code>true</code>` if both operands are `<code>true</code>`.<br/><br/>For example:</li></ul></ul>"},{paraid:24,text:"",codeConfig:{codeid:"js_2_3_8",exampleid:"js_2_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:25,text:"<ul><ul><li>Logical OR (`<code>||</code>`), which returns `<code>true</code>` if at least one operand is `<code>true</code>`.<br/><br/>For example:</li></ul></ul>"},{paraid:26,text:"",codeConfig:{codeid:"js_2_3_9",exampleid:"js_2_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:27,text:"<ul><ul><li>Logical NOT (`<code>!</code>`), which negates a Boolean value.<br/><br/>For example:</li></ul></ul>"},{paraid:28,text:"",codeConfig:{codeid:"js_2_3_10",exampleid:"js_2_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:29,text:'<ol start="5"><li><strong>Conditional (Ternary) Operator</strong></li></ol>'},{paraid:30,text:"<ul><ul><li>The conditional operator (`<code>condition ? expr1 : expr2</code>`) is a shorthand for an `<code>if-else</code>` statement.</li></ul></ul>"},{paraid:30,text:"<ul><ul><li>It evaluates the condition and returns `<code>expr1</code>` if the condition is `<code>true</code>`, or `<code>expr2</code>` if the condition is `<code>false</code>`.<br/><br/>For example:</li></ul></ul>"},{paraid:31,text:"",codeConfig:{codeid:"js_2_3_11",exampleid:"js_2_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:32,text:'<ol start="6"><li><strong>Grouping Operator</strong></li></ol>'},{paraid:33,text:"<ul><ul><li>The grouping operator (`<code>()</code>`) is used to group expressions and control the order of evaluation.<br/><br/>For example:</li></ul></ul>"},{paraid:34,text:"",codeConfig:{codeid:"js_2_3_12",exampleid:"js_2_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:35,text:'<ol start="7"><li><strong>Bitwise Operators</strong></li></ol>'},{paraid:36,text:"<ul><ul><li>JavaScript also supports bitwise operators (`<code>&</code>`, `<code>|</code>`, `<code>^</code>`, `<code>~</code>`, `<code><<</code>`, `<code>>></code>`, `<code>>>></code>`) for manipulating binary representations of numbers. These operators are mainly used in advanced scenarios like low-level programming or working with binary data.<br/><br/>For example:</li></ul></ul>"},{paraid:37,text:"",codeConfig:{codeid:"js_2_3_13",exampleid:"js_2_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:38,text:"Operators and expressions allow you to perform a wide range of operations and calculations in JavaScript. By understanding and utilizing these operators effectively, you can manipulate values, make decisions, and control the flow of your code."}]},{secid:3,subtitle:"Control Flow and Loops",paragraphs:[{paraid:1,text:"Control flow and loops in JavaScript provide mechanisms to control the execution flow of your code and perform repetitive tasks. They allow you to make decisions based on conditions and iterate over collections or execute code multiple times. Let's explore the control flow statements and loop structures in JavaScript:"},{paraid:2,text:"<ol><li><strong>Conditional Statements</strong></li></ol>"},{paraid:3,text:"<ul><ul><li><strong>`<code>if...else</code>` statement</strong>: Executes a block of code if a specified condition is `<code>true</code>`, otherwise execute the `<code>else</code>` block. The `<code>else</code>` statement can be optional:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_2_4_1",exampleid:"js_2_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:"<ul><ul><li><strong>`<code>else if</code>` statement</strong>: Allows you to check multiple conditions sequentially:</li></ul></ul>"},{paraid:6,text:"",codeConfig:{codeid:"js_2_4_2",exampleid:"js_2_4_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:"<ul><ul><li><strong>`<code>switch</code>` statement</strong>: Evaluates an expression and executes code based on matching cases:</li></ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_2_4_3",exampleid:"js_2_4_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:'<ol start="2"><li><strong>Loop Structures</strong></li></ol>'},{paraid:10,text:"<ul><ul><li><strong>`<code>for</code>` loop</strong>: Executes a block of code a specific number of times:</li></ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_2_4_4",exampleid:"js_2_4_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:"<ul><ul><li><strong>`<code>while</code>` loop</strong>: Executes a block of code as long as a specified condition is true:</li></ul></ul>"},{paraid:13,text:"",codeConfig:{codeid:"js_2_4_5",exampleid:"js_2_4_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:14,text:"<ul><ul><li><strong>`<code>do while</code>` loop</strong>: Similar to a while loop, but the code is executed at least once before checking the condition:</li></ul></ul>"},{paraid:15,text:"",codeConfig:{codeid:"js_2_4_6",exampleid:"js_2_4_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:16,text:"<ul><ul><li><strong>`<code>for...in</code>` loop</strong>: Iterates over the properties of an object:</li></ul></ul>"},{paraid:17,text:"",codeConfig:{codeid:"js_2_4_7",exampleid:"js_2_4_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:18,text:"<ul><ul><li><strong>`<code>for...of</code>` loop</strong>: Iterates over iterable objects (arrays, strings, etc.) and provides access to each element:</li></ul></ul>"},{paraid:19,text:"",codeConfig:{codeid:"js_2_4_8",exampleid:"js_2_4_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:20,text:'<ol start="3"><li><strong>Control Statements</strong></li></ol>'},{paraid:21,text:"<ul><ul><li><strong>`<code>break</code>` statement</strong>: Terminates the current loop or switch statement and transfers control to the next statement:</li></li></ul></ul>"},{paraid:22,text:"",codeConfig:{codeid:"js_2_4_9",exampleid:"js_2_4_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:23,text:"<ul><ul><li><strong>`<code>continue</code>` statement</strong>: Skips the current iteration of a loop and continues with the next iteration:</li></ul></ul>"},{paraid:24,text:"",codeConfig:{codeid:"js_2_4_10",exampleid:"js_2_4_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:25,text:"<ul><ul><li><strong>`<code>return</code>` statement</strong>: Used to exit a function (will be discussed in next chapter) and optionally return a value. When encountered inside a loop that is part of a function, it immediately terminates the function execution, including the loop, and returns the specified value (if any):</li></ul></ul>"},{paraid:26,text:"",codeConfig:{codeid:"js_2_4_11",exampleid:"js_2_4_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:27,text:"These control flow statements and loop structures allow you to write dynamic and flexible code. By utilizing conditional statements, you can make decisions and execute specific blocks of code based on different conditions. Loops enable you to repeat a block of code multiple times or iterate over collections, performing operations on each item. Understanding and effectively using these control flow and loop structures are essential for building powerful and efficient JavaScript programs."}]}]},{category:"js",chid:3,title:"JavaScript Basics II",sections:[{secid:1,subtitle:"Functions, Scope and Closure",paragraphs:[{paraid:1,text:"Functions and scope are crucial concepts in JavaScript that enable you to organize and encapsulate code, reuse functionality, and control variable visibility. Let's explore functions and scope in JavaScript:"},{paraid:2,text:"<ol><li><strong>Functions</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>A function is a block of code that performs a specific task or calculates a value. It can be invoked (called) multiple times throughout your code.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Functions in JavaScript can be declared using the `<code>function</code>` keyword.</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_3_1_1",exampleid:"js_3_1_1_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:"<ul><ul><li>Parameters are variables that you define in the function declaration and act as placeholders for values passed during the function call.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>The `<code>return</code>` statement is used to specify the value to be returned from the function.</li></ul></ul>"},{paraid:6,text:'<ol start="2"><li><strong>Function Invocation</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>To execute a function, you need to invoke (call) it by using its name followed by parentheses `<code>()</code>`. You can pass arguments inside the parentheses if the function expects parameters.</li></ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_3_1_2",exampleid:"js_3_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:'<ol start="3"><li><strong>Function Scope</strong></li></ol>'},{paraid:10,text:"<ul><ul><li>Variables defined inside a function are called local variables and have function scope. They are accessible only within the function.</li></ul><ul/>"},{paraid:10,text:"<ul><ul><li>Variables declared outside any function (at the top level) have global scope and can be accessed from anywhere in the code.</li></ul><ul/>"},{paraid:10,text:"<ul><ul><li>It's important to properly manage the scope of variables to avoid naming conflicts and unintended side effects.<br/><br/>For example:</li></ul><ul/>"},{paraid:11,text:"",codeConfig:{codeid:"js_3_1_3",exampleid:"js_3_1_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:'<ol start="4"><li><strong>Anonymous Functions and Function Expressions</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>JavaScript allows you to create anonymous functions, which are functions without a specified name. They are often used as callbacks or immediately invoked.<br/><br/>For example:</li></ul></ul>"},{paraid:14,text:"",codeConfig:{codeid:"js_3_1_4",exampleid:"js_3_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:15,text:'<ol start="5"><li><strong>Function Closures</strong></li></ol>'},{paraid:16,text:"<ul><ul><li>JavaScript supports closures, which allow functions to access variables defined in their outer (enclosing) scope even after the outer function has finished executing.</li></ul></ul>"},{paraid:16,text:"<ul><ul><li>Closures are created when an inner function references variables from its outer function.<br/><br/>For example:</li></ul></ul>"},{paraid:17,text:"",codeConfig:{codeid:"js_3_1_5",exampleid:"js_3_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:18,text:'<ol start="6"><li><strong>Arrow Functions</strong></li></ol>'},{paraid:19,text:"<ul><ul><li>Introduced in ECMAScript 2015 (ES6), arrow functions provide a concise syntax for writing functions.<br/><br/>For example:</li></ul></ul>"},{paraid:20,text:"",codeConfig:{codeid:"js_3_1_6",exampleid:"js_3_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:21,text:'<ol start="7"><li><strong>IIFE (Immediately Invoked Function Expression)<strong></li></ol>'},{paraid:22,text:"<ul><ul><li>An IIFE is an anonymous function that is executed immediately after it's defined. It helps create a private scope and prevent variable collisions.<br/><br/>For example:</li></ul></ul>"},{paraid:23,text:"",codeConfig:{codeid:"js_3_1_7",exampleid:"js_3_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:24,text:"Understanding functions and scope is fundamental in JavaScript development. Functions allow you to encapsulate code, create reusable modules, and organize your logic effectively. Scope management ensures that variables are accessible where needed while avoiding conflicts and unintended modifications. By leveraging functions and understanding scope, you can build modular, maintainable, and efficient JavaScript applications."}]},{secid:2,subtitle:"Strings and Operations",paragraphs:[{paraid:1,text:"In JavaScript, a string is a sequence of characters enclosed in single ('') or double (\"\") quotes. Strings are a primitive data type and are used to represent textual data in JavaScript. Strings can contain letters, numbers, symbols, and even special characters. Here are some common string operations in JavaScript:"},{paraid:2,text:"<ol><li><strong>String Concatenation</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>String concatenation is the process of combining two or more strings to create a new string. In JavaScript, you can use the `<code>+</code>` operator to concatenate strings.<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_3_2_1",exampleid:"js_3_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:'<ol start="2"><li><strong>String Length</strong></li></ol>'},{paraid:6,text:"<ul><ul><li>You can find the length of a string using the `<code>length</code>` property of the string object.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_3_2_2",exampleid:"js_3_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:8,text:'<ol start="3"><li><strong>Accessing Characters in a String</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>You can access individual characters in a string using bracket notation or the `<code>charAt()</code>` method.<br/><br/>For example:</li></ul></ul>"},{paraid:10,text:"",codeConfig:{codeid:"js_3_2_3",exampleid:"js_3_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:'<ol start="4"><li><strong>String Methods</strong></li></ol>'},{paraid:12,text:"<ul><ul><li>JavaScript provides a variety of built-in string methods to perform different operations on strings, such as converting cases, extracting substrings, finding positions, replacing characters, and more.<br/><br/>For example:</li></ul></ul>"},{paraid:13,text:"",codeConfig:{codeid:"js_3_2_4",exampleid:"js_3_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:14,text:'<ol start="5"><li><strong>String Template Literals</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>ES6 introduced template literals, enclosed by backticks (``), which allow for more flexible string interpolation and multiline strings.<br/><br/>For example:</li></ul></ul>"},{paraid:16,text:"",codeConfig:{codeid:"js_3_2_5",exampleid:"js_3_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:17,text:'<ol start="6"><li><strong>Unicode Characters</strong></li></ol>'},{paraid:18,text:"<ul><ul><li>JavaScript supports Unicode characters, including special characters and emojis. You can use Unicode escape sequences (`<code>\\uXXXX</code>`) or Unicode code point escapes (`<code>\\u{XXXXX}</code>`) to represent these characters.<br/><br/>For example:</li></ul></ul>"},{paraid:19,text:"",codeConfig:{codeid:"js_3_2_6",exampleid:"js_3_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:20,text:"These are just a few examples of the various string operations and concepts available in JavaScript. Strings are a fundamental part of any programming language, and JavaScript provides a rich set of built-in methods and features to work with strings effectively."}]},{secid:3,subtitle:"Arrays and Operations",paragraphs:[{paraid:1,text:"JavaScript arrays are data structures used to store and manipulate collections of elements. An array is an ordered list of values, where each value is assigned a unique index starting from `<code>0</code>`. Arrays can hold any data type, including numbers, strings, objects, or even other arrays."},{paraid:2,text:"<ol><li><strong>Creating Arrays</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Using the array literal syntax which is a pair of square brackets (`<code>[]</code>`).<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_3_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:"<ul><ul><li>Using the Array constructor.<br/><br/>For example:</li></ul></ul>"},{paraid:6,text:"",codeConfig:{codeid:"js_3_3_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:'<ol start="2"><li><strong>Array Operations</strong></li></ol>'},{paraid:8,text:"<ul><ul><li>Accessing Elements: You can access individual elements of an array using square bracket notation and the index of the element.<br/><br/>For example:</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_3_3_3",exampleid:"js_3_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:10,text:"<ul><ul><li>Modifying Elements: You can modify the value of an element by assigning a new value to a specific index.<br/><br/>For example:</li></ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_3_3_4",exampleid:"js_3_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:"<ul><ul><li>Array Length: The `<code>length</code>` property of an array returns the number of elements in the array. It can also be used to add or remove elements by modifying its value.<br/><br/>For example:</li></ul></ul>"},{paraid:13,text:"",codeConfig:{codeid:"js_3_3_5",exampleid:"js_3_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:14,text:"<ul><ul><li>Adding and Removing Elements: Arrays provide methods like `<code>push()</code>`, `<code>pop()</code>`, `<code>shift()</code>`, and `<code>unshift()</code>` to add or remove elements at the end or beginning of the array.<br/><br/>For example:</li></ul></ul>"},{paraid:15,text:"",codeConfig:{codeid:"js_3_3_6",exampleid:"js_3_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:16,text:"<ul><ul><li>Iterating Over Elements: You can use loops like `<code>for()</code>` or `<code>forEach()</code>` method to iterate over the elements of an array.<br/><br/>For example:</li></ul></ul>"},{paraid:17,text:"",codeConfig:{codeid:"js_3_3_7",exampleid:"js_3_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:18,text:"JavaScript arrays are versatile and commonly used for storing and manipulating collections of data. They are utilized for tasks such as storing lists of items, managing dynamic data, implementing data structures, and performing various data processing operations."}]},{secid:4,subtitle:"Objects and Operations",paragraphs:[{paraid:1,text:"JavaScript objects are key-value pairs used to store and organize data. They are an essential part of JavaScript and provide a way to represent real-world entities, such as a person, car, or any other object with properties and behaviors. Objects in JavaScript are dynamic, meaning you can add, modify, or remove properties and methods dynamically."},{paraid:2,text:"<ol><li><strong>Creating Objects</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Use the object literal syntax which is a set of curly braces (`<code>{}</code>`).<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_3_4_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:"<ul><ul><li>Use the Object constructor.<br/><br/>For example:</li></ul></ul>"},{paraid:6,text:"",codeConfig:{codeid:"js_3_4_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:'<ol start="2"><li><strong>Object Operations</strong></li></ol>'},{paraid:8,text:"<ul><ul><li>Accessing Object Properties: You can access the values of object properties using dot notation (`<code>objectName.propertyName</code>`) or bracket notation (`<code>objectName['propertyName']</code>`).<br/><br/>For example:</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_3_4_3",exampleid:"js_3_4_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:10,text:"<ul><ul><li>Modifying Object Properties: You can modify the value of an object property by assigning a new value to it.<br/><br/>For example:</li></ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_3_4_4",exampleid:"js_3_4_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:"<ul><ul><li>Adding Object Properties: You can add new properties to an object by assigning values to them.<br/><br/>For example:</li></ul></ul>"},{paraid:13,text:"",codeConfig:{codeid:"js_3_4_5",exampleid:"js_3_4_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:14,text:"<ul><ul><li>Removing Object Properties: You can remove properties from an object using the `<code>delete</code>` keyword.<br/><br/>For example:</li></ul></ul>"},{paraid:15,text:"",codeConfig:{codeid:"js_3_4_6",exampleid:"js_3_4_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:16,text:"<ul><ul><li>Object Methods: Objects can have associated functions called methods. Methods are defined as object properties with function values.<br/><br/>For example:</li></ul></ul>"},{paraid:17,text:"",codeConfig:{codeid:"js_3_4_7",exampleid:"js_3_4_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:18,text:"<ul><ul><li>Object Iteration: You can iterate over an object's properties using a `<code>for...in</code>` loop or the `<code>Object.keys()</code>` method.<br/><br/>For example:</li></ul></ul>"},{paraid:19,text:"",codeConfig:{codeid:"js_3_4_8",exampleid:"js_3_4_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:20,text:"<ul><ul><li>Object Constructors: Object constructors are functions used to create multiple objects with similar properties and methods. They serve as a blueprint for creating objects.<br/><br/>For example:</li></ul></ul>"},{paraid:21,text:"",codeConfig:{codeid:"js_3_4_9",exampleid:"js_3_4_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:22,text:"JavaScript objects provide a powerful way to organize and manipulate data, allowing you to represent complex structures and behaviors in your code. They are widely used for modeling real-world entities, implementing data structures, and building modular and reusable code."}]}]},{category:"js",chid:4,title:"Document Object Model (DOM)",sections:[{secid:1,subtitle:"Understanding the DOM",paragraphs:[{paraid:1,text:"The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree-like structure, where each node in the tree represents a part of the document. The DOM provides methods and properties to interact with and manipulate the document's content, structure, and styling. Understanding the DOM is essential for web development using JavaScript. Here are some key points about the DOM:"},{paraid:2,text:"<ol><li><strong>Tree Structure</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>The DOM represents an HTML or XML document as a hierarchical tree structure.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The top-level node in the tree is called the document node, which represents the entire document.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Other nodes represent elements, text, comments, attributes, and more.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Elements are represented as element nodes, and they can have child nodes, such as text nodes or other element nodes.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Document Object</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>The `<code>document</code>` object represents the entire HTML document.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>It provides properties and methods to access and manipulate various aspects of the document, such as elements, attributes, styles, and events.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Common properties and methods of the `<code>document</code>` object include `<code>getElementById()</code>`, `<code>querySelector()</code>`, `<code>createElement()</code>`, `<code>appendChild()</code>`, `<code>removeChild()</code>`, and many more.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Node Objects</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Each part of an HTML or XML document is represented by a node object in the DOM.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Common node types include element nodes, text nodes, comment nodes, and attribute nodes.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Node objects have properties and methods to access and manipulate their content, attributes, and relationships with other nodes.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Selecting Elements</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>You can select elements in the DOM using various methods, such as `<code>getElementById()</code>`, `<code>getElementsByClassName()</code>`, `<code>getElementsByTagName()</code>`, and `<code>querySelector()</code>`.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>These methods allow you to retrieve specific elements based on their IDs, classes, tags, or CSS selectors.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Manipulating Elements</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Once you have selected an element, you can manipulate it by accessing its properties and methods.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>You can modify an element's content, attributes, and styles, as well as add or remove elements and apply event handlers.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Event Handling</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>The DOM provides mechanisms for handling events, such as clicks, mouse movements, and keyboard interactions.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>You can register event handlers on elements to respond to specific events.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Event handling methods include `<code>addEventListener()</code>`, `<code>removeEventListener()</code>`, and properties like `<code>onclick</code>`, `<code>onload</code>`, and more.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Dynamic Updates</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>One of the key advantages of the DOM is its ability to dynamically update the web page without reloading.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>You can create, modify, or remove elements and their content based on user interactions or other events.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>This enables dynamic and interactive web applications.</li></ul></ul>"},{paraid:16,text:"Understanding the DOM allows you to manipulate web pages dynamically and create interactive user experiences. By accessing and modifying the structure and content of the DOM, you can update web pages in response to user actions, modify styles, handle events, and more. JavaScript is commonly used to interact with the DOM, making it an essential aspect of web development."}]},{secid:2,subtitle:"Accessing and Manipulating DOM Elements",paragraphs:[{paraid:1,text:"Accessing and manipulating DOM elements is a fundamental part of web development using JavaScript. The Document Object Model (DOM) provides various methods and properties to interact with elements in the HTML document. Here's an overview of how to access and manipulate DOM elements:"},{paraid:2,text:"<ol><li><strong>Accessing Elements</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>By ID: Use the `<code>getElementById()</code>` method to select an element based on its unique ID attribute.<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_4_2_1",exampleid:"js_4_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:"<ul><ul><li>By Class: Use the `<code>getElementsByClassName()</code>` method to select elements based on their class names. It returns a collection of elements.<br/><br/>For example:</li></ul></ul>"},{paraid:6,text:"",codeConfig:{codeid:"js_4_2_2",exampleid:"js_4_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:"<ul><ul><li>By Tag Name: Use the `<code>getElementsByTagName()</code>` method to select elements based on their tag names. It also returns a collection of elements.<br/><br/>For example:</li></ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_4_2_3",exampleid:"js_4_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:"<ul><ul><li>By CSS Selector: Use the `<code>querySelector()</code>` or `<code>querySelectorAll()</code>` method to select elements using CSS selectors. `<code>querySelector()</code>` returns the first matching element, while `<code>querySelectorAll()</code>` returns a collection of all matching elements.<br/><br/>For example:</li></ul></ul>"},{paraid:10,text:"",codeConfig:{codeid:"js_4_2_4",exampleid:"js_4_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:'<ol start="2"><li><strong>Manipulating Elements</strong></li></ol>'},{paraid:12,text:"<ul><ul><li>Changing Content: You can modify the content of an element using the `<code>innerHTML</code>` property or the `<code>textContent</code>` property.<br/><br/>For example:</li></ul></ul>"},{paraid:13,text:"",codeConfig:{codeid:"js_4_2_5",exampleid:"js_4_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:14,text:"<ul><ul><li>Modifying Attributes: Use the `<code>getAttribute()</code>` and `<code>setAttribute()</code>` methods to get and set attribute values of an element.<br/><br/>For example:</li></ul></ul>"},{paraid:15,text:"",codeConfig:{codeid:"js_4_2_6",exampleid:"js_4_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:16,text:"<ul><ul><li>Changing Styles: Use the `<code>style</code>` property to modify the CSS styles of an element.<br/><br/>For example:</li></ul></ul>"},{paraid:17,text:"",codeConfig:{codeid:"js_4_2_7",exampleid:"js_4_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:18,text:"<ul><ul><li>Adding and Removing Classes: Use the `<code>classList</code>` property to add or remove CSS classes from an element.<br/><br/>For example:</li></ul></ul>"},{paraid:19,text:"",codeConfig:{codeid:"js_4_2_8",exampleid:"js_4_2_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:20,text:"<ul><ul><li>Creating Elements: Use the `<code>createElement()</code>` method to create a new element, and `<code>createTextNode()</code>` to create a text node.<br/><br/>For example:</li></ul></ul>"},{paraid:21,text:"",codeConfig:{codeid:"js_4_2_9",exampleid:"js_4_2_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:22,text:"<ul><ul><li>Appending and Removing Elements: Use the `<code>appendChild()</code>` method to append an element as a child of another element. Use the `<code>removeChild()</code>` method to remove an element.<br/><br/>For example:</li></ul></ul>"},{paraid:23,text:"",codeConfig:{codeid:"js_4_2_10",exampleid:"js_4_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:24,text:"These are just some of the basic techniques for accessing and manipulating DOM elements. The DOM provides many more methods and properties that allow you to traverse the document, handle events, modify styles, and interact with elements in various ways. By leveraging the DOM API, you can create dynamic and interactive web applications."}]},{secid:3,subtitle:"Handling Events",paragraphs:[{paraid:1,text:"Handling events is a crucial aspect of web development that allows you to respond to user interactions or other occurrences on a web page. JavaScript provides various methods and techniques to handle events effectively. Here's an overview of how to handle events in JavaScript:"},{paraid:2,text:"<ol><li><strong>Event Listeners</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>An event listener is a function that is executed when a specific event occurs on an element.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>You can attach an event listener to an element using the `<code>addEventListener()</code>` method.<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_4_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:'<ol start="2"><li><strong>Event Handler Function</strong></li></ol>'},{paraid:6,text:"<ul><ul><li>An event handler function is the function that gets executed when an event occurs.</li></ul></ul>"},{paraid:6,text:"<ul><ul><li>It receives an `<code>event</code>` object as a parameter, which provides information about the event and its target element.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_4_3_2",exampleid:"js_4_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:8,text:'<ol start="3"><li><strong>Common Event Types</strong></li></ul>'},{paraid:9,text:"<ul><ul><li>Mouse Events: `<code>click</code>`, `<code>mouseover</code>`, `<code>mouseout</code>`, `<code>mousemove</code>`, `<code>mousedown</code>`, `<code>mouseup</code>`, etc.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Keyboard Events: `<code>keydown</code>`, `<code>keyup</code>`, `<code>keypress</code>`.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Form Events: `<code>submit</code>`, `<code>input</code>`, `<code>change</code>`, `<code>focus</code>`, `<code>blur</code>`.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Window Events: `<code>load</code>`, `<code>resize</code>`, `<code>scroll</code>`.</li></ul></ul>"},{paraid:9,text:'<ul><ul><li>And many more. Refer to the MDN documentation for a complete list of events: <a href="https://developer.mozilla.org/en-US/docs/Web/Events">https://developer.mozilla.org/en-US/docs/Web/Events</a></li></ul></ul>'},{paraid:10,text:'<ol start="4"><li><strong>Event Bubbling and Event Capturing</strong></li></ul>'},{paraid:11,text:"<ul><ul><li>Events in the DOM follow a bubbling or capturing phase, which determines the order in which event handlers are triggered.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>By default, events bubble up from the target element to its parent elements. You can use the `<code>event.stopPropagation()</code>` method to stop the event from further propagation.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Capturing phase allows you to handle the event on the parent elements before reaching the target element. You can enable capturing by passing a third argument `<code>true</code>` to the `<code>addEventListener()</code>` method.<br/><br/>For example:</li></ul></ul>"},{paraid:12,text:"",codeConfig:{codeid:"js_4_3_3",exampleid:"js_4_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:13,text:'<ol start="5"><li><strong>Event Delegation</strong></li></ul>'},{paraid:14,text:"<ul><ul><li>Event delegation is a technique where you attach a single event listener to a parent element to handle events for its child elements.</li></ul></ul>"},{paraid:14,text:"<ul><ul><li>This approach is useful when you have a large number of dynamically created elements or when elements are added/removed dynamically from the DOM.<br/><br/>For example:</li></ul></ul>"},{paraid:15,text:"",codeConfig:{codeid:"js_4_3_4",exampleid:"js_4_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:16,text:'<ol start="6"><li><strong>Removing Event Listeners</strong></li></ul>'},{paraid:17,text:"<ul><ul><li>To remove an event listener, you can use the `<code>removeEventListener()</code>` method.<br/><br/>For example:</li></ul></ul>"},{paraid:18,text:"",codeConfig:{codeid:"js_4_3_5",exampleid:"js_4_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:19,text:'<ol start="7"><li><strong>Inline Event Handlers</strong></li></ul>'},{paraid:20,text:"<ul><ul><li>Alternatively, you can use inline event handlers directly in HTML tags, but this approach is generally considered less maintainable and less flexible.<br/><br/>For example:</li></ul></ul>"},{paraid:21,text:"",codeConfig:{codeid:"js_4_3_6",exampleid:"js_4_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"HTML",exampleTitle:"Example",codeLangs:"xml",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:22,text:"Event handling allows you to respond to user interactions, validate user input, trigger actions based on specific events, and create interactive web applications. By attaching event listeners to elements and writing appropriate event handler functions, you can control the behavior and functionality of your web page."}]},{secid:4,subtitle:"Dynamic HTML with JavaScript",paragraphs:[{paraid:1,text:"Dynamic HTML refers to the ability to create, modify, and update the content and structure of a web page dynamically using JavaScript. It allows you to change elements, update styles, manipulate data, and respond to user interactions in real-time. Here are some key techniques for working with dynamic HTML using JavaScript:"},{paraid:2,text:"<ol><li><strong>Maniplating Elements</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Use the `<code>createElement()</code>` method to create new HTML elements programmatically.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>To modify the content of an element, you can use the `<code>innerHTML</code>` property or the `<code>textContent</code>` property.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Use the `<code>getAttribute()</code>` and `<code>setAttribute()</code>` methods to get and set attribute values of an element.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>To add a newly created element as a child of another element, use the `<code>appendChild()</code>` method.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Use the `<code>removeChild()</code>` method to remove an element from its parent.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Use the `<code>style</code>` property to modify the CSS styles of an element.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Attach event listeners to elements using the `<code>addEventListener()</code>` method to respond to user interactions.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Dynamic Data</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>JavaScript allows you to fetch data from external sources, such as APIs, and update the content of your web page dynamically.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>You can use AJAX or fetch API to make asynchronous HTTP requests and retrieve data.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Once the data is retrieved, you can modify the DOM to display the data in the desired format.</li></ul></ul>"},{paraid:6,text:"<ul><ul>Here is an example:</ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_4_4_1",exampleid:"js_4_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:8,text:'<ol start="3"><li><strong>Template Engines</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Template engines like Handlebars, Mustache, or Underscore.js can be used to generate dynamic HTML by combining data and templates.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>These engines provide syntax and functionality to create reusable templates with placeholders that get replaced with actual data at runtime.</li></ul></ul>"},{paraid:10,text:"By utilizing these techniques, you can create dynamic and interactive web applications that can update content, respond to user actions, fetch and display data dynamically, and provide a more engaging user experience. JavaScript's ability to manipulate the HTML DOM empowers you to build dynamic web pages that adapt and respond to changing requirements and user interactions."}]}]},{category:"js",chid:5,title:"Asynchronous JavaScript",sections:[{secid:1,subtitle:"Introduction to Asynchronous Programming",paragraphs:[{paraid:1,text:"Asynchronous programming is a programming paradigm that allows tasks to run independently and concurrently without blocking the execution of the main program. It enables the efficient execution of time-consuming operations such as fetching data from a server, reading and writing files, or waiting for user input. Instead of waiting for these operations to complete before moving on, asynchronous programming allows the program to continue executing other tasks while waiting for the asynchronous operations to finish. Here's an introduction to asynchronous programming:"},{paraid:2,text:"<ol><li><strong>Synchronous vs. Asynchronous Execution</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>In synchronous programming, tasks are executed one after the other, and each task must complete before the next one starts. This can lead to blocking, where the program waits for a task to finish, causing a delay in the overall execution.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>In asynchronous programming, tasks can be initiated and continue running independently while other tasks are in progress. Asynchronous tasks run in the background, and the program can move on to execute other tasks without waiting for the completion of the asynchronous operations.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Callbacks</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Callbacks are a common pattern used in asynchronous programming.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>A callback is a function that is passed as an argument to another function and gets invoked once an asynchronous operation completes.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Callbacks allow you to specify the code that should run after the completion of an asynchronous task.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Promises</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Promises are a more modern approach to asynchronous programming and provide a cleaner and more structured way to handle asynchronous operations.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>A promise represents the eventual completion or failure of an asynchronous operation and provides a mechanism to handle the result or error once available.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Promises have methods like `<code>.then()</code>` and `<code>.catch()</code>` that allow you to chain operations and handle the success or failure of a promise.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Async/Await</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Async/await is a syntax introduced in newer versions of JavaScript (ES2017) that simplifies working with promises.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>The `<code>async</code>` keyword is used to define an asynchronous function, and the `<code>await</code>` keyword is used to pause the execution of the function until a promise is resolved.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Async/await allows you to write asynchronous code in a more synchronous and readable manner, making it easier to handle asynchronous operations and their results.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Event-driven Programming</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Asynchronous programming often revolves around event-driven programming.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Events are triggered when certain actions occur, such as user input, network responses, or timers.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Asynchronous operations are usually initiated and respond to events, and the program executes code in response to these events.</li></ul></ul>"},{paraid:12,text:"Asynchronous programming is essential for building responsive and efficient applications, particularly in scenarios where operations involve network requests, file I/O, or other time-consuming tasks. By utilizing callbacks, promises, or async/await syntax, you can handle asynchronous operations in a structured and manageable way, ensuring that your program remains responsive and performs well."}]},{secid:2,subtitle:"Callback Functions",paragraphs:[{paraid:1,text:"Callback functions are a fundamental concept in JavaScript that allows you to pass a function as an argument to another function. The primary purpose of using callback functions is to execute code asynchronously or to handle the result of an asynchronous operation. Here's an overview of callback functions:"},{paraid:2,text:"<ol><li><strong>Definition</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>A callback function is a function that is passed as an argument to another function and gets invoked at a later point in time, typically after the completion of a certain task.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The function receiving the callback is responsible for calling it, usually passing some data or result to the callback.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Callback Syntax</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Callback functions can be declared using regular function syntax or as anonymous functions.<br/><br/>Here is an example:</li></ul></ul>"},{paraid:6,text:"",codeConfig:{codeid:"js_5_2_1",exampleid:"js_5_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:'<ol start="3"><li><strong>Asynchronous Operations</strong></li></ol>'},{paraid:8,text:"<ul><ul><li>Callback functions are commonly used in asynchronous programming to handle the completion of time-consuming tasks, such as making API requests, reading files, or database operations.</li></ul></ul>"},{paraid:8,text:"<ul><ul><li>Instead of blocking the program's execution while waiting for these tasks to finish, the program continues executing other tasks, and the callback function is invoked once the asynchronous operation completes.<br/><br/>Here is an example:</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_5_2_2",exampleid:"js_5_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:10,text:'<ol start="4"><li><strong>Customizing Callbacks</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Callback functions can be customized to accept additional arguments based on the specific requirements of the operation or task being performed.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>The function that invokes the callback can pass any necessary data as arguments when invoking the callback.</li></ul></ul>"},{paraid:12,text:"Callback functions are a powerful mechanism in JavaScript that allows you to control the flow of execution in asynchronous scenarios. By passing callback functions to other functions, you can define custom behavior that executes at a specific point in time, such as after the completion of an asynchronous task. However, as the complexity of asynchronous code grows, alternative approaches like promises or async/await may be more suitable for handling asynchronous operations in a more maintainable and readable manner."}]},{secid:3,subtitle:"Promises",paragraphs:[{paraid:1,text:"Promises are an essential part of JavaScript and provide a more structured and cleaner way to handle asynchronous operations compared to using callback functions. A promise represents the eventual completion or failure of an asynchronous operation and allows you to handle the result or error once it's available. Here's an overview of promises:"},{paraid:2,text:"<ol><li><strong>Promise States</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>A promise can be in one of three states: pending, fulfilled, or rejected.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>When a promise is pending, it means that the asynchronous operation is still ongoing and the result is not available yet.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>A fulfilled promise means that the operation completed successfully, and the promise holds the resulting value.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>A rejected promise means that an error occurred during the operation, and the promise holds the reason for the error.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Creating Promises</strong></li></ol>'},{paraid:5,text:'<ul><ul><li>Promises can be created using the `<code>Promise</code>` constructor. The constructor takes a function as an argument, commonly referred to as the "executor function".</li></ul></ul>'},{paraid:5,text:"<ul><ul><li>The executor function takes two parameters: `<code>resolve</code>` and `<code>reject</code>`. `<code>resolve</code>` is used to fulfill the promise, and `<code>reject</code>` is used to reject the promise.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Inside the executor function, you perform the asynchronous operation, and once it's complete, you call `<code>resolve</code>` with the result or `<code>reject</code>` with an error.</li></ul></ul>"},{paraid:6,text:"<ul><ul>Here's an example of creating a promise:</ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_5_3_1",exampleid:"js_5_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:8,text:'<ol start="3"><li><strong>Promise Chaining</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Promises can be chained together using the `<code>then()</code>` method, which allows you to specify what should happen after the promise is fulfilled.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>The `<code>then()</code>` method takes a callback function as an argument, which will be executed with the resolved value of the promise.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Promise chaining allows you to perform sequential operations or transformations on the result of the previous promise.</li></ul></ul>"},{paraid:10,text:"<ul><ul>Here's an example of promise chaining:</ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_5_3_2",exampleid:"js_5_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:'<ol start="4"><li><strong>Handling Promise Rejections</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Promise rejections can be handled using the `<code>catch()</code>` method, which takes a callback function that will be executed when the promise is rejected.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>The `<code>catch()</code>` method allows you to handle any errors that occur during the asynchronous operation or in any of the preceding `<code>then()</code>` callbacks.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>It's generally recommended to have a `<code>catch()</code>` at the end of the promise chain to handle any unhandled rejections. Refer to two examples above.</li></ul></ul>"},{paraid:14,text:"Promises provide a more organized and readable way to handle asynchronous operations and their results. They allow you to chain operations, handle errors, and ensure the flow of execution is maintained. Promises have become a standard part of JavaScript, and many modern APIs and libraries use promises for handling asynchronous tasks."}]},{secid:4,subtitle:"Async/Await",paragraphs:[{paraid:1,text:"Async/await is a syntax introduced in newer versions of JavaScript (ES2017) that provides a more concise and synchronous-like way to write asynchronous code. It is built on top of promises and offers a simpler and more readable approach to handle asynchronous operations. Here's an overview of async/await:"},{paraid:2,text:"<ol><li><strong>Async Function</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>An async function is a special type of function that allows you to use the `<code>await</code>` keyword inside it.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The `<code>async</code>` keyword is used to define a function as asynchronous. It can be used in function declarations or function expressions.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>An async function always returns a promise, and the value returned by the function is wrapped in a resolved promise or any error thrown is wrapped in a rejected promise.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Await Keyword</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>The `<code>await</code>` keyword can only be used inside an async function.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>It pauses the execution of the async function until the promise is resolved or rejected.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>When `<code>await</code>` is used on a promise, it waits for the promise to settle and returns the resolved value.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Writing Async Functions</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Async functions can contain multiple await expressions, allowing you to `<code>wait</code>` for promises to resolve in a sequential manner.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>The execution of the async function is paused at each `<code>await</code>` expression, allowing other code to run in the meantime.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Here's an example of an async function using `<code>await</code>`:</li></ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_5_4_1",exampleid:"js_5_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:'<ol start="4"><li><strong>Error Handling</strong></li></ol>'},{paraid:10,text:"<ul><ul><li>If an error occurs during the execution of the `<code>await</code>` expression, the error can be caught by `<code>catch</code>` method.</li></ul></ul>"},{paraid:10,text:"<ul><ul><li>You can handle the error gracefully, log it, or take appropriate actions.</li></ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_5_4_2",exampleid:"js_5_4_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:"",codeid:"create sample code"},{paraid:13,text:"Async/await offers a more intuitive and synchronous-like way to write asynchronous code, making it easier to read, write, and reason about. It simplifies error handling and allows for sequential execution of asynchronous operations. However, it's important to note that async/await can only be used within async functions and requires promises to be present for it to work. It has become a widely adopted pattern in modern JavaScript development and is commonly used in conjunction with promises or libraries and frameworks that use promises as their underlying mechanism for handling asynchronous tasks."}]},{secid:5,subtitle:"Event-Driven Programming",paragraphs:[{paraid:1,text:"JavaScript is a language well-suited for event-driven programming. Event-driven programming is a paradigm where the flow of a program is primarily determined by events, such as user actions, system events, or messages from other parts of the program. Instead of following a linear sequence of execution, event-driven programs react to these events by executing specific event handlers or callbacks."},{paraid:2,text:"In the context of web development, event-driven programming is especially prominent due to the nature of the browser environment, where user interactions (clicks, keypresses, etc.) trigger events that developers can listen to and respond to accordingly."},{paraid:3,text:"Here's an overview of how event-driven programming works in JavaScript:"},{paraid:4,text:"<ol><li><strong>Event Listeners</strong></li></ol>"},{paraid:5,text:'<ul><ul><li>In event-driven programming, you attach event listeners to specific elements or objects that are likely to generate events. These event listeners "listen" for events to occur. When the event is triggered, the associated callback function, also known as an event handler, is executed.</li></ul></ul>'},{paraid:6,text:'<ol start="2"><li><strong>Event Handling</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>The event handler is a function that contains the logic to be executed when the event occurs. It could be anything from updating the user interface, processing data, making an AJAX request, or changing the application's state.</li></ul></ul>"},{paraid:8,text:'<ol start="3"><li><strong>Asynchronous Execution</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Event-driven programming is inherently asynchronous. When you register an event listener, the program continues executing without waiting for the event to occur. Once the event happens, the event handler is invoked asynchronously, allowing the rest of the program to continue its normal flow.</li></ul></ul>"},{paraid:10,text:"<ul><ul>Here's an example of event-driven programming in JavaScript:</ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_5_5_1",exampleid:"js_5_5_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:"JavaScript's event-driven nature allows for interactive and responsive web applications. It is widely used in various contexts, including web development, desktop applications, and server-side programming with Node.js. Event-driven architecture plays a crucial role in enabling non-blocking behavior and efficient resource utilization, making it a fundamental concept in modern programming paradigms."}]}]},{category:"js",chid:6,title:"Browser APIs",sections:[{secid:1,subtitle:"Working with Browser APIs",paragraphs:[{paraid:1,text:"Working with browser APIs allows you to access various features and functionalities provided by the web browser. Here are some commonly used browser APIs and how to work with them:"},{paraid:2,text:"<ol><li><strong>Geolocation API</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>The Geolocation API allows you to retrieve the user's current geographical location.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>To use this API, you can call the `<code>navigator.geolocation.getCurrentPosition()</code>` method, which takes a success callback and an error callback as arguments.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The success callback is invoked with a `<code>Position</code>` object containing the user's coordinates.<br/><br/>Here's an example of using the Geolocation API:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_6_1_1",exampleid:"js_6_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:'<ol start="2"><li><strong>Browser Storage API</strong></li></ol>'},{paraid:6,text:"<ul><ul><li>The Browser Storage API provides a way to store key-value pairs locally in the browser.</li></ul></ul>"},{paraid:6,text:"<ul><ul><li>There are two types of browser storage available: `<code>localStorage</code>` and `<code>sessionStorage</code>`.</li></ul></ul>"},{paraid:6,text:"<ul><ul><li>`<code>localStorage</code>` allows you to store data persistently across browser sessions, while `<code>sessionStorage</code>` stores data for the duration of the session.</li></ul></ul>"},{paraid:6,text:"<ul><ul><li>You can use the `<code>setItem()</code>`, `<code>getItem()</code>`, and `<code>removeItem()</code>` methods to interact with browser storage.<br/><br/>Here's an example of using `<code>localStorage</code>`:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_1_2",exampleid:"js_6_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:'<ol start="3"><li><strong>Browser Clipboard API</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>The Browser Clipboard API allows web applications to interact with the user's clipboard, enabling copying, cutting, and pasting content programmatically. This API provides methods and events to read data from the clipboard as well as to write data to it.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Please note that clipboard access may have certain security and privacy implications, and browsers may have specific permissions or restrictions to ensure a safe user experience. Therefore, clipboard-related operations are generally only allowed in response to user interactions, such as clicks or keypresses.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Copying Text to Clipboard: To copy text to the clipboard, you can use the `<code>navigator.clipboard.writeText()</code>` method. This method returns a Promise that resolves when the text is successfully copied to the clipboard.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:"<ul><ul><li>Reading Text from Clipboard: To read text from the clipboard, you can use the `<code>navigator.clipboard.readText()</code>` method. This method returns a Promise that resolves with the text read from the clipboard. After copying, you can also use `<code>CTR+C</code>` in Windows or use `<code>CMD+C</code>` to pasts clipboard content to other applications.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_1_4",exampleid:"js_6_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:"Here are just a few examples of browser APIs, but there are many more available, such as the Fetch API for making HTTP requests, the Canvas API for drawing graphics, the Audio and Video APIs for working with multimedia, and many others. Each API has its own set of methods and properties, so it's important to refer to the specific documentation for each API to understand how to use them effectively in your applications."}]},{secid:2,subtitle:"Making HTTP Requests with AJAX",paragraphs:[{paraid:1,text:"AJAX (Asynchronous JavaScript and XML) is a technique used in web development to send and receive data from a server asynchronously without reloading the entire web page. It allows for dynamic and interactive web applications by enabling the retrieval and updating of data in the background. Here's an introduction to AJAX:"},{paraid:2,text:"<ol><li><strong>Asynchronous Requests</strong></li></pl>"},{paraid:3,text:"<ul><ul><li>AJAX enables making asynchronous requests to a server, which means that the browser can send a request to the server and continue working with other parts of the web page without waiting for a response.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>This allows for a smoother user experience as the web page remains responsive while data is being fetched or updated.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Creating and Using XMLHttpRequest Objects</strong></li></ol>'},{paraid:4,text:"<ul><ul><li><strong>Creating an instance</strong>: To create a new `<code>XMLHttpRequest</code>` object, you can use the `<code>new XMLHttpRequest()</code>` constructor.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>Configuring the request</strong>: After creating the object, you configure the request by specifying the HTTP method, URL, and other optional parameters.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>Setting Headers (Optional)</strong>: If your request requires custom headers, you can set them using the `<code>setRequestHeader</code>` method.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>Handling the Response</strong>: You need to set up a function to handle the response when the server responds. This function is assigned to the `<code>onreadystatechange</code>` event, and it will be called whenever the `<code>readyState</code>` of the request changes.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>Sending the Request</strong>: After setting up the request and response handling, you send the request to the server.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_5",exampleid:"js_6_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:'<ol start="3"><li><strong>Handling Errors</strong></li></ol>'},{paraid:4,text:"<ul><ul><li><strong>Creation and Initialization</strong>: When creating a new `<code>XMLHttpRequest</code>` object, it's essential to handle any potential errors during initialization. The initialization can fail due to security restrictions or if the browser does not support the `<code>XMLHttpRequest</code>` object. To handle this, you can use a `<code>try-catch</code>` block when creating the `<code>XMLHttpRequest</code>` instance.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>Network Errors</strong>: During the request's execution, various network-related errors can occur, such as the server being unreachable, a timeout, or a failed connection. You can listen for the `<code>onerror</code>` event to catch these types of errors.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>HTTP Errors</strong>: After the request is sent and the server responds, there might be HTTP errors like 404 Not Found or 500 Internal Server Error. These errors are considered successful requests but unsuccessful responses. You can handle these errors by checking the status code of the response.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:"<ul><ul><li><strong>Timeout Handling</strong>: To avoid infinite waiting for a response, you can set a timeout for the request. If the timeout is exceeded, you can handle it as an error.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_6_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:10,text:"<ul><ul>Here is a complete example of error handling:</ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"",exampleid:"js_6_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:'<ol start="4"><li><strong>Updating Web Page Content</strong></li></pl>'},{paraid:8,text:"<ul><ul><li>AJAX enables you to update specific parts of a web page without reloading the entire page.</li></ul></ul>"},{paraid:8,text:"<ul><ul><li>You can use JavaScript to manipulate the DOM and update the content based on the received data.</li></ul></ul>"},{paraid:8,text:"<ul><ul><li>This allows for dynamic and interactive user interfaces, such as updating a list of items, live search suggestions, or real-time chat messages.</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_6_2_11",exampleid:"js_6_2_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"xml",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:10,text:"AJAX has revolutionized web development by providing a way to create more interactive and responsive web applications. It allows for data retrieval and updates in the background, reducing the need for full page reloads. The XMLHttpRequest object and Fetch API are commonly used to implement AJAX functionality in JavaScript applications."}]},{secid:3,subtitle:"Making HTTP Requests with the Fetch API",paragraphs:[{paraid:1,text:"The Fetch API is a modern JavaScript API that provides a built-in mechanism for making HTTP requests in the browser. It offers a more flexible and powerful alternative to traditional methods like XMLHttpRequest. Here's an overview of how to make HTTP requests using the Fetch API:"},{paraid:2,text:"<ol><li><strong>Basic Fetch Request</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>To make a simple GET request, you can use the `<code>fetch()</code>` function and pass the URL as an argument.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>The `<code>fetch()</code>` function returns a promise that resolves to the `<code>Response</code>` object representing the server's response.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>You can then use the `<code>Response</code>` object to process the response data.</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_6_3_1",exampleid:"js_6_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:4,text:'<ol start="2"><li><strong>Fetch Request Options</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>The `<code>fetch()</code>` function accepts a second parameter for additional request options, such as the HTTP method, headers, and request body.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>You can pass an object with these options to customize the request.</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_6_3_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:7,text:'<ol start="3"><li><strong>Handling the Response</strong></li></ol>'},{paraid:8,text:"<ul><ul><li>The `<code>Response</code>` object provides several methods to access and process the response data.</li></ul></ul>"},{paraid:8,text:"<ul><ul><li>You can use methods like `<code>json()</code>` to parse the response as JSON, `<code>text()</code>` to get the response as plain text, and `<code>blob()</code>` to retrieve the response as a Blob object.</li></ul></ul>"},{paraid:10,text:'<ol start="4"><li><strong>Handling Errors</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>If the server responds with an error status code (e.g., 404, 500), the `<code>fetch()</code>` promise will still resolve successfully.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>You can check the `<code>ok</code>` property of the `<code>Response</code>` object to determine if the request was successful.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>If the request was not successful, you can throw an error or handle it as needed.</li></ul></ul>"},{paraid:9,text:"",codeConfig:{codeid:"js_6_3_3",exampleid:"js_6_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:13,text:"The Fetch API provides a powerful and flexible way to make HTTP requests in JavaScript. It supports a variety of request options, handles responses in different formats, and allows for error handling. It is widely supported in modern browsers and is a recommended approach for performing HTTP requests in client-side JavaScript applications."}]}]},{category:"js",chid:7,title:"Advanced JavaScript Concepts",sections:[{secid:1,subtitle:"Prototypes and Inheritance",paragraphs:[{paraid:1,text:"Prototypes and inheritance are fundamental concepts in JavaScript that play a crucial role in object-oriented programming. They provide a mechanism for creating and sharing behavior among objects. Let's explore prototypes and inheritance in JavaScript:"},{paraid:2,text:"<ol><li><strong>Prototypes</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>In JavaScript, each object has a prototype. A prototype is an object from which the object inherits properties and methods.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Every object in JavaScript is linked to a prototype object, which acts as a fallback for property and method lookup.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Prototypes create a chain of objects, often referred to as the prototype chain.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Prototype Object</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>The prototype object is a regular JavaScript object that is used as a blueprint for creating new objects.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Objects are created by either using the new keyword with a constructor function or using object literals `<code>{}</code>`. The newly created object inherits properties and methods from its prototype.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Prototype Chain and Inheritance</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>The prototype chain is a mechanism by which objects inherit properties and methods from their prototypes.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>When a property or method is accessed on an object, JavaScript first checks if the object has that property or method. If not, it looks up the prototype chain until it finds the property or reaches the end of the chain (usually the Object prototype).</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>This allows for property and method sharing among objects, reducing redundancy and enabling code reuse.<br/><br/>For example:</li></ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_7_1_1",exampleid:"js_7_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:'<ol start="4"><li><strong>Constructor Functions</strong></li></ol>'},{paraid:10,text:"<ul><ul><li>Constructor functions are regular functions that are used to create objects.</li></ul></ul>"},{paraid:10,text:"<ul><ul><li>When a constructor function is invoked with the `<code>new</code>` keyword, a new object is created, and its `<code>prototype</code>` is set to the function's `<code>prototype</code>` property.</li></ul></ul>"},{paraid:10,text:"<ul><ul><li>Properties and methods defined on the constructor function's `<code>prototype</code>` property are inherited by the objects created with that constructor.<br/><br/>For example:</li></ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_7_1_2",exampleid:"js_7_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:'<ol start="5"><li><strong>Prototypal Inheritance vs. Classical Inheritance</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>JavaScript uses prototypal inheritance, which is different from classical inheritance found in languages like Java or C++.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>In prototypal inheritance, objects directly inherit from other objects, whereas in classical inheritance, classes define the structure and behavior of objects.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>JavaScript's prototypal inheritance is more flexible and dynamic, allowing objects to inherit properties and methods at runtime.</li></ul></ul>"},{paraid:14,text:'<ol start="6"><li><strong>ES6 Classes</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>ES6 introduced the `<code>class</code>` syntax, which provides syntactic sugar for working with prototypes and constructor functions.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Classes in JavaScript are primarily a syntax simplification and still rely on prototypes under the hood.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>The `<code>class</code>` syntax makes it easier to define constructor functions, prototype methods, and inheritance relationships.<br/><br/>For example:</li></ul></ul>"},{paraid:16,text:"",codeConfig:{codeid:"js_7_1_3",exampleid:"js_7_1_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:17,text:"Understanding prototypes and inheritance is essential for effective object-oriented programming in JavaScript. It enables code reuse, modularity, and allows for dynamic modification of object behavior. JavaScript's prototype-based inheritance provides a flexible and powerful approach to working with objects and their relationships."}]},{secid:2,subtitle:"Functional Programming Concepts",paragraphs:[{paraid:1,text:"Functional programming is a programming paradigm that focuses on building software by composing pure functions and avoiding shared state and mutable data. It emphasizes immutability, higher-order functions, and declarative programming. Here are some key concepts of functional programming:"},{paraid:2,text:"<ol><li><strong>Pure Functions</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Pure functions are functions that produce the same output for the same input and have no side effects.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>They do not modify external state or variables, ensuring referential transparency.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Pure functions are deterministic, easier to reason about, and facilitate testing and parallel execution.<br/><br/>For example:</li></ul></ul>"},{paraid:4,text:"",codeConfig:{codeid:"js_7_2_1",exampleid:"js_7_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:5,text:'<ol start="2"><li><strong>Immutability</strong></li></ol>'},{paraid:6,text:"<ul><ul><li>In functional programming, data is immutable, meaning it cannot be changed after creation.</li></ul></ul>"},{paraid:6,text:"<ul><ul><li>Instead of modifying existing data, functional programs create new data structures with updated values.</li></ul></ul>"},{paraid:6,text:"<ul><ul><li>Immutable data simplifies code reasoning, eliminates bugs caused by unintended mutations, and facilitates concurrency.<br/><br/>For example:</li></ul></ul>"},{paraid:7,text:"",codeConfig:{codeid:"js_7_2_2",exampleid:"js_7_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:8,text:'<ol start="3"><li><strong>Higher-Order Functions</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Higher-order functions are functions that can take other functions as arguments or return functions as results.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>They enable code abstraction and composition, allowing for the creation of more reusable and modular code.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Examples of higher-order functions include `<code>map</code>`, `<code>filter</code>`, and `<code>reduce</code>` in JavaScript.<br/><br/>For example:</li></ul></ul>"},{paraid:10,text:"",codeConfig:{codeid:"js_7_2_3",exampleid:"js_7_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:11,text:'<ol start="4"><li><strong>Function Composition</strong></li></ol>'},{paraid:12,text:"<ul><ul><li>Function composition is the process of combining functions to create new functions.</li></ul></ul>"},{paraid:12,text:"<ul><ul><li>It allows you to build complex operations by chaining together smaller functions.</li></ul></ul>"},{paraid:12,text:"<ul><ul><li>Function composition improves code readability, reusability, and testability.<br/><br/>For example:</li></ul></ul>"},{paraid:13,text:"",codeConfig:{codeid:"js_7_2_4",exampleid:"js_7_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:14,text:'<ol start="5"><li><strong>Recursion</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>Recursion is a technique where a function calls itself to solve a problem by breaking it down into smaller subproblems.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>It is a fundamental concept in functional programming and enables elegant and concise solutions to certain types of problems.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Recursive functions often replace looping constructs like `<code>for</code>` or `<code>while</code>` in functional programming.</li></ul></ul>"},{paraid:16,text:"",codeConfig:{codeid:"js_7_2_5",exampleid:"js_7_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:17,text:'<ol start="6"><li><strong>Declarative Programming</strong></li></ol>'},{paraid:18,text:"<ul><ul><li>Declarative programming focuses on describing what should be done rather than how to do it.</li></ul></ul>"},{paraid:18,text:"<ul><ul><li>Functional programming encourages declarative style, where programs are written as a series of function invocations and data transformations.</li></ul></ul>"},{paraid:18,text:"<ul><ul><li>Declarative code is more expressive, easier to understand, and promotes code reuse.</li></ul></ul>"},{paraid:19,text:"",codeConfig:{codeid:"js_7_2_6",exampleid:"js_7_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:20,text:'<ol start="7"><li><strong>Lazy Evaluation</strong></li></ol>'},{paraid:21,text:"<ul><ul><li>Lazy evaluation is an evaluation strategy where expressions are not evaluated until their results are actually needed.</li></ul></ul>"},{paraid:21,text:"<ul><ul><li>It allows for better performance by avoiding unnecessary computations.</li></ul></ul>"},{paraid:21,text:"<ul><ul><li>Lazy evaluation is commonly used in functional programming for operations like infinite lists or stream processing.</li></ul></ul>"},{paraid:22,text:"",codeConfig:{codeid:"js_7_2_7",exampleid:"js_7_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:23,text:'<ol start="8"><li><strong>Pattern Matching</strong></li></ol>'},{paraid:24,text:"<ul><ul><li>Pattern matching is a technique that allows matching the structure of data against predefined patterns.</li></ul></ul>"},{paraid:24,text:"<ul><ul><li>It enables concise and readable code for handling different cases or conditions.</li></ul></ul>"},{paraid:25,text:"",codeConfig:{codeid:"js_7_2_8",exampleid:"js_7_2_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:26,text:'<ol start="9"><li><strong>Avoiding Shared State and Side Effects</strong></li></ol>'},{paraid:27,text:"<ul><ul><li>Functional programming emphasizes minimizing shared mutable state and side effects.</li></ul></ul>"},{paraid:27,text:"<ul><ul><li>Shared mutable state can lead to bugs and make programs harder to reason about.</li></ul></ul>"},{paraid:27,text:"<ul><ul><li>By avoiding side effects, functional programs become more predictable and easier to test and debug.</li></ul></ul>"},{paraid:28,text:"Functional programming promotes writing concise, modular, and maintainable code by leveraging pure functions, immutability, and higher-order functions. While JavaScript is not a purely functional language, it incorporates many functional programming concepts and provides support for functional programming techniques. Understanding and applying functional programming principles can lead to cleaner and more robust code in JavaScript and other languages."}]},{secid:3,subtitle:"Modules",paragraphs:[{paraid:1,text:"Modules are essential concepts in modern JavaScript development that help organize and modularize code. They provide a way to split code into reusable and encapsulated units and manage dependencies between different modules. Let's explore modules and module loaders:"},{paraid:2,text:"<ol><li><strong>Modules</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Modules are self-contained units of code that encapsulate related functionality.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>They allow developers to break down large codebases into smaller, manageable parts, promoting code reuse and maintainability.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Modules typically have a clear interface, exposing only the necessary functions, classes, or variables while keeping implementation details hidden.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Module Formats</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>There are different module formats used in JavaScript, such as CommonJS, AMD (Asynchronous Module Definition), and ES Modules (ESM).</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>CommonJS and AMD formats were prevalent in older JavaScript environments (e.g., Node.js or RequireJS).</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>ES Modules, introduced in ES6, are now the standard module format in modern JavaScript environments, both in the browser and Node.js.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>ES Modules</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>ES Modules are the official module system in JavaScript, supported by most modern browsers and Node.js.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>They use the `<code>import</code>` and `<code>export</code>` keywords to declare dependencies and export functionality between modules.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>ES Modules support both named exports and default exports, allowing fine-grained control over exported members.<br/><br/>For example:</li></ul></ul>"},{paraid:8,text:"",codeConfig:{codeid:"js_7_3_1",exampleid:"js_7_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:9,text:'<ol start="4"><li><strong>Asynchronous Module Loading</strong></li></ol>'},{paraid:10,text:"<ul><ul><li>Module loaders can handle asynchronous loading of modules, allowing modules to be loaded on-demand when needed.</li></ul></ul>"},{paraid:10,text:"<ul><ul><li>Asynchronous module loading is beneficial for larger applications with complex dependency trees, improving initial page load times.<br/><br/>For example:</li></ul></ul>"},{paraid:11,text:"",codeConfig:{codeid:"js_7_3_2",exampleid:"js_7_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:12,text:"Effective use of modules and module loaders can enhance code organization, reusability, and maintainability in JavaScript projects. They enable developers to break down complex applications into manageable units, handle dependencies, and improve overall performance. ES Modules and modern bundlers like Webpack have significantly simplified the process of working with modules in JavaScript, making it easier to leverage the benefits of modular code."}]}]},{category:"js",chid:8,title:"Debugging and Error Handling",sections:[{secid:1,subtitle:"Debugging Techniques and Tools",paragraphs:[{paraid:1,text:"Debugging is an essential skill in software development, including JavaScript. It involves identifying and resolving issues or bugs in your code. Here are some common debugging techniques and tools that can help you in the process:"},{paraid:2,text:"<ol><li><strong>Console Logging</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Console logging is a basic but effective debugging technique.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Use `<code>console.log()</code>` to output values or messages to the browser's console.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>You can log variables, function outputs, or any other relevant information to track the flow of your code and identify potential issues.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Debugging with breakpoints</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Most modern web browsers come with built-in developer tools that include debugging capabilities.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>You can set breakpoints directly in your code, which pauses the execution when reached, allowing you to inspect variables, step through code, and analyze the program state.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>By using breakpoints, you can narrow down the problematic sections of your code and understand how it executes.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Step-by-step Execution</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Debugging tools provide options to step through your code line by line.</li></ul></ul>"},{paraid:7,text:'<ul><ul><li>You can use features like "step over" to move to the next line of code, "step into" to enter a function call and debug its execution, and "step out" to complete the current function and return to its caller.</li></ul></ul>'},{paraid:7,text:"<ul><ul><li>Stepping through the code can help you understand the flow and identify any unexpected behavior or errors.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Inspecting Variables and Objects</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Debugging tools allow you to inspect the values of variables and objects at any given point during program execution.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>You can add variables to the watch list to track their values as you step through the code.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Inspecting variables can help you identify incorrect values, unexpected changes, or null/undefined values that might be causing issues.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Error Messages and Stack Traces</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>When an error occurs, JavaScript throws an error object with a descriptive message and a stack trace.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Pay attention to error messages as they often provide valuable information about the cause of the problem.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>The stack trace shows the sequence of function calls that led to the error, allowing you to trace back the issue to its origin.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Debugging Tools</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Modern web browsers, such as Chrome, Firefox, and Safari, provide developer tools that include comprehensive debugging capabilities.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>These tools offer a range of features, including breakpoints, step-by-step execution, console logging, network monitoring, and DOM inspection.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Familiarize yourself with the debugging features available in your preferred browser's developer tools.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>You can also put the `<code>debugger</code>` statement before the code to be checked. It works as setting a breakpoint and triggers any available debugging functionality. The statement has no effect if debugging functionality is unavailable.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Linting and Code Analysis</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>Utilize linting tools and code analysis tools like ESLint, JSLint, or JSHint.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>These tools can help identify potential issues in your code, such as syntax errors, unused variables, or code style violations, before even running the code.</li></ul></ul>"},{paraid:16,text:'<ol start="8"><li><strong>Logging and Error Handling</strong></li></ol>'},{paraid:17,text:"<ul><ul><li>Implement proper logging and error handling mechanisms in your code.</li></ul></ul>"},{paraid:17,text:"<ul><ul><li>Use try-catch blocks to catch and handle errors gracefully.</li></ul></ul>"},{paraid:17,text:"<ul><ul><li>Log errors and relevant information to aid in troubleshooting and debugging in production environments.</li></ul></ul>"},{paraid:18,text:"Remember that debugging is a skill that improves with practice. By utilizing these techniques and tools effectively, you can efficiently identify and fix issues in your JavaScript code, leading to more robust and reliable applications."}]},{secid:2,subtitle:"Common JavaScript Errors and How to Handle Them",paragraphs:[{paraid:1,text:"JavaScript code can encounter various errors during execution. Here are some common JavaScript errors and how to handle them:"},{paraid:2,text:"<ol><li><strong>Syntax Errors</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Syntax errors occur when there is a mistake in the syntax of your code.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>JavaScript engines will throw a syntax error and halt the execution of the code.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>To handle syntax errors, carefully review your code for typos, missing brackets, semicolons, or incorrect function parameters.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Reference Errors</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Reference errors occur when you try to access a variable or function that is not defined.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>To handle reference errors, ensure that all variables and functions are properly declared and in scope.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>You can use conditional statements or try-catch blocks to handle cases where certain variables may be undefined or null.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Type Errors</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Type errors occur when you perform an operation on a value of an incorrect type.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Common type errors include trying to call a non-function, accessing a property of an undefined or null value, or using an operator on incompatible types.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>To handle type errors, check the types of values before performing operations and use conditional statements or try-catch blocks to handle exceptions.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Range Errors</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Range errors occur when you use an invalid value within an acceptable range.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>For example, using an invalid index to access an array element or providing an invalid argument to a function.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>To handle range errors, validate input values and use conditional statements or try-catch blocks to handle out-of-range cases.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Network Errors</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Network errors occur when there is a problem with network connectivity or when making HTTP requests.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>These errors can include failed requests, timeouts, or CORS (Cross-Origin Resource Sharing) issues.</li></ul></ul>"},{paraid:11,text:'<ul><ul><li>To handle network errors, please refer to Sections "Making HTTP requests with AJAX" and "Making HTTP requests with the Fetch API" in Chapter 6.</li></ul></ul>'},{paraid:12,text:'<ol start="6"><li><strong>Error Objects</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>JavaScript provides built-in error objects like `<code>Error</code>`, `<code>TypeError</code>`, `<code>ReferenceError</code>`, etc., that can be used to catch and handle specific types of errors.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>You can use the `<code>try-catch-finally</code>` statement to catch errors and handle them gracefully.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>The `<code>catch</code>` block can include code to handle the error, log error messages, or display user-friendly error messages.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>The `<code>finally</code>` block is executed regardless whether an exception is thrown or caught. This block is optional.</li></ul></ul>"},{paraid:14,text:"<ul><ul>Example of handling errors using `<code>try-catch-finally</code>`:</ul></ul>"},{paraid:15,text:"",codeConfig:{codeid:"js_8_2_1",exampleid:"js_8_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{paraid:16,text:"It's important to handle errors gracefully in your JavaScript code to prevent application crashes and provide a better user experience. Proper error handling includes logging errors for debugging purposes, displaying meaningful error messages to users, and implementing fallback mechanisms when necessary. By understanding and effectively handling common JavaScript errors, you can improve the robustness and reliability of your code."}]}]},{category:"js",chid:9,title:"JavaScript Best Practices",sections:[{secid:1,subtitle:"Code Organization and Modularization",paragraphs:[{paraid:1,text:"Code organization and modularization are crucial for writing maintainable, scalable, and reusable JavaScript applications. They help improve code readability, reduce complexity, and facilitate collaboration among team members. Here are some guidelines for code organization and modularization:"},{paraid:2,text:"<ol><li><strong>File and Directory Structure</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Start by organizing your code into logical directories and files based on functionality or modules.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Separate different concerns, such as UI components, data models, utility functions, or API interactions, into separate files or directories.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Consider using a consistent naming convention, such as lowercase filenames or kebab-case, to make it easier to navigate and find files.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Modular JavaScript</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Break your code into modules, which are self-contained units that encapsulate related functionality.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Each module should have a clear purpose and responsibility.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Encapsulate related variables, functions, and classes within a module and export only the necessary interface.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Use the module pattern (e.g., using functions or classes) to encapsulate code and prevent polluting the global namespace.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Dependency Management</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Use a dependency management system or module bundler, such as npm (Node Package Manager) or webpack, to manage external dependencies and package your code.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Define dependencies in a separate file (e.g., `<code>package.json</code>`) and use tools to install and manage them automatically.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>This allows you to easily add, update, and remove dependencies without manually managing files.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Separation of Concerns</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Follow the principle of separation of concerns, which promotes dividing your code into distinct sections that handle different aspects of your application.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Keep your UI, business logic, and data management separate.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>For example, separate HTML, CSS, and JavaScript code into their respective files or directories.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Use Modules or Module Systems</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Utilize JavaScript module systems like CommonJS or ES modules (import/export) to encapsulate and organize your code into reusable modules.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Modules allow you to declare dependencies and import/export specific parts of the code.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>This promotes code reuse, maintainability, and testability.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Modular Development Frameworks</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Consider using modular development frameworks/libraries like React, Vue.js, or Angular, which provide built-in mechanisms for organizing and modularizing code.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>These frameworks typically encourage component-based development, where UI components encapsulate their own logic and can be easily reused.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Documentation and Comments</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>Document your code to provide clear explanations of its purpose, usage, and any dependencies.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Use meaningful variable and function names to improve code readability.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Include comments where necessary to provide additional context or explanations for complex code sections.</li></ul></ul>"},{paraid:16,text:'<ol start="8"><li><strong>Code Linting</strong></li></ol>'},{paraid:17,text:"<ul><ul><li>Use a code linter like ESLint to enforce consistent code style and catch potential errors or anti-patterns.</li></ul></ul>"},{paraid:17,text:"<ul><ul><li>Linting rules can help maintain a clean and standardized codebase, improving readability and reducing the chance of bugs.</li></ul></ul>"},{paraid:18,text:"Remember, the specific organization and modularization techniques may vary depending on the project's size, complexity, and development environment. Adapt and adopt best practices based on the specific requirements and guidelines of your project or development team. Consistency and readability should be key considerations when organizing and modularizing your JavaScript code."}]},{secid:2,subtitle:"Naming Conventions and Coding Style",paragraphs:[{paraid:1,text:"Naming conventions and coding style are important aspects of writing clean, readable, and maintainable JavaScript code. Consistent naming and coding style make it easier for developers to understand and collaborate on a project. While different teams or projects may have their specific conventions, here are some common guidelines:"},{paraid:2,text:"<ol><li><strong>Variable and Function Names</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Use descriptive and meaningful names that accurately represent the purpose or content of the variable or function.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Favor readability over brevity. Avoid overly abbreviated or cryptic names that can be confusing.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Use camelCase for variables and functions (e.g., `<code>myVariable</code>`, `<code>calculateSum</code>`).</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Be consistent with naming conventions throughout your codebase.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Constants</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Use uppercase letters and underscores for constants (e.g., `<code>MAX_COUNT</code>`, `<code>API_URL</code>`).</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Constants should represent values that are not intended to be changed.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Classes and Constructor Functions</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Use PascalCase (also known as UpperCamelCase) for class names (e.g., `<code>Person</code>`, `<code>Car</code>`).</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Use descriptive names that accurately represent the class's purpose or functionality.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Functions and Methods</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Use camelCase for function and method names.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Choose verbs or verb phrases that describe the action performed by the function or method (e.g., `<code>getUser</code>`, `<code>calculateTotal</code>`).</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Comments</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Use comments to provide explanations, clarify complex code sections, or document the purpose and usage of functions or classes.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Write comments that add value and improve code understanding, avoiding redundant or obvious comments.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Use consistent formatting for comments across your codebase.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Indentation and Formatting</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Use consistent indentation (e.g., two spaces or four spaces) for blocks of code within functions, loops, conditionals, etc.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Choose a consistent code formatting style for elements like curly braces, line breaks, and spacing.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Consistent formatting helps improve code readability and maintainability.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Line Length and Wrapping</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>Limit lines to a reasonable length (e.g., 80-120 characters) for improved readability.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Wrap long lines by breaking them into multiple lines.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Break lines at logical points (e.g., after a comma or operator) to maintain readability.</li></ul></ul>"},{paraid:16,text:'<ol start="8"><li><strong>Parentheses and Brackets</strong></li></ol>'},{paraid:17,text:"<ul><ul><li>Use parentheses and brackets consistently and place them in a readable manner.</li></ul></ul>"},{paraid:17,text:"<ul><ul><li>Avoid unnecessary or redundant parentheses or brackets.</li></ul></ul>"},{paraid:18,text:'<ol start="9"><li><strong>Operator Spacing</strong></li></ol>'},{paraid:19,text:"<ul><ul><li>Add spaces around operators to improve readability (e.g., `<code>x = 5 + 2;</code>`, `<code>if (condition) { ... }</code>`).</li></ul></ul>"},{paraid:19,text:"<ul><ul><li>However, don't overuse spaces to the extent that it hampers readability.</li></ul></ul>"},{paraid:20,text:'<ol start="10"><li><strong>Consistency and Team Guidelines</strong></li></ol>'},{paraid:21,text:"<ul><ul><li>Consistency is key. Follow the established coding conventions and style guidelines of your project or team.</li></ul></ul>"},{paraid:21,text:"<ul><ul><li>If working with a team, agree on a set of coding style guidelines and adhere to them for consistent code across the project.</li></ul></ul>"},{paraid:22,text:"Remember, these guidelines are not set in stone, and different projects or teams may have their own preferences. The most important aspect is to be consistent within your codebase and collaborate with your team to establish and follow agreed-upon conventions."}]},{secid:3,subtitle:"Performance Optimization Tips",paragraphs:[{paraid:1,text:"When it comes to performance optimization in JavaScript, there are several techniques and best practices that can help improve the speed and efficiency of your code. Here are some performance optimization tips:"},{paraid:2,text:"<ol><li><strong>Minimize and Bundle Code</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Minify and bundle your JavaScript code using tools like UglifyJS or Webpack.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Minification removes unnecessary characters (whitespace, comments) to reduce file size.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Bundling combines multiple files into a single file, reducing the number of HTTP requests required.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Avoid Global Variables</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Minimize the use of global variables as they can lead to naming conflicts and hinder performance.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Declare variables with appropriate scope (e.g., local to functions or modules) to reduce global namespace pollution.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Optimize Loops</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Optimize loops by reducing the number of iterations and avoiding unnecessary operations within the loop.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Consider using techniques like loop unrolling or loop inversion to optimize specific scenarios.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Use Efficient Data Structures and Algorithms</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Choose appropriate data structures and algorithms for your specific use case.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Use efficient data structures like arrays or maps for fast element access or lookup.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Employ algorithms with optimal time complexity to ensure efficient processing.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Cache DOM Queries</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Minimize the number of DOM queries, as they can be expensive operations.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Cache repeated DOM queries in variables to avoid redundant lookups.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Use techniques like event delegation to reduce the number of event listeners attached to individual elements.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Debouncing and Throttling</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Implement debouncing and throttling techniques to optimize event handling and reduce unnecessary function calls.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Debouncing limits the frequency of a function call to improve performance in scenarios like resizing or scrolling events.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Throttling limits the number of function invocations within a specific time frame, especially for events like mouse movement or keyboard input.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Use Efficient Selectors</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>When selecting elements using JavaScript libraries like jQuery, use efficient selectors to minimize the search time.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Prefer ID selectors (`<code>#id</code>`) or class selectors (`<code>.class</code>`) over complex CSS selectors.</li></ul></ul>"},{paraid:16,text:'<ol start="8"><li><strong>Asynchronous Operations</strong></li></ol>'},{paraid:17,text:"<ul><ul><li>Offload time-consuming tasks or operations to asynchronous functions or workers.</li></ul></ul>"},{paraid:17,text:"<ul><ul><li>Use asynchronous techniques like Promises, async/await, or Web Workers to prevent blocking the main thread and improve responsiveness.</li></ul></ul>"},{paraid:18,text:'<ol start="9"><li><strong>Optimize Network Requests</strong></li></ol>'},{paraid:19,text:"<ul><ul><li>Minimize the number of network requests by combining resources, using caching techniques, or lazy loading.</li></ul></ul>"},{paraid:19,text:"<ul><ul><li>Optimize the size of transferred data by compressing files (e.g., using Gzip) and optimizing images.</li></ul></ul>"},{paraid:20,text:'<ol start="10"><li><strong>Profiling and Benchmarking</strong></li></ol>'},{paraid:21,text:"<ul><ul><li>Use profiling and benchmarking tools to identify performance bottlenecks in your code.</li></ul></ul>"},{paraid:21,text:"<ul><ul><li>Tools like Chrome DevTools, Lighthouse, or performance profiling libraries can help pinpoint areas that require optimization.</li></ul></ul>"},{paraid:22,text:'<ol start="11"><li><strong>Memory Management</strong></li></ol>'},{paraid:23,text:"<ul><ul><li>Be mindful of memory usage and manage memory efficiently.</li></ul></ul>"},{paraid:23,text:"<ul><ul><li>Avoid memory leaks by properly releasing resources, removing event listeners to deallocate memory when no longer needed.</li></ul></ul>"},{paraid:23,text:"<ul><ul><li>Use techniques like object pooling or memory reuse for performance-critical scenarios.</li></ul></ul>"},{paraid:24,text:'<ol start="12"><li><strong>Use Web Workers</strong></li></ol>'},{paraid:25,text:"<ul><ul><li>Utilize Web Workers to offload heavy computations or operations to separate threads, allowing the main thread to remain responsive.</li></ul></ul>"},{paraid:26,text:"Remember, before optimizing code for performance, it's important to identify the specific areas that require optimization through profiling and testing. Optimize where it matters most and focus on improving the critical parts of your application rather than prematurely optimizing every line of code."}]},{secid:4,subtitle:"Security Considerations",paragraphs:[{paraid:1,text:"When developing JavaScript applications, it's essential to consider security aspects to protect user data, prevent vulnerabilities, and ensure a secure user experience. Here are some important security considerations for JavaScript development:"},{paraid:2,text:"<ol><li><strong>Input Validation and Sanitization</strong></li></ol>"},{paraid:3,text:"<ul><ul><li>Validate and sanitize all user input to prevent injection attacks and other security vulnerabilities.</li></ul></ul>"},{paraid:3,text:"<ul><ul><li>Use server-side validation in addition to client-side validation to ensure data integrity.</li></ul></ul>"},{paraid:4,text:'<ol start="2"><li><strong>Cross-Site Scripting (XSS) Prevention</strong></li></ol>'},{paraid:5,text:"<ul><ul><li>Guard against XSS attacks by properly encoding and escaping user-generated content before rendering it in HTML templates or dynamically updating the DOM.</li></ul></ul>"},{paraid:5,text:"<ul><ul><li>Avoid using innerHTML or similar methods when injecting user-generated content.</li></ul></ul>"},{paraid:6,text:'<ol start="3"><li><strong>Cross-Site Request Forgery (CSRF) Protection</strong></li></ol>'},{paraid:7,text:"<ul><ul><li>Implement measures to prevent CSRF attacks by adding CSRF tokens to forms and validating them on the server-side.</li></ul></ul>"},{paraid:7,text:"<ul><ul><li>Ensure that sensitive operations, such as modifying user data or performing financial transactions, require additional authentication and authorization.</li></ul></ul>"},{paraid:8,text:'<ol start="4"><li><strong>Secure Communication</strong></li></ol>'},{paraid:9,text:"<ul><ul><li>Use secure communication protocols (HTTPS) to encrypt data transmitted between the client and server, preventing eavesdropping and tampering.</li></ul></ul>"},{paraid:9,text:"<ul><ul><li>Avoid transmitting sensitive information, such as passwords or authentication tokens, over insecure channels.</li></ul></ul>"},{paraid:10,text:'<ol start="5"><li><strong>Secure Authentication and Authorization</strong></li></ol>'},{paraid:11,text:"<ul><ul><li>Implement secure authentication mechanisms, such as using industry-standard hashing algorithms (e.g., bcrypt) to store and verify user passwords.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Use strong session management practices, including securely storing session tokens and implementing session expiration.</li></ul></ul>"},{paraid:11,text:"<ul><ul><li>Apply appropriate authorization checks to ensure that users can access only the resources they are authorized to access.</li></ul></ul>"},{paraid:12,text:'<ol start="6"><li><strong>Secure Storage and Data Handling</strong></li></ol>'},{paraid:13,text:"<ul><ul><li>Handle sensitive data carefully, using encryption and secure storage mechanisms to protect user information, such as passwords or personal data.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Avoid storing sensitive information in client-side storage mechanisms, such as cookies or local storage, unless necessary.</li></ul></ul>"},{paraid:13,text:"<ul><ul><li>Follow best practices for data protection and adhere to relevant data protection regulations, such as GDPR.</li></ul></ul>"},{paraid:14,text:'<ol start="7"><li><strong>Secure Third-Party Libraries and APIs</strong></li></ol>'},{paraid:15,text:"<ul><ul><li>Check and regularly update third-party libraries and APIs used in your application to address security vulnerabilities.</li></ul></ul>"},{paraid:15,text:"<ul><ul><li>Only use trusted and well-maintained libraries from reputable sources.</li></ul></ul>"},{paraid:16,text:'<ol start="8"><li><strong>Regular Security Updates and Patches</strong></li></ol>'},{paraid:17,text:"<ul><ul><li>Stay informed about security vulnerabilities and updates related to JavaScript libraries, frameworks, and tools used in your project.</li></ul></ul>"},{paraid:17,text:"<ul><ul><li>Regularly update your dependencies and apply security patches to protect against known vulnerabilities.</li></ul></ul>"},{paraid:18,text:'<ol start="9"><li><strong>Error Handling and Logging</strong></li></ol>'},{paraid:19,text:"<ul><ul><li>Implement proper error handling and logging mechanisms to monitor and identify potential security issues.</li></ul></ul>"},{paraid:19,text:"<ul><ul><li>Be cautious about exposing sensitive error information to prevent information leakage.</li></ul></ul>"},{paraid:20,text:'<ol start="10"><li><strong>Access Control and Privilege Escalation</strong></li></ol>'},{paraid:21,text:"<ul><ul><li>Implement appropriate access controls and permissions to restrict user actions and prevent unauthorized access to resources.</li></ul></ul>"},{paraid:21,text:"<ul><ul><li>Be mindful of privilege escalation vulnerabilities, where an attacker gains higher privileges than intended.</li></ul></ul>"},{paraid:22,text:'<ol start="11"><li><strong>Security Auditing and Penetration Testing</strong></li></ol>'},{paraid:23,text:"<ul><ul><li>Conduct security audits and penetration testing to identify vulnerabilities and weaknesses in your application.</li></ul></ul>"},{paraid:23,text:"<ul><ul><li>Regularly review and assess the security of your codebase and infrastructure.</li></ul></ul>"},{paraid:24,text:'<ol start="12"><li><strong>User Education and Security Best Practices</strong></li></ol>'},{paraid:25,text:"<ul><ul><li>Educate your users about security best practices, such as using strong passwords, avoiding sharing sensitive information, and being cautious of phishing attacks.</li></ul></ul>"},{paraid:25,text:"<ul><ul><li>Implement security features like two-factor authentication (2FA) to enhance user account security.</li></ul></ul>"},{paraid:26,text:"Remember, security is an ongoing process, and it's crucial to stay updated on the latest security practices, vulnerabilities, and mitigation techniques. Follow secure coding practices, regularly review and test your application's security, and seek professional guidance when necessary."}]}]}];var o=a(4650),g=a(4214);let x=(()=>{class e{constructor(t){this.coreService=t}ngOnInit(){this.coreService.sentBookData(h)}ngOnDestroy(){}}return e.\u0275fac=function(t){return new(t||e)(o.Y36(g.p))},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-js-book"]],decls:1,vars:0,template:function(t,p){1&t&&o._UZ(0,"router-outlet")},dependencies:[s.lC]}),e})();const f="let age = 35;",_="let name = 'John';",y="let isActive = true;",b="let car = null;",v="let address = undefined;",j="let id = Symbol();",w="let person = { name: 'John', age: 25 };",S="let bigNumber = BigInt(123456789);",T="let age = 25;\nlet str = 'John is ' + 25 + ' years old.' // returns 'John is 25 years old.' ",O="let age = 25; \nlet typeOfAge = typeof age; // returns 'number'",E="let person = { name: 'John', age: 25 };\nlet isInstance = person instanceof Object; // returns true",C="let x = 5;",L="<!DOCTYPE html>\n<html>\n<head>\n  <title>Assignment Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    let x = 5; // Using the assignment operator (=) to assign a value to the variable 'x'\n    console.log('Initial value of x:', x); // Output: 5\n  <\/script>\n</body>\n</html>",k="let x = 5;\nx += 3; // equivalent to x = x + 3;",J="<!DOCTYPE html>\n<html>\n<head>\n  <title>Assignment Operator Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      let x = 5; // Using the assignment operator (=) to assign a value to the variable 'x'\n\n      // Additional assignment operators: +=, -=, *=, /=, and %=\n      x += 3; // x = x + 3\n      console.log('x += 3:', x); // Output: 8\n\n      x -= 2; // x = x - 2\n      console.log('x -= 2:', x); // Output: 6\n\n      x *= 4; // x = x * 4\n      console.log('x *= 4:', x); // Output: 24\n\n      x /= 3; // x = x / 3\n      console.log('x /= 3:', x); // Output: 8\n\n      x %= 5; // x = x % 5 (remainder after division by 5)\n      console.log('x %= 5:', x); // Output: 3\n    <\/script>\n</body>\n</html>",A="let a = 10;\nlet b = 4;\n\n// Addition\nlet sum = a + b;\n\n// Subtraction\nlet difference = a - b;\n\n// Multiplication\nlet product = a * b;\n\n// Division\nlet quotient = a / b;",D="<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operator Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      let a = 10;\n      let b = 4;\n\n      // Addition\n      let sum = a + b;\n      console.log('Addition:', sum); // Output: 14\n\n      // Subtraction\n      let difference = a - b;\n      console.log('Subtraction:', difference); // Output: 6\n\n      // Multiplication\n      let product = a * b;\n      console.log('Multiplication:', product); // Output: 40\n\n      // Division\n      let quotient = a / b;\n      console.log('Division:', quotient); // Output: 2.5\n    <\/script>\n</body>\n</html>",I="let a = 10;\nlet b = 4;\n\n// Modulo\nlet remainder = a % b;",P="<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      let a = 10;\n      let b = 4;\n\n      // Modulo\n      let remainder = a % b;\n      console.log('Modulo:', remainder); // Output: 2\n    <\/script>\n</body>\n</html>",H="// Increment\nlet x = 5;\nx++; // equivalent to x = x + 1;\n\n// Decrement\nlet y = 8;\ny--; // equivalent to y = y - 1;",F="<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operator Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      // Increment\n      let x = 5;\n      x++;\n      console.log('Increment:', x); // Output: 6\n\n      // Decrement\n      let y = 8;\n      y--;\n      console.log('Decrement:', y); // Output: 7\n    <\/script>\n</body>\n</html>",q="// Equal to (==)\nlet a = 5;\nlet b = '5';\nlet isEqual = a == b;\n\n// Not equal to (!=)\nlet c = 10;\nlet d = 7;\nlet notEqual = c != d;\n\n// Strict equal to (===)\nlet e = 5;\nlet f = 5;\nlet isStrictEqual = e === f;\n\n// Strict not equal to (!==)\nlet g = 10;\nlet h = '10';\nlet isStrictNotEqual = g !== h;",M="<!DOCTYPE html>\n<html>\n<head>\n  <title>Comparison Operator Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Equal to (==)\n    let a = 5;\n    let b = '5';\n    let isEqual = a == b;\n    console.log('Equal to (==):', isEqual); // Output: true\n\n    // Not equal to (!=)\n    let c = 10;\n    let d = 7;\n    let notEqual = c != d;\n    console.log('Not equal to (!=):', notEqual); // Output: true\n\n    // Strict equal to (===)\n    let e = 5;\n    let f = 5;\n    let isStrictEqual = e === f;\n    console.log('Strict equal to (===):', isStrictEqual); // Output: true\n\n    // Strict not equal to (!==)\n    let g = 10;\n    let h = '10';\n    let isStrictNotEqual = g !== h;\n    console.log('Strict not equal to (!==):', isStrictNotEqual); // Output: true\n  <\/script>\n</body>\n</html>",B="// Greater than (>)\nlet i = 8;\nlet j = 5;\nlet isGreater = i > j;\n\n// Less than (<)\nlet k = 3;\nlet l = 6;\nlet isLess = k < l;\n\n// Greater than or equal to (>=)\nlet m = 7;\nlet n = 7;\nlet isGreaterOrEqual = m >= n;\n\n// Less than or equal to (<=)\nlet o = 9;\nlet p = 12;\nlet isLessOrEqual = o <= p;",z="<!DOCTYPE html>\n<html>\n<head>\n  <title>Comparison Operator Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Greater than (>)\n    let i = 8;\n    let j = 5;\n    let isGreater = i > j;\n    console.log('Greater than (>):', isGreater); // Output: true\n\n    // Less than (<)\n    let k = 3;\n    let l = 6;\n    let isLess = k < l;\n    console.log('Less than (<):', isLess); // Output: true\n\n    // Greater than or equal to (>=)\n    let m = 7;\n    let n = 7;\n    let isGreaterOrEqual = m >= n;\n    console.log('Greater than or equal to (>=):', isGreaterOrEqual); // Output: true\n\n    // Less than or equal to (<=)\n    let o = 9;\n    let p = 12;\n    let isLessOrEqual = o <= p;\n    console.log('Less than or equal to (<=):', isLessOrEqual); // Output: true\n  <\/script>\n</body>\n</html>",R="// Logical AND (&&)\nlet a = true;\nlet b = true;\nlet resultAND = a && b;",N="<!DOCTYPE html>\n<html>\n<head>\n  <title>Logical Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Logical AND (&&)\n    let a = true;\n    let b = true;\n    let resultAND = a && b;\n    console.log('Logical AND (&&):', resultAND); // Output: true\n  <\/script>\n</body>\n</html>",Y="// Logical OR (||)\nlet c = true;\nlet d = false;\nlet resultOR = c || d;",U="<!DOCTYPE html>\n<html>\n<head>\n  <title>Logical Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Logical OR (||)\n    let c = true;\n    let d = false;\n    let resultOR = c || d;\n    console.log('Logical OR (||):', resultOR); // Output: true\n  <\/script>\n</body>\n</html>",W="// Logical NOT (!)\nlet e = true;\nlet resultNOT = !e;",X="<!DOCTYPE html>\n<html>\n<head>\n  <title>Logical Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Logical NOT (!)\n    let e = true;\n    let resultNOT = !e;\n    console.log('Logical NOT (!):', resultNOT); // Output: false\n  <\/script>\n</body>\n</html>",G="let num = 10;\nlet result = num % 2 === 0 ? 'Even' : 'Odd';",V="<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    let num = 10;\n    let result = num % 2 === 0 ? 'Even' : 'Odd';\n    console.log(result); // Output: 'Even'\n  <\/script>\n</body>\n</html>",$="let result = (10 + 5) * 2;",Q="<!DOCTYPE html>\n<html>\n<head>\n  <title>Grouping Operator Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Without using the grouping operator\n    let result1 = 10 + 5 * 2;\n    console.log('Result 1:', result1); // Output: 20 (Multiplication performed first, then addition)\n\n    // Using the grouping operator\n    let result2 = (10 + 5) * 2;\n    console.log('Result 2:', result2); // Output: 30 (Addition inside parentheses performed first, then multiplication)\n  <\/script>\n</body>\n</html>",K="// Bitwise AND (&)\nlet a = 5; // Binary: 0101\nlet b = 3; // Binary: 0011\nlet resultAND = a & b; // Binary: 0001 (Decimal: 1)\n\n// Bitwise OR (|)\nlet c = 5; // Binary: 0101\nlet d = 3; // Binary: 0011\nlet resultOR = c | d; // Binary: 0111 (Decimal: 7)\n\n// Bitwise XOR (^)\nlet e = 5; // Binary: 0101\nlet f = 3; // Binary: 0011\nlet resultXOR = e ^ f; // Binary: 0110 (Decimal: 6)\n\n// Bitwise NOT (~)\nlet g = 5; // Binary: 0101\nlet resultNOT = ~g; // Binary: 1010 (Decimal: -6)\n\n// Bitwise left shift (<<)\nlet h = 5; // Binary: 0101\nlet resultLeftShift = h << 2; // Binary: 010100 (Decimal: 20)\n\n// Bitwise right shift (>>)\nlet i = 16; // Binary: 0001 0000\nlet resultRightShift = i >> 2; // Binary: 0000 0100 (Decimal: 4)\n\n// Bitwise unsigned right shift (>>>)\nlet j = -16; // Binary: 1111 1111 1111 1111 1111 1111 1111 0000\nlet resultUnsignedRightShift = j >>> 2; // Binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820)",Z="<!DOCTYPE html>\n<html>\n<head>\n  <title>Bitwise Operator Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Bitwise AND (&)\n    let a = 5; // Binary: 0101\n    let b = 3; // Binary: 0011\n    let resultAND = a & b; // Binary: 0001 (Decimal: 1)\n    console.log('Bitwise AND (&):', resultAND); // Output: 1\n\n    // Bitwise OR (|)\n    let c = 5; // Binary: 0101\n    let d = 3; // Binary: 0011\n    let resultOR = c | d; // Binary: 0111 (Decimal: 7)\n    console.log('Bitwise OR (|):', resultOR); // Output: 7\n\n    // Bitwise XOR (^)\n    let e = 5; // Binary: 0101\n    let f = 3; // Binary: 0011\n    let resultXOR = e ^ f; // Binary: 0110 (Decimal: 6)\n    console.log('Bitwise XOR (^):', resultXOR); // Output: 6\n\n    // Bitwise NOT (~)\n    let g = 5; // Binary: 0101\n    let resultNOT = ~g; // Binary: 1010 (Decimal: -6)\n    console.log('Bitwise NOT (~):', resultNOT); // Output: -6\n\n    // Bitwise left shift (<<)\n    let h = 5; // Binary: 0101\n    let resultLeftShift = h << 2; // Binary: 010100 (Decimal: 20)\n    console.log('Bitwise left shift (<<):', resultLeftShift); // Output: 20\n\n    // Bitwise right shift (>>)\n    let i = 16; // Binary: 0001 0000\n    let resultRightShift = i >> 2; // Binary: 0000 0100 (Decimal: 4)\n    console.log('Bitwise right shift (>>):', resultRightShift); // Output: 4\n\n    // Bitwise unsigned right shift (>>>)\n    let j = -16; // Binary: 1111 1111 1111 1111 1111 1111 1111 0000\n    let resultUnsignedRightShift = j >>> 2; // Binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820)\n    console.log('Bitwise unsigned right shift (>>>):', resultUnsignedRightShift); // Output: 1073741820\n  <\/script>\n</body>\n</html>",ee="if (condition) {\n  // code to be executed if the condition is true\n} else {\n  // code to be executed if the condition is false\n}",te="<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Statement Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let number = 10;\n\n    if (number > 0) {\n      console.log('The number is positive.');\n    } else {\n      console.log('The number is zero or negative.');\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",ae="if (condition1) {\n  // code to be executed if condition1 is true\n} else if (condition2) {\n  // code to be executed if condition2 is true\n} else {\n  // code to be executed if all conditions are false\n}",oe="<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Statement Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let num = -10;\n\n    if (num > 0) {\n      console.log('The number is positive.');\n    } else if (num < 0) {\n      console.log('The number is negative.');\n    } else {\n      console.log('The number is zero.');\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",le="switch (expression) {\n  case value1:\n    // code to be executed if expression matches value1\n    break;\n  case value2:\n    // code to be executed if expression matches value2\n    break;\n  default:\n    // code to be executed if no case matches the expression\n}",ie="<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Statement Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let day = 'Thursday';\n\n    switch (day) {\n      case 'Monday':\n        console.log('It's Monday!');\n        break;\n      case 'Tuesday':\n        console.log('It's Tuesday!');\n        break;\n      case 'Wednesday':\n        console.log('It's Wednesday!');\n        break;\n      case 'Thursday':\n        console.log('It's Thursday!');\n        break;\n      case 'Friday':\n        console.log('It's Friday!');\n        break;\n      default:\n        console.log('It's the weekend!');\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",re="for (initialization; condition; increment/decrement) {\n  // code to be executed in each iteration\n}",se="<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    for (let i = 1; i <= 5; i++) {\n      console.log('Iteration ' + i);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",ne="while (condition) {\n  // code to be executed as long as the condition is true\n}",ce="<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let count = 1;\n\n    while (count <= 5) {\n      console.log('Iteration ' + count);\n      count++;\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",ue="do {\n  // code to be executed at least once\n} while (condition);",de="<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let count = 1;\n\n    do {\n      console.log('Iteration ' + count);\n      count++;\n    } while (count <= 5);\n  <\/script>\n</head>\n<body>\n</body>\n</html>",pe="for (variable in object) {\n  // code to be executed for each property\n}",me="<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    const person = {\n      name: 'John',\n      age: 30,\n      city: 'New York'\n    };\n    \n    for (let key in person) {\n      console.log(key + ': ' + person[key]);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",he="for (variable of iterable) {\n  // code to be executed for each element\n}",ge="<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    const fruits = ['apple', 'banana', 'orange'];\n\n    for (let fruit of fruits) {\n      console.log(fruit);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",xe="for (initialization; condition; increment/decrement) {\n  // code to be executed in each iteration\n  break;\n  // code to be executed in each iteration and possibly skipped\n}",fe='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Control Statement Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    for (let i = 0; i < 10; i++) {\n      if (i === 5) {\n        break; // exit the loop when i is 5\n      }\n      console.log(i);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',_e="for (initialization; condition; increment/decrement) {\n  // code to be executed in each iteration\n  continue;\n  // code to be executed in each iteration and possibly skipped\n}",ye='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Control Statement Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    for (let i = 0; i < 10; i++) {\n      if (i === 5) {\n        continue; // skip the iteration when i is 5\n      }\n      console.log(i);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',be="for (variable of iterable) {\n  // code to be executed for each element\n  return;\n  // code to be executed for each element and possibly skipped\n}",ve='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Control Statement Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    function findNumber(array, target) {\n      for (let num of array) {\n        if (num === target) {\n          return true; // exit the function and return true if target is found\n        }\n      }\n      return false; // return false if target is not found\n    }\n\n    console.log(findNumber([1, 2, 3, 4, 5], 3));\n  <\/script>\n</head>\n<body>\n</body>\n</html>',je="function functionName(parameter1, parameter2, ...) {\n  // code to be executed\n  return result; // optional\n}",we="<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Definition Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    function greet(name) {\n      const message = 'Hello, ' + name + '!';\n    \n      return message;\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Se="functionName(argument1, argument2, ...);",Te="<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Call Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    function greet(name) {\n      const message = 'Hello, ' + name + '!';\n    \n      return message;\n    }\n\n    // Calling the function\n    const result = greet('John');\n    console.log(result); // Output: Hello, John!\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Oe="// Global variable\nlet globalVariable = 'I am a global variable';\n\nfunction exampleFunction() {\n  // Local variable\n  let localVariable = 'I am a local variable';\n}",Ee="<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Scope Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    // Global variable\n    let globalVariable = 'I am a global variable';\n    \n    function exampleFunction() {\n      // Local variable\n      let localVariable = 'I am a local variable';\n    \n      console.log(globalVariable); // Accessing the global variable\n      console.log(localVariable); // Accessing the local variable\n    }\n    \n    exampleFunction(); // Calling the function\n    \n    console.log(globalVariable); // Accessing the global variable outside the function\n    // console.log(localVariable); // This will result in an error since localVariable is not accessible outside the function\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Ce="let anonymousFunction = function(parameter1, parameter2) {\n  // code to be executed\n};",Le="<!DOCTYPE html>\n<html>\n<head>\n  <title>Anonymous Function Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let anonymousFunction = function(parameter1, parameter2) {\n      // code to be executed\n      console.log('Parameters:', parameter1, parameter2);\n      console.log('Executing the anonymous function');\n    };\n    \n    // Calling the anonymous function\n    anonymousFunction('Hello', 'World');\n  <\/script>\n</head>\n<body>\n</body>\n</html>",ke="function outerFunction() {\n  let outerVariable = 'I am an outer variable';\n\n  function innerFunction() {\n    console.log(outerVariable); // Accessing the outer variable from the inner function\n  }\n\n  return innerFunction;\n}\n\n// Creating a closure by calling the outer function and assigning the returned inner function to a variable\nlet closure = outerFunction();\n\n// Calling the inner function, which still has access to the outer variable\nclosure(); // Output: I am an outer variable",Je="<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Closure Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    function outerFunction() {\n      let outerVariable = 'I am an outer variable';\n    \n      function innerFunction() {\n        console.log(outerVariable); // Accessing the outer variable from the inner function\n      }\n    \n      return innerFunction;\n    }\n    \n    // Creating a closure by calling the outer function and assigning the returned inner function to a variable\n    let closure = outerFunction();\n    \n    // Calling the inner function, which still has access to the outer variable\n    closure(); // Output: I am an outer variable\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Ae="const functionName = (parameter1, parameter2) => {\n  // code to be executed\n  return result; // optional\n};",De='<!DOCTYPE html>\n<html>\n<head>\n  <title>Arrow Function Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const sum = (num1, num2) => {\n      return num1 + num2;\n    };\n    \n    console.log(sum(2, 3)); // Output: 5\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Ie="(function() {\n  // code to be executed immediately\n})();",Pe="<!DOCTYPE html>\n<html>\n<head>\n  <title>IIFE Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    (function(name) {\n      console.log('Hello, ' + name + '!');\n    })('John');\n  <\/script>\n</head>\n<body>\n</body>\n</html>",He="const firstName = 'John';\nconst lastName = 'Doe';\n\nconst fullName = firstName + ' ' + lastName;\nconsole.log(fullName); // Output: 'John Doe'",Fe="<!DOCTYPE html>\n<html>\n<head>\n  <title>String Concatenation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    const firstName = 'John';\n    const lastName = 'Doe';\n    \n    const fullName = firstName + ' ' + lastName;\n    console.log(fullName); // Output: 'John Doe'\n  <\/script>\n</head>\n<body>\n</body>\n</html>",qe="const message = 'Hello, World!';\nconsole.log(message.length); // Output: 13",Me="<!DOCTYPE html>\n<html>\n<head>\n  <title>String Length Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    const message = 'Hello, World!';\n    console.log(message.length); // Output: 13\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Be="const greeting = 'Hello';\nconsole.log(greeting[0]); // Output: 'H'\nconsole.log(greeting.charAt(1)); // Output: 'e'",ze="<!DOCTYPE html>\n<html>\n<head>\n  <title>Accessing Characters in a String Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    const greeting = 'Hello';\n    console.log(greeting[0]); // Output: 'H'\n    console.log(greeting.charAt(1)); // Output: 'e'\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Re="// The toLowerCase() method converts the string to all lowercase characters\nconst str1 = 'Hello, World!';\nconst lowerCaseStr = str1.toLowerCase();\nconsole.log(lowerCaseStr); // Output: 'hello, world!'\n\n// The toUpperCase() method converts the string to all uppercase characters\nconst str2 = 'hello, world!';\nconst upperCaseStr = str2.toUpperCase();\nconsole.log(upperCaseStr); // Output: 'HELLO, WORLD!'\n\n// The slice() method extracts a portion of the string from index 7 to 11 (12-1)\nconst str3 = 'Hello, World!';\nconst slicedStr = str3.slice(7, 12);\nconsole.log(slicedStr); // Output: 'World'\n\n// The indexOf() method finds the index of the substring 'World' in the string.\nconst str4 = 'Hello, World!';\nconst index = str4.indexOf('World');\nconsole.log(index); // Output: 7\n\n// The replace() method replaces the substring 'Hello' with 'Hi' in the string\nconst str5 = 'Hello, World!';\nconst replacedStr = str5.replace('Hello', 'Hi');\nconsole.log(replacedStr); // Output: 'Hi, World!'\n\n// The split() method splits the string into an array of substrings based on ',' as a separator\nconst str6 = 'apple,banana,orange';\nconst fruitArray = str6.split(',');\nconsole.log(fruitArray); // Output: ['apple', 'banana', 'orange']\n\n// The join() method joins the elements of the array into a single string with ' | ' as a separator\nconst fruitArray2 = ['apple', 'banana', 'orange'];\nconst joinedFruits = fruitArray2.join(' | ');\nconsole.log(joinedFruits); // Output: 'apple | banana | orange'\n\n// The match() method searches the string using a regular expression and returns an array of matches\nconst str7 = 'The quick brown fox jumps over the lazy dog.';\nconst pattern = /quick|lazy/g;\nconst matches = str7.match(pattern);\nconsole.log(matches); // Output: ['quick', 'lazy']",Ne="<!DOCTYPE html>\n<html>\n<head>\n  <title>String Method Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    // The toLowerCase() method converts the string to all lowercase characters\n    const str1 = 'Hello, World!';\n    const lowerCaseStr = str1.toLowerCase();\n    console.log(lowerCaseStr); // Output: 'hello, world!'\n    \n    // The toUpperCase() method converts the string to all uppercase characters\n    const str2 = 'hello, world!';\n    const upperCaseStr = str2.toUpperCase();\n    console.log(upperCaseStr); // Output: 'HELLO, WORLD!'\n    \n    // The slice() method extracts a portion of the string from index 7 to 11 (12-1)\n    const str3 = 'Hello, World!';\n    const slicedStr = str3.slice(7, 12);\n    console.log(slicedStr); // Output: 'World'\n    \n    // The indexOf() method finds the index of the substring 'World' in the string.\n    const str4 = 'Hello, World!';\n    const index = str4.indexOf('World');\n    console.log(index); // Output: 7\n    \n    // The replace() method replaces the substring 'Hello' with 'Hi' in the string\n    const str5 = 'Hello, World!';\n    const replacedStr = str5.replace('Hello', 'Hi');\n    console.log(replacedStr); // Output: 'Hi, World!'\n    \n    // The split() method splits the string into an array of substrings based on ',' as a separator\n    const str6 = 'apple,banana,orange';\n    const fruitArray = str6.split(',');\n    console.log(fruitArray); // Output: ['apple', 'banana', 'orange']\n    \n    // The join() method joins the elements of the array into a single string with ' | ' as a separator\n    const fruitArray2 = ['apple', 'banana', 'orange'];\n    const joinedFruits = fruitArray2.join(' | ');\n    console.log(joinedFruits); // Output: 'apple | banana | orange'\n    \n    // The match() method searches the string using a regular expression and returns an array of matches\n    const str7 = 'The quick brown fox jumps over the lazy dog.';\n    const pattern = /quick|lazy/g;\n    const matches = str7.match(pattern);\n    console.log(matches); // Output: ['quick', 'lazy']\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Ye="const name = 'John'; \nconst age = 30; \n\nconst message = `My name is ${name} and I am ${age} years old.`; \nconsole.log(message); // Output: 'My name is John and I am 30 years old.'",c="const name = 'John'; \n    const age = 30; \n    \n    const message = `My name is ${name} and I am ${age} years old.`; \n    console.log(message); // Output: 'My name is John and I am 30 years old.'",Ue=`<!DOCTYPE html>\n<html>\n<head>\n  <title>String Template Literal Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    ${c}\n  <\/script>\n</head>\n<body>\n</body>\n</html>`,We="const heart = '\\u2665';\nconsole.log(heart); // Output: '\u2665'\n\nconst smiley = '\\u{1F604}';\nconsole.log(smiley); // Output: '\u{1f604}'",Xe="<!DOCTYPE html>\n<html>\n<head>\n  <title>Unicode Character Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    const heart = '\\u2665';\n    console.log(heart); // Output: '\u2665'\n    \n    const smiley = '\\u{1F604}';\n    console.log(smiley); // Output: '\u{1f604}'\n  <\/script>\n</head>\n<body>\n</body>\n</html>",Ge="// Using array literal syntax\nlet myArray = [1, 2, 3, 4, 5];",Ve="// Using Array constructor\nlet myArray = new Array(1, 2, 3, 4, 5);",$e="let myArray = [1, 2, 3, 4, 5];\n\nconsole.log(myArray[0]); // Output: 1\nconsole.log(myArray[2]); // Output: 3",Qe='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n\n    console.log(myArray[0]); // Output: 1\n    console.log(myArray[2]); // Output: 3\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Ke="let myArray = [1, 2, 3, 4, 5];\n\nmyArray[2] = 10;\nconsole.log(myArray); // Output: [1, 2, 10, 4, 5]",Ze='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n\n    myArray[2] = 10;\n    console.log(myArray); // Output: [1, 2, 10, 4, 5]\n  <\/script>\n</head>\n<body>\n</body>\n</html>',et="let myArray = [1, 2, 3, 4, 5];\nconsole.log(myArray.length); // Output: 5\n\nmyArray.length = 3;\nconsole.log(myArray); // Output: [1, 2, 3]",tt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n    console.log(myArray.length); // Output: 5\n    \n    myArray.length = 3;\n    console.log(myArray); // Output: [1, 2, 3]\n  <\/script>\n</head>\n<body>\n</body>\n</html>',at="let myArray = [1, 2, 3];\n\nmyArray.push(4); // Adds 4 at the end\nconsole.log(myArray); // Output: [1, 2, 3, 4]\n\nlet removedElement = myArray.pop(); // Removes the last element and returns it\nconsole.log(myArray); // Output: [1, 2, 3]\nconsole.log(removedElement); // Output: 4\n\nmyArray.unshift(0); // Adds 0 at the beginning\nconsole.log(myArray); // Output: [0, 1, 2, 3]\n\nlet shiftedElement = myArray.shift(); // Removes the first element and returns it\nconsole.log(myArray); // Output: [1, 2, 3]\nconsole.log(shiftedElement); // Output: 0",ot='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3];\n\n    myArray.push(4); // Adds 4 at the end\n    console.log(myArray); // Output: [1, 2, 3, 4]\n    \n    let removedElement = myArray.pop(); // Removes the last element and returns it\n    console.log(myArray); // Output: [1, 2, 3]\n    console.log(removedElement); // Output: 4\n    \n    myArray.unshift(0); // Adds 0 at the beginning\n    console.log(myArray); // Output: [0, 1, 2, 3]\n    \n    let shiftedElement = myArray.shift(); // Removes the first element and returns it\n    console.log(myArray); // Output: [1, 2, 3]\n    console.log(shiftedElement); // Output: 0\n  <\/script>\n</head>\n<body>\n</body>\n</html>',lt="let myArray = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}\n\nmyArray.forEach(function(element) {\n  console.log(element);\n});",it='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n\n    for (let i = 0; i < myArray.length; i++) {\n      console.log(myArray[i]);\n    }\n\n    myArray.forEach(function(element) {\n      console.log(element);\n    });\n  <\/script>\n</head>\n<body>\n</body>\n</html>',rt="// Using object literal syntax\nlet person = {\n  name: 'John',\n  age: 30,\n  profession: 'Developer'\n};",st="// Using Object constructor\nlet person = new Object();\nperson.name = 'John';\nperson.age = 30;\nperson.profession = 'Developer';",nt="let person = {\n  name: 'John',\n  age: 30,\n  profession: 'Developer'\n};\n\nconsole.log(person.name); // Output: John\nconsole.log(person['age']); // Output: 30",ct="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let person = {\n      name: 'John',\n      age: 30,\n      profession: 'Developer'\n    };\n    \n    console.log(person.name); // Output: John\n    console.log(person['age']); // Output: 30\n  <\/script>\n</head>\n<body>\n</body>\n</html>",ut="let person = {\n  name: 'John',\n  age: 30,\n  profession: 'Developer'\n};\n\nperson.age = 35;\nperson['profession'] = 'Engineer';",dt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let person = {\n      name: 'John',\n      age: 30,\n      profession: 'Developer'\n    };\n    \n    person.age = 35;\n    person['profession'] = 'Engineer';\n    \n    console.log(person.age); // Output: 35\n    console.log(person['profession']); // Output: Engineer\n  <\/script>\n</head>\n<body>\n</body>\n</html>",pt="let person = {\n  name: 'John',\n  age: 30,\n  profession: 'Developer'\n};\n\nperson.city = 'New York';",mt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let person = {\n      name: 'John',\n      age: 30,\n      profession: 'Developer'\n    };\n    \n    person.city = 'New York';\n      \n    console.log(person.name); // Output: John\n    console.log(person.city); // Output: New York\n  <\/script>\n</head>\n<body>\n</body>\n</html>",ht="let person = {\n  name: 'John',\n  age: 30,\n  profession: 'Developer'\n};\n\ndelete person.profession;",gt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let person = {\n      name: 'John',\n      age: 30,\n      profession: 'Developer'\n    };\n    \n    delete person.profession;\n    \n    console.log(person.name); // Output: John\n    console.log(person.profession); // Output: undefined\n  <\/script>\n</head>\n<body>\n</body>\n</html>",xt="let person = {\n  name: 'John',\n  age: 30,\n  sayHello: function() {\n    console.log('Hello!');\n  }\n};\n\nperson.sayHello(); // Output: Hello!",ft="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let person = {\n      name: 'John',\n      age: 30,\n      sayHello: function() {\n        console.log('Hello!');\n      }\n    };\n    \n    person.sayHello(); // Output: Hello!\n  <\/script>\n</head>\n<body>\n</body>\n</html>",_t="let person = {\n  name: 'John',\n  age: 30,\n  profession: 'Developer'\n};\n\nfor (let key in person) {\n  console.log(key + ': ' + person[key]);\n}\n\nlet keys = Object.keys(person);\nfor (let i = 0; i < keys.length; i++) {\n  let key = keys[i];\n  console.log(key + ': ' + person[key]);\n}",yt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    let person = {\n      name: 'John',\n      age: 30,\n      profession: 'Developer'\n    };\n    \n    for (let key in person) {\n      console.log(key + ': ' + person[key]);\n    }\n    \n    let keys = Object.keys(person);\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      console.log(key + ': ' + person[key]);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>",bt="function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.sayHello = function() {\n    console.log('Hello, my name is ' + this.name);\n  };\n}\n\nlet john = new Person('John', 30);\njohn.sayHello(); // Output: Hello, my name is John",vt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n  <script>\n    function Person(name, age) {\n      this.name = name;\n      this.age = age;\n      this.sayHello = function() {\n        console.log('Hello, my name is ' + this.name);\n      };\n    }\n    \n    let john = new Person('John', 30);\n    john.sayHello(); // Output: Hello, my name is John\n  <\/script>\n</head>\n<body>\n</body>\n</html>",jt="let element = document.getElementById('elementId');",wt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by ID Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by ID Example</h1>\n  <div id=\"elementId\">This is the selected element.</div>\n  <br/>\n\n  <script>\n    let element = document.getElementById('elementId');\n\n    console.log('This is the inner text of the selected element: ' + element.innerText); // innerText property will be discussed below\n  <\/script>\n</body>\n</html>",St="let elements = document.getElementsByClassName('className');",Tt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by Class Name Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Class Name Example</h1>\n  <div class="className">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByClassName(\'className\');\n\n    for (let i = 0; i < elements.length; i++) {\n      console.log(\'This is the selected element: \' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>',Ot="let elements = document.getElementsByTagName('tagName');",Et="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by Tag Name Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Tag Name Example</h1>\n  <div>Element 1</div>\n  <p>Element 2</p>\n  <span>Element 3</span>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByTagName('div');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",Ct="let element = document.querySelector('selector');\nlet elements = document.querySelectorAll('selector');",Lt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Query Selector Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id=\"elementId\">Element 1</div>\n  <div class=\"className\">Element 2</div>\n  <div class=\"className\">Element 3</div>\n  <br/>\n\n  <script>\n    // JavaScript code\n    let element = document.querySelector('#elementId');\n\n    console.log('This is the selected element by id: ' + element.innerText);\n\n    let elements = document.querySelectorAll('.className');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element by class name: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",kt="element.innerHTML = 'New HTML content';\nelement.textContent = 'New text content';",Jt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Modify Element Content Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <h1 id=\"elementId\">Initial Content</h1>\n  <p>Some paragraph with initial content</p>\n\n  <script>\n    let element = document.getElementById('elementId');\n    element.innerHTML = 'New HTML content';\n\n    let paragraph = document.querySelector('p');\n    paragraph.textContent = 'New text content';\n  <\/script>\n</body>\n</html>",At="let value = element.getAttribute('attributeName');\nelement.setAttribute('attributeName', 'attributeValue');",Dt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get and Set Attribute Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <img id=\"myImage\" src=\"assets/images/cute_cat.jpg\" alt=\"My Image\">\n  <br/>\n\n  <script>\n    // JavaScript code\n    let element = document.getElementById('myImage');\n\n    // Get the value of the 'src' attribute\n    let value = element.getAttribute('src');\n    console.log(value);\n\n    // Set the value of the 'alt' attribute\n    element.setAttribute('alt', 'New Alt Text');\n  <\/script>\n</body>\n</html>",It="element.style.property = 'value';",Pt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Set CSS Property Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    let element = document.getElementById('myElement');\n    \n    // Set the CSS property values\n    element.style.color = 'blue';\n    element.style.backgroundColor = 'yellow';\n    element.style.fontSize = '20px';\n    element.style.padding = '10px';\n  <\/script>\n</body>\n</html>",Ht="element.classList.add('className');\nelement.classList.remove('className');",Ft="<!DOCTYPE html>\n<html>\n<head>\n  <title>Class Manipulation on Hover Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <style>\n    .highlight {\n      background-color: yellow;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    let element = document.getElementById('myElement');\n\n    // Add class on mouseover; addEventListener method will be discussed on next chapter\n    element.addEventListener('mouseover', function() {\n      element.classList.add('highlight');\n    });\n\n    // Remove class on mouseout\n    element.addEventListener('mouseout', function() {\n      element.classList.remove('highlight');\n    });\n  <\/script>\n</body>\n</html>",qt="let newElement = document.createElement('tagName');\nlet newText = document.createTextNode('Text content');",Mt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Create Element and Create Text Node Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div id=\"container\"></div>\n\n  <script>\n    let container = document.getElementById('container');\n\n    // Create a new element\n    let newElement = document.createElement('p');\n\n    // Create a text node\n    let newText = document.createTextNode('Text content');\n\n    // Append the text node to the new element\n    newElement.appendChild(newText);\n\n    // Append the new element to the container\n    container.appendChild(newElement);\n  <\/script>\n</body>\n</html>",Bt="parentElement.appendChild(newElement);\nparentElement.removeChild(childElement);",zt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Append and Remove Child Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div id=\"parent\">\n    <p id=\"child\">Child Element</p>\n  </div>\n\n  <script>\n    // JavaScript code\n    let parentElement = document.getElementById('parent');\n    let childElement = document.getElementById('child');\n\n    // Create a new element\n    let newElement = document.createElement('span');\n    newElement.textContent = 'New Child Element';\n\n    // Append the new element to the parent\n    parentElement.appendChild(newElement);\n\n    // Remove the child element from the parent\n    parentElement.removeChild(childElement);\n  <\/script>\n</body>\n</html>",Rt="element.addEventListener('eventName', eventHandler);",Nt="function eventHandler(event) {\n  // Event handling code\n}",Yt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Handler Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <button id=\"myButton\">Click Me</button>\n\n  <script>\n    function eventHandler(event) {\n      // Event handling code\n      alert('Button clicked!');\n    }\n\n    // Select the button element\n    let button = document.getElementById('myButton');\n\n    // Attach the event handler to the button's click event\n    button.addEventListener('click', eventHandler);\n  <\/script>\n</body>\n</html>",Ut="// Event bubbling\nelement1.addEventListener('click', eventHandler);\n\n// Event capturing\nelement2.addEventListener('click', eventHandler, true);",Wt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling and Capturing Example</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n\n    div {\n      padding: 20px;\n      border: 1px solid black;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"outerDiv1\">\n    <h2>Bubbling:</h2>\n    <div id=\"innerDiv1\">Click Me!</div>\n  </div>\n\n  <div id=\"outerDiv2\">\n    <h2>Capturing:</h2>\n    <div id=\"innerDiv2\">Click Me!</div>\n  </div>\n</div>\n  <script>\n    function eventHandler(event) {\n      alert('Event handler triggered on:' + event.currentTarget.id);\n      // event.stopPropagation();\n    }\n\n    let innerDiv1 = document.getElementById('innerDiv1');\n    let outerDiv1 = document.getElementById('outerDiv1');\n    \n    let innerDiv2 = document.getElementById('innerDiv2');\n    let outerDiv2 = document.getElementById('outerDiv2');\n    \n    // Event bubbling\n    innerDiv1.addEventListener('click', eventHandler, false);\n    outerDiv1.addEventListener('click', eventHandler, false);\n\n    // Event capturing\n    innerDiv2.addEventListener('click', eventHandler, true);\n    outerDiv2.addEventListener('click', eventHandler, true);\n  <\/script>\n</body>\n</html>",Xt="const listContainer = document.getElementById('listContainer');\n\nfunction handleItemClick(event) {\n  const target = event.target;\n\n  if (target.tagName === 'LI') {\n    // Toggle the 'selected' class on the clicked list item\n    target.classList.toggle('selected');\n  }\n}\n\n// Attach the event listener to the parent element (listContainer)\nlistContainer.addEventListener('click', handleItemClick);\n\n// Simulate dynamically adding more list items after a delay\nsetTimeout(() => {\n  const newItem = document.createElement('li');\n  newItem.textContent = 'Item 4';\n  listContainer.appendChild(newItem);\n}, 2000);",Gt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Delegation Example</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n\n    ul {\n      list-style: none;\n      padding: 0;\n    }\n\n    li {\n      cursor: pointer;\n    }\n\n    .selected {\n      background-color: yellow;\n    }\n  </style>\n</head>\n<body>\n  <ul id=\"listContainer\">\n    \x3c!-- Initial list items --\x3e\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n\n  <script>\n    const listContainer = document.getElementById('listContainer');\n\n    function handleItemClick(event) {\n      const target = event.target;\n\n      if (target.tagName === 'LI') {\n        // Toggle the 'selected' class on the clicked list item\n        target.classList.toggle('selected');\n      }\n    }\n\n    // Attach the event listener to the parent element (listContainer)\n    listContainer.addEventListener('click', handleItemClick);\n\n    // Simulate dynamically adding more list items after a delay\n    setTimeout(() => {\n      const newItem = document.createElement('li');\n      newItem.textContent = 'Item 4';\n      listContainer.appendChild(newItem);\n    }, 2000);\n  <\/script>\n</body>\n</html>",Vt="element.removeEventListener('eventName', eventHandler);",$t="<!DOCTYPE html>\n<html>\n<head>\n  <title>Remove Event Listener Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <button id=\"myButton\">Click Me</button>\n\n  <script>\n    function eventHandler() {\n      alert('Button clicked!');\n    }\n\n    let button = document.getElementById('myButton');\n\n    // Attach the event handler to the button's click event\n    button.addEventListener('click', eventHandler);\n\n    // Remove the event handler after 3 seconds\n    setTimeout(() => {\n      button.removeEventListener('click', eventHandler);\n      alert('Event handler removed!');\n    }, 3000);\n  <\/script>\n</body>\n</html>",Qt='<button onclick="eventHandler(event)">Click me</button>',Kt="<!DOCTYPE html>\n<html>\n<head>\n  <title>Inline Event Handling Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <button onclick=\"eventHandler()\">Click me</button>\n\n  <script>\n    function eventHandler() {\n      alert('Button clicked!');\n    }\n  <\/script>\n</body>\n</html>",Zt="// Fetch data from the server\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => {\n    // DOM manipulation\n    const container = document.getElementById('data-container');\n\n    // Create a new list element for each data item\n    data.forEach(item => {\n      const listItem = document.createElement('li');\n      listItem.textContent = item.name;\n      container.appendChild(listItem);\n    });\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",ea="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch API Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <ul id=\"data-container\"></ul>\n\n  <script>\n    fetch('assets/data/json/list.json')\n      .then(response => response.json())\n      .then(data => {\n        const container = document.getElementById('data-container');\n\n        // Create a new list element for each data item\n        data.forEach(item => {\n          const listItem = document.createElement('li');\n          listItem.textContent = item.name;\n          container.appendChild(listItem);\n        });\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",ta="function callbackFunction(result) {\n  // Code to be executed when the callback is invoked\n}\n\n// Passing callbackFunction as a callback to another function\nsomeFunction(callbackFunction);",aa="<!DOCTYPE html>\n<html>\n<head>\n  <title>Javascript Callback Function Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function called 'greet' with parameters 'name' and 'callback'\n    function greet(name, callback) {\n      const message = 'Hello, ' + name + '!';\n    \n      // Call the 'callback' function and pass the 'message' as an argument\n      callback(message);\n    }\n    \n    function displayMessage(message) {\n      console.log(message);\n    }\n    \n    // Call the 'greet' function with arguments 'John' as the name and 'displayMessage' as the callback\n    greet('John', displayMessage);\n  <\/script>\n</body>\n</html>",oa="// Asynchronous function that simulates making an API request\nfunction fetchDataFromAPI(callback) {\n  // Simulating API request delay with setTimeout\n  setTimeout(() => {\n    const data = ['John', 'Jane', 'Alice'];\n    callback(data);\n  }, 2000); // Simulate 2 seconds delay\n}\n\n// Callback function to handle the fetched data\nfunction handleData(data) {\n  console.log(data);\n}",la="<!DOCTYPE html>\n<html>\n<head>\n  <title>Asynchronous Callback Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Asynchronous function that simulates making an API request\n    function fetchDataFromAPI(callback) {\n      // Simulating API request delay with setTimeout\n      setTimeout(() => {\n        const data = ['John', 'Jane', 'Alice'];\n        callback(data);\n      }, 2000); // Simulate 2 seconds delay\n    }\n\n    // Callback function to handle the fetched data\n    function handleData(data) {\n      console.log(data);\n    }\n\n    fetchDataFromAPI(handleData);\n  <\/script>\n</body>\n</html>",ia="function fetchData() {\n  return new Promise(function(resolve, reject) {\n    // Simulating an asynchronous operation with setTimeout\n    setTimeout(function() {\n      // Simulating a successful response\n      const data = { message: 'Data successfully fetched!' };\n\n      // Resolve the promise with the data\n      resolve(data);\n      \n      // Simulating an error scenario\n      // reject(new Error('Failed to fetch data!'));\n    }, 2000); // Wait for 2 seconds\n  });\n}",ra="<!DOCTYPE html>\n<html>\n<head>\n  <title>Creating Promise Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function fetchData() {\n      return new Promise(function(resolve, reject) {\n        // Simulating an asynchronous operation with setTimeout\n        setTimeout(function() {\n          // Simulating a successful response\n          const data = { message: 'Data successfully fetched!' };\n    \n          // Resolve the promise with the data\n          resolve(data);\n    \n          // Simulating an error scenario\n          // reject(new Error('Failed to fetch data!'));\n        }, 2000); // Wait for 2 seconds\n      });\n    }\n    \n    // Using the fetchData() function and handling the Promise\n    fetchData()\n      .then(function(data) {\n        console.log(data.message); // Output: Data successfully fetched!\n      })\n      .catch(function(error) {\n        console.error(error.message); // If the error scenario is uncommented, this will output: Failed to fetch data!\n      });\n  <\/script>\n</body>\n</html>",sa="promise\n  .then(result => {\n    // Process the result\n    return transformedResult;\n  })\n  .then(transformedResult => {\n    // Process the transformed result\n  })\n  .catch(error => {\n    // Handle any errors along the chain\n  });",na="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Chaining Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // A function that returns a Promise to simulate an asynchronous operation\n    function fetchData() {\n      return new Promise(function(resolve) {\n        // Simulating data fetching with setTimeout\n        setTimeout(function() {\n          const data = [1, 2, 3, 4, 5];\n          resolve(data);\n        }, 1000);\n      });\n    }\n    \n    // Function to process the data and return a new Promise with the transformed result\n    function processData(data) {\n      return new Promise(function(resolve) {\n        // Simulating processing with setTimeout\n        setTimeout(function() {\n          const transformedResult = data.map((item) => item * 2);\n          resolve(transformedResult);\n        }, 1500);\n      });\n    }\n    \n    // Function to further process the transformed result and log the final output\n    function processTransformedData(transformedData) {\n      console.log('Final result:', transformedData.reduce((sum, item) => sum + item, 0));\n    }\n    \n    // Chain the Promises together\n    fetchData()\n      .then((result) => {\n        // Process the result and return a new Promise with the transformed result\n        return processData(result);\n      })\n      .then((transformedResult) => {\n        // Process the transformed result\n        processTransformedData(transformedResult);\n      })\n      .catch((error) => {\n        // Handle any errors along the chain\n        console.error('Error occurred:', error);\n      });\n  <\/script>\n</body>\n</html>",ca="async function fetchData() {\n  const response = await fetch('assets/data/json/hello.json');\n  const data = response.json();\n  return data;\n}",ua="<!DOCTYPE html>\n<html>\n<head>\n  <title>Async/Await Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    async function fetchData() {\n      const response = await fetch('assets/data/json/hello.json');\n      const data = response.json();\n      return data;\n    }\n\n    fetchData().then(data => {\n      console.log(data.hello);\n    });\n  <\/script>\n</body>\n</html>",da="async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = response.json();\n  return data;\n}\n\nfetchData()\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });",pa="<!DOCTYPE html>\n<html>\n<head>\n  <title>Async/Await Error Handling Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    async function fetchData() {\n      const response = await fetch('https://api.example.com/data');\n      const data = response.json();\n      return data;\n    }\n\n    fetchData()\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  <\/script>\n</body>\n</html>",ma="// Adding an event listener to a DOM element for 'click' event\ndocument.getElementById('myButton').addEventListener('click', function() {\n  alert('Button Clicked!');\n});",ha="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event-Driven Programming</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <button id=\"myButton\">Click Me!</button>\n  <script>\n    // Adding an event listener to the button element for 'click' event\n    document.getElementById('myButton').addEventListener('click', function() {\n      alert('Button Clicked!');\n    });\n  <\/script>\n</body>\n</html>",ga="navigator.geolocation.getCurrentPosition(\n  position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    // Do something with the coordinates\n  },\n  error => {\n    console.error('Error:', error.message);\n  }\n);",xa="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Geolocation API Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          console.log(latitude, longitude);\n        },\n        error => {\n          console.error('Error:', error.message);\n        }\n      );\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n    }\n  <\/script>\n</body>\n</html>",fa="// Storing data\nlocalStorage.setItem('key', 'value');\n\n// Retrieving data\nconst data = localStorage.getItem('key');\n\n// Removing data\nlocalStorage.removeItem('key');",_a="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Storage API Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Storing data\n    localStorage.setItem('key', 'Hello World!');\n    \n    // Retrieving data\n    const data = localStorage.getItem('key');\n    console.log(data);\n    \n    // Removing data\n    localStorage.removeItem('key');\n  <\/script>\n</body>\n</html>",ya="const copyButton = document.getElementById('copyButton');\nconst textToCopy = 'Hello, world!';\n\ncopyButton.addEventListener('click', async () => {\n  try {\n    await navigator.clipboard.writeText(textToCopy);\n    console.log('Text copied to clipboard successfully!');\n  } catch (err) {\n    console.error('Failed to copy text:', err);\n  }\n});",ba="const pasteButton = document.getElementById('pasteButton');\nconst outputElement = document.getElementById('output');\n\npasteButton.addEventListener('click', async () => {\n  try {\n    const textFromClipboard = await navigator.clipboard.readText();\n    outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n  } catch (err) {\n    console.error('Failed to read text from clipboard:', err);\n  }\n});",va="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Clipboard API Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputText\" placeholder=\"Enter text to copy\">\n  <button id=\"copyButton\">Copy to Clipboard</button>\n  <button id=\"pasteButton\">Paste from Clipboard</button>\n  <div id=\"output\"></div>\n\n  <script>\n    const inputText = document.getElementById('inputText');\n    const copyButton = document.getElementById('copyButton');\n    const pasteButton = document.getElementById('pasteButton');\n    const outputElement = document.getElementById('output');\n\n    copyButton.addEventListener('click', async () => {\n      const textToCopy = inputText.value;\n      try {\n        await navigator.clipboard.writeText(textToCopy);\n        console.log('Text copied to clipboard successfully!');\n      } catch (err) {\n        console.error('Failed to copy text:', err);\n      }\n    });\n\n    pasteButton.addEventListener('click', async () => {\n      try {\n        const textFromClipboard = await navigator.clipboard.readText();\n        outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n      } catch (err) {\n        console.error('Failed to read text from clipboard:', err);\n      }\n    });\n  <\/script>\n</body>\n</html>",ja="const xhr = new XMLHttpRequest();",wa="xhr.open('GET', 'https://api.example.com/data', true);",Sa="xhr.setRequestHeader('Content-Type', 'application/json');",Ta="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n      const responseData = xhr.responseText;\n      // ...\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",Oa="xhr.send();",Ea="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr = new XMLHttpRequest();\n\n    // Set up the AJAX request\n    xhr.open('GET', 'assets/data/json/hello.json', true); // true for asynchronous, false for synchronous\n    \n    // Set up request headers\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Handle the Response\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          // Request was successful, handle the response\n          const responseData = xhr.responseText;\n          console.log(xhr.responseText); // Output the response data\n        } else {\n          // Handle HTTP error\n          console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n        }\n      }\n    };\n\n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",Ca="let xhr;\ntry {\n  xhr = new XMLHttpRequest();\n} catch (error) {\n  // Handle initialization error\n  console.error('XMLHttpRequest creation failed:', error);\n}",La="xhr.onerror = function() {\n  // Handle network error\n  console.error('Network error occurred:', xhr.status, xhr.statusText);\n};",ka="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",Ja="xhr.timeout = 5000; // Set the timeout to 5 seconds\n\nxhr.ontimeout = function() {\n  // Handle timeout error\n  console.error('Request timed out');\n};",Aa="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Error Handling Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr;\n    try {\n      xhr = new XMLHttpRequest();\n    } catch (error) {\n      // Handle initialization error\n      console.error('XMLHttpRequest creation failed:', error);\n    }\n\n    // Set up the AJAX request\n    xhr.open('GET', 'https://api.example.com/data', true); // true for asynchronous, false for synchronous\n    \n    // Set up request headers\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Handle the Response\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          // Request was successful, handle the response\n          const responseData = xhr.responseText;\n          console.log(xhr.responseText); // Output the response data\n        } else {\n          // Handle HTTP error\n          console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n        }\n      }\n    };\n\n    // Handle network error\n    xhr.onerror = function() {\n      console.error('Network error occurred:', xhr.status, xhr.statusText);\n    };\n\n    xhr.timeout = 5000; // Set the timeout to 5 seconds\n\n    // Handle timeout error\n    xhr.ontimeout = function() {\n      console.error('Request timed out');\n    };\n\n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",Da="<div>\n  \x3c!-- The content will be updated here --\x3e\n  <h2 id=\"header\">Original header</h2>\n  <p id=\"paragraph\">Original paragraph</p>\n</div>\n\n<script>\n  // Create a new XMLHttpRequest object\n  const xhr = new XMLHttpRequest();\n\n  // Configure the AJAX request\n  xhr.open('GET', 'assets/data/json/content.json', true);\n\n  // Set up the response handling\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status === 200) {\n        // Request was successful, handle the response\n        const data = JSON.parse(xhr.responseText);\n\n        // Update the content of h2 and p elements with the data from the JSON file\n        document.getElementById('header').innerText = data.title;\n        document.getElementById('paragraph').innerText = data.content;\n      }\n    }\n  };\n\n  // Send the AJAX request\n  xhr.send();\n<\/script>",Ia="<!DOCTYPE html>\n<html>\n<head>\n  <title>AJAX Updating Web Page Content Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div>\n    \x3c!-- The content will be updated here --\x3e\n    <h2 id=\"header\">Original header</h2>\n    <p id=\"paragraph\">Original paragraph</p>\n  </div>\n\n  <button id=\"updateButton\">Update Content</button>\n\n  <script>\n    // Event listener to handle the button click\n    document.getElementById('updateButton').addEventListener('click', function() {\n      // Create a new XMLHttpRequest object\n      const xhr = new XMLHttpRequest();\n\n      // Configure the AJAX request\n      xhr.open('GET', 'assets/data/json/content.json', true);\n\n      // Set up the response handling\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            // Request was successful, handle the response\n            const data = JSON.parse(xhr.responseText);\n\n            // Update the content of h2 and p elements with the data from the JSON file\n            document.getElementById('header').innerText = data.title;\n            document.getElementById('paragraph').innerText = data.content;\n          } else {\n            // Handle HTTP error\n            console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n          }\n        }\n      };\n\n      // Handle network errors\n      xhr.onerror = function() {\n        console.error('Network error occurred');\n      };\n\n      // Send the AJAX request\n      xhr.send();\n    });\n  <\/script>\n</body>\n</html>",Pa="fetch('https://api.example.com/data')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Ha="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    fetch('assets/data/json/hello.json')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data.hello);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",Fa="fetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    // Additional headers if needed\n  },\n  body: JSON.stringify(data) // Request body as JSON\n})\n  .then(response => {\n    // Handle the response\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",qa="",Ma="fetch('https://api.example.com/data')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Ba="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    fetch('assets/data/json/hello.js') // hello.js file doesn't exist\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data.hello);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",za="// Creating a prototype object\nvar animalPrototype = {\n  sound: 'Unknown',\n  makeSound: function() {\n    console.log(this.sound);\n  }\n};\n\n// Creating a new object using the prototype\nvar dog = Object.create(animalPrototype);\ndog.sound = 'Woof';\n\n// Accessing property and method via prototype chain\ndog.makeSound(); // Output: Woof\n\n// Creating another object using the same prototype\nvar cat = Object.create(animalPrototype);\ncat.sound = 'Meow';\n\ncat.makeSound(); // Output: Meow",Ra="<!DOCTYPE html>\n<html>\n<head>\n  <title>Prototype and Inheritance Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Creating a prototype object\n    var animalPrototype = {\n      sound: 'Unknown',\n      makeSound: function() {\n        console.log(this.sound);\n      }\n    };\n    \n    // Creating a new object using the prototype\n    var dog = Object.create(animalPrototype);\n    dog.sound = 'Woof';\n    \n    // Accessing property and method via prototype chain\n    dog.makeSound(); // Output: Woof\n    \n    // Creating another object using the same prototype\n    var cat = Object.create(animalPrototype);\n    cat.sound = 'Meow';\n    \n    cat.makeSound(); // Output: Meow\n  <\/script>\n</body>\n</html>",Na="// Constructor function \n function Person(name, age) { \n   this.name = name; \n   this.age = age; \n } \n \n // Adding a method to the prototype \n Person.prototype.introduce = function() { \n   console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n }; \n \n // Creating objects using the constructor function \n var person1 = new Person('Alice', 25); \n var person2 = new Person('Bob', 30); \n \n // Accessing properties and calling the inherited method \n console.log(person1.name); // Output: Alice \n console.log(person2.age); // Output: 30 \n \n person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",u="// Constructor function \n    function Person(name, age) { \n      this.name = name; \n      this.age = age; \n    } \n    \n    // Adding a method to the prototype \n    Person.prototype.introduce = function() { \n      console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n    }; \n    \n    // Creating objects using the constructor function \n    var person1 = new Person('Alice', 25); \n    var person2 = new Person('Bob', 30); \n    \n    // Accessing properties and calling the inherited method \n    console.log(person1.name); // Output: Alice \n    console.log(person2.age); // Output: 30 \n    \n    person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n    person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",Ya=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Prototype and Inheritance Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    ${u}\n  <\/script>\n</body>\n</html>`,Ua="// ES6 class syntax \n class Person { \n   constructor(name, age) { \n     this.name = name; \n     this.age = age; \n   } \n   \n   introduce() { \n     console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n   } \n } \n \n // Creating objects using the class \n var person1 = new Person('Alice', 25); \n var person2 = new Person('Bob', 30); \n \n // Accessing properties and calling the method \n console.log(person1.name); // Output: Alice \n console.log(person2.age); // Output: 30 \n \n person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",Wa="// ES6 class syntax \n   class Person { \n     constructor(name, age) { \n       this.name = name; \n       this.age = age; \n     } \n     \n     introduce() { \n       console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n     } \n   } \n   \n   // Creating objects using the class \n   var person1 = new Person('Alice', 25); \n   var person2 = new Person('Bob', 30); \n   \n   // Accessing properties and calling the method \n   console.log(person1.name); // Output: Alice \n   console.log(person2.age); // Output: 30 \n   \n   person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n   person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",Xa=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Prototype and Inheritance Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    ${u}\n  <\/script>\n</body>\n</html>`,Ga="// Pure function\nfunction addNumbers(a, b) {\n  return a + b;\n}\n\n// Calling the pure function\nvar result = addNumbers(3, 5);\nconsole.log(result); // Output: 8",Va='<!DOCTYPE html>\n<html>\n<head>\n  <title>Pure Function Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Pure function\n    function addNumbers(a, b) {\n      return a + b;\n    }\n    \n    // Calling the pure function\n    var result = addNumbers(3, 5);\n    console.log(result); // Output: 8\n  <\/script>\n</body>\n</html>',$a="// Immutable data\nconst originalArray = [1, 2, 3, 4, 5];\n\n// Creating a new array with an updated value\nconst updatedArray = [...originalArray, 6];\n\n// Output the original and updated arrays\nconsole.log(originalArray); // Output: [1, 2, 3, 4, 5]\nconsole.log(updatedArray); // Output: [1, 2, 3, 4, 5, 6]",Qa='<!DOCTYPE html>\n<html>\n<head>\n  <title>Immutable Data Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Immutable data\n    const originalArray = [1, 2, 3, 4, 5];\n    \n    // Creating a new array with an updated value\n    const updatedArray = [...originalArray, 6];\n    \n    // Output the original and updated arrays\n    console.log(originalArray); // Output: [1, 2, 3, 4, 5]\n    console.log(updatedArray); // Output: [1, 2, 3, 4, 5, 6]\n  <\/script>\n</body>\n</html>',Ka="// Higher-order function example: map\nfunction map(array, transform) {\n  var transformedArray = [];\n  \n  for (var i = 0; i < array.length; i++) {\n    transformedArray.push(transform(array[i]));\n  }\n  \n  return transformedArray;\n}\n\n// Example usage of the higher-order function\nvar numbers = [1, 2, 3, 4, 5];\nvar doubledNumbers = map(numbers, function(num) {\n  return num * 2;\n});\n\nconsole.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]",Za='<!DOCTYPE html>\n<html>\n<head>\n  <title>Higher-order Function Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Higher-order function example: map\n    function map(array, transform) {\n      var transformedArray = [];\n      \n      for (var i = 0; i < array.length; i++) {\n        transformedArray.push(transform(array[i]));\n      }\n      \n      return transformedArray;\n    }\n    \n    // Example usage of the higher-order function\n    var numbers = [1, 2, 3, 4, 5];\n    var doubledNumbers = map(numbers, function(num) {\n      return num * 2;\n    });\n    \n    console.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]\n  <\/script>\n</body>\n</html>',eo="// Functions to be composed\nconst add = (x) => x + 5;\nconst multiplyByTwo = (x) => x * 2;\nconst subtractTen = (x) => x - 10;\n\n// Function composition\nconst composedFunction = (x) => subtractTen(multiplyByTwo(add(x)));\n\n// Example usage\nconst result = composedFunction(10);\nconsole.log(result); // Output: 20",to='<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Composition Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Functions to be composed\n    const add = (x) => x + 5;\n    const multiplyByTwo = (x) => x * 2;\n    const subtractTen = (x) => x - 10;\n    \n    // Function composition\n    const composedFunction = (x) => subtractTen(multiplyByTwo(add(x)));\n    \n    // Example usage\n    const result = composedFunction(10);\n    console.log(result); // Output: 20\n  <\/script>\n</body>\n</html>',ao="// Recursive function to calculate the factorial of a number \nfunction factorial(n) { \n  if (n === 0 || n === 1) { \n    return 1; \n  } else { \n    return n * factorial(n - 1); \n  } \n} \n\n// Example usage \nconst number = 5; \nconst result = factorial(number); \nconsole.log(`Factorial of ${number} is: ${result}`);",d="// Recursive function to calculate the factorial of a number \n    function factorial(n) { \n      if (n === 0 || n === 1) { \n        return 1; \n      } else { \n        return n * factorial(n - 1); \n      } \n    } \n    \n    // Example usage \n    const number = 5; \n    const result = factorial(number); \n    console.log(`Factorial of ${number} is: ${result}`);",oo=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Recursion Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    ${d}\n  <\/script>\n</body>\n</html>`,lo="// Declarative approach using map to square each number\nconst numbers = [1, 2, 3, 4, 5];\n\nconst squaredNumbers = numbers.map((num) => num * num);\n\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]",io='<!DOCTYPE html>\n<html>\n<head>\n  <title>Declarative Programming Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Declarative approach using map to square each number\n    const numbers = [1, 2, 3, 4, 5];\n    \n    const squaredNumbers = numbers.map((num) => num * num);\n    \n    console.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\n  <\/script>\n</body>\n</html>',ro="// Generator function for generating an infinite sequence of numbers\nfunction* generateNumbers() {\n  let num = 1;\n  while (true) {\n    yield num++;\n  }\n}\n\n// Lazy evaluation function that takes a generator and returns the next value\nfunction getNextValue(generator) {\n  return generator.next().value;\n}\n\n// Create a generator for an infinite sequence of numbers\nconst numbersGenerator = generateNumbers();\n\n// Lazy evaluation example\nconsole.log(getNextValue(numbersGenerator)); // Output: 1\nconsole.log(getNextValue(numbersGenerator)); // Output: 2\nconsole.log(getNextValue(numbersGenerator)); // Output: 3",so='<!DOCTYPE html>\n<html>\n<head>\n  <title>Lazy Evaluation Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Generator function for generating an infinite sequence of numbers\n    function* generateNumbers() {\n      let num = 1;\n      while (true) {\n        yield num++;\n      }\n    }\n    \n    // Lazy evaluation function that takes a generator and returns the next value\n    function getNextValue(generator) {\n      return generator.next().value;\n    }\n    \n    // Create a generator for an infinite sequence of numbers\n    const numbersGenerator = generateNumbers();\n    \n    // Lazy evaluation example\n    console.log(getNextValue(numbersGenerator)); // Output: 1\n    console.log(getNextValue(numbersGenerator)); // Output: 2\n    console.log(getNextValue(numbersGenerator)); // Output: 3\n  <\/script>\n</body>\n</html>',no="const text = 'The quick brown fox jumps over the lazy dog.';\n\n// Regular expression pattern to search for all words starting with 't' or 'T'\nconst pattern = /[tT]\\w+/g;\n\n// Finding all matches using the 'exec' method in a loop\nlet match;\nconst matches = [];\n\nwhile ((match = pattern.exec(text)) !== null) {\n  matches.push(match[0]);\n}\n\nconsole.log(matches); // Output: ['The', 'the']",co="<!DOCTYPE html>\n<html>\n<head>\n  <title>Pattern Matching Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    const text = 'The quick brown fox jumps over the lazy dog.';\n\n    // Regular expression pattern to search for all words starting with 't' or 'T'\n    const pattern = /[tT]\\w+/g;\n    \n    // Finding all matches using the 'exec' method in a loop\n    let match;\n    const matches = [];\n    \n    for (const word of text.split(' ')) {\n      if ((match = pattern.exec(word)) !== null) {\n        matches.push(match[0]);\n      }\n    }\n    \n    console.log(matches); // Output: ['The', 'the']\n  <\/script>\n</body>\n</html>",uo="// assets/data/modules/math.module.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  return a - b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}",po="<!DOCTYPE html>\n<html>\n<head>\n  <title>ES Module Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <p></p>\n\n  \x3c!-- Indicate that the JavaScript code within the script tag is an ES6 module --\x3e\n  <script type=\"module\">\n    // Importing functions from the math.module.js module\n    import { add, subtract, multiply } from './assets/data/modules/math.module.js';\n    \n    // Define the main function\n    function main() {\n      // Calculate the sum, difference, and product using the imported functions\n      const sum = add(123, 456);\n      const difference = subtract(100, 23);\n      const product = multiply(12, 15);\n    \n      // Create a text containing the calculated values\n      const text = 'sum = ' + sum + ', ' + 'difference = ' + difference + ', ' + 'product = ' + product;\n    \n      // Call the output function\n      output(text);\n    }\n    \n    // Define the output function to display the text in a <p> element\n    function output(text) {\n      let elem = document.querySelector('p');\n      elem.innerText = text;\n    }\n    \n    // Call the main function to start the execution\n    main();\n  <\/script>\n</body>\n</html>",mo="// Dynamically import the math.module.js module \n// Some browsers don't support this feature\nconst { add, subtract, multiply } = await import('./assets/data/modules/math.module.js');",ho="<!DOCTYPE html>\n<html>\n<head>\n  <title>ES Module Asynchronous Loading Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <p></p>\n\n  \x3c!-- Indicate that the JavaScript code within the script tag is an ES6 module --\x3e\n  <script type=\"module\">\n    // Define an asynchronous function called 'main'\n    async function main() {\n      // Dynamically import the math.module.js module using 'import()' and extract 'add', 'subtract', and 'multiply' functions\n      const { add, subtract, multiply } = await import('./assets/data/modules/math.module.js');\n    \n      // Calculate the sum, difference, and product using the imported functions\n      const sum = add(123, 456);\n      const difference = subtract(100, 23);\n      const product = multiply(12, 15);\n    \n      // Return a string containing the calculated values\n      return 'sum = ' + sum + ', ' + 'difference = ' + difference + ', ' + 'product = ' + product;\n    };\n    \n    // Define the 'output' function to display the text in a <p> element\n    function output(text) {\n      let elem = document.querySelector('p');\n      elem.innerText = text;\n    }\n    \n    // Call the 'main' function asynchronously\n    main()\n      .then(output)\n      .catch(() => output('Your browser doesn't support this feature.'));\n  <\/script>\n</body>\n</html>",go="try {\n  // Code that might throw an error\n} catch (error) {\n  // Handle the error\n  console.error('Error:', error);\n} finally {\n  // Code to be executed regardless of whether an exception is thrown or caught\n}",xo="<!DOCTYPE html>\n<html>\n<head>\n  <title>Try-Catch Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function handleError() {\n      try {\n        // Simulating code that might throw an error\n        throw new Error('Custom error message');\n      } catch (error) {\n        // Handle the error\n        console.error('Error: ' + error.message);\n      } finally {\n        console.log(''Finally' code is exexuted.')\n      }\n    }\n\n    handleError();\n  <\/script>\n</body>\n</html>";var fo=a(7809);let i=(()=>{class e{constructor(){this.bookData=r}}return e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=o.Xpm({type:e,selectors:[["app-js-chapter"]],decls:1,vars:1,consts:[[3,"bookData"]],template:function(t,p){1&t&&o._UZ(0,"app-chapter",0),2&t&&o.Q6J("bookData",p.bookData)},dependencies:[fo.l]}),e})();const _o=[{path:"",component:x,children:[{path:"chapter",component:i},{path:"chapter/:chid",component:i},{path:"chapter/:chid/section/:secid",component:i},{path:"**",component:i},{path:"",component:i}]}];let yo=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=o.oAB({type:e}),e.\u0275inj=o.cJS({imports:[s.Bz.forChild(_o),s.Bz]}),e})();var bo=a(1375);let vo=(()=>{class e{}return e.\u0275fac=function(t){return new(t||e)},e.\u0275mod=o.oAB({type:e}),e.\u0275inj=o.cJS({imports:[m.ez,yo,bo.I]}),e})()}}]);