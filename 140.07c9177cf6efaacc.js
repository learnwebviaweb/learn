"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[140],{9140:(Hh,j,o)=>{o.r(j),o.d(j,{JsBookModule:()=>Bh});var h={};o.r(h),o.d(h,{js_10_1_1:()=>rh,js_10_1_1_1:()=>ah,js_10_1_2:()=>ih,js_10_1_2_1:()=>lh,js_10_1_3:()=>ch,js_10_1_4:()=>_h,js_10_1_4_1:()=>hh,js_10_2_1:()=>dh,js_10_2_10:()=>uo,js_10_2_10_1:()=>wh,js_10_2_11:()=>xh,js_10_2_11_1:()=>Ch,js_10_2_2:()=>uh,js_10_2_3:()=>ph,js_10_2_4:()=>mh,js_10_2_5:()=>gh,js_10_2_5_1:()=>fh,js_10_2_6:()=>jh,js_10_2_7:()=>yh,js_10_2_8:()=>bh,js_10_2_9:()=>vh,js_10_3_1:()=>Eh,js_10_3_1_1:()=>kh,js_10_3_2:()=>Oh,js_10_3_3:()=>Dh,js_10_3_3_1:()=>Th,js_11_2_1:()=>Ih,js_11_2_1_1:()=>Ph,js_2_1_1:()=>y,js_2_1_10:()=>w,js_2_1_11:()=>x,js_2_1_11_1:()=>Do,js_2_1_12:()=>To,js_2_1_13:()=>C,js_2_1_13_1:()=>Io,js_2_1_1_1:()=>yo,js_2_1_2:()=>bo,js_2_1_3:()=>vo,js_2_1_4:()=>wo,js_2_1_5:()=>xo,js_2_1_6:()=>Co,js_2_1_7:()=>Eo,js_2_1_8:()=>b,js_2_1_8_1:()=>ko,js_2_1_9:()=>v,js_2_1_9_1:()=>Oo,js_2_2_1:()=>Po,js_2_2_10:()=>Fo,js_2_2_11:()=>Mo,js_2_2_2:()=>Lo,js_2_2_3:()=>So,js_2_2_4:()=>Ao,js_2_2_5:()=>No,js_2_2_6:()=>Bo,js_2_2_7:()=>Ho,js_2_2_8:()=>zo,js_2_2_9:()=>Ro,js_2_3_1:()=>E,js_2_3_10:()=>A,js_2_3_10_1:()=>Ko,js_2_3_11:()=>N,js_2_3_11_1:()=>Qo,js_2_3_12:()=>B,js_2_3_12_1:()=>Zo,js_2_3_13:()=>H,js_2_3_13_1:()=>es,js_2_3_1_1:()=>Uo,js_2_3_2:()=>k,js_2_3_2_1:()=>qo,js_2_3_3:()=>O,js_2_3_3_1:()=>Jo,js_2_3_4:()=>D,js_2_3_4_1:()=>$o,js_2_3_5:()=>T,js_2_3_5_1:()=>Yo,js_2_3_6:()=>I,js_2_3_6_1:()=>Wo,js_2_3_7:()=>P,js_2_3_7_1:()=>Vo,js_2_3_8:()=>L,js_2_3_8_1:()=>Go,js_2_3_9:()=>S,js_2_3_9_1:()=>Xo,js_3_1_1:()=>ts,js_3_1_2:()=>z,js_3_1_2_1:()=>ns,js_3_1_3:()=>os,js_3_1_4:()=>R,js_3_1_4_1:()=>ss,js_3_1_5:()=>rs,js_3_1_6:()=>F,js_3_1_6_1:()=>as,js_3_1_7:()=>is,js_3_1_8:()=>M,js_3_1_8_1:()=>ls,js_3_2_1:()=>cs,js_3_2_2:()=>U,js_3_2_2_1:()=>_s,js_3_2_3:()=>hs,js_3_2_4:()=>q,js_3_2_4_1:()=>ds,js_3_2_5:()=>us,js_3_2_6:()=>J,js_3_2_6_1:()=>ps,js_3_3_1:()=>ms,js_3_3_10:()=>G,js_3_3_10_1:()=>Cs,js_3_3_2:()=>$,js_3_3_2_1:()=>gs,js_3_3_3:()=>fs,js_3_3_4:()=>Y,js_3_3_4_1:()=>js,js_3_3_5:()=>ys,js_3_3_6:()=>W,js_3_3_6_1:()=>bs,js_3_3_7:()=>vs,js_3_3_8:()=>V,js_3_3_8_1:()=>ws,js_3_3_9:()=>xs,js_4_1_1:()=>u,js_4_1_10:()=>se,js_4_1_10_1:()=>Ds,js_4_1_11:()=>re,js_4_1_11_1:()=>Ts,js_4_1_12:()=>ae,js_4_1_12_1:()=>Is,js_4_1_2:()=>X,js_4_1_3:()=>K,js_4_1_4:()=>Q,js_4_1_5:()=>Z,js_4_1_6:()=>ee,js_4_1_7:()=>te,js_4_1_7_1:()=>Es,js_4_1_8:()=>ne,js_4_1_8_1:()=>ks,js_4_1_9:()=>oe,js_4_1_9_1:()=>Os,js_4_2_1:()=>ie,js_4_2_1_1:()=>Ps,js_4_2_2:()=>le,js_4_2_2_1:()=>Ls,js_4_2_3:()=>ce,js_4_2_3_1:()=>Ss,js_4_2_4:()=>_e,js_4_2_4_1:()=>As,js_4_3_1:()=>he,js_4_3_1_1:()=>Ns,js_4_3_2:()=>de,js_4_3_2_1:()=>Bs,js_4_3_3:()=>ue,js_4_3_3_1:()=>Hs,js_4_3_4:()=>pe,js_4_3_4_1:()=>zs,js_4_3_5:()=>me,js_4_3_5_1:()=>Rs,js_4_3_6:()=>ge,js_4_3_6_1:()=>Fs,js_4_4_1:()=>fe,js_4_4_1_1:()=>Ms,js_4_4_2:()=>je,js_4_4_2_1:()=>Us,js_4_4_3:()=>ye,js_4_4_3_1:()=>qs,js_4_5_1:()=>Js,js_4_5_2:()=>be,js_4_5_2_1:()=>$s,js_4_5_3:()=>ve,js_4_5_3_1:()=>Ys,js_4_5_4:()=>we,js_4_5_4_1:()=>Ws,js_4_5_5:()=>xe,js_4_5_5_1:()=>Vs,js_4_5_6:()=>Ce,js_4_5_6_1:()=>Gs,js_4_5_7:()=>Ee,js_4_5_7_1:()=>Xs,js_4_5_8:()=>ke,js_4_5_8_1:()=>Ks,js_4_5_9:()=>Oe,js_4_5_9_1:()=>Qs,js_5_1_1:()=>De,js_5_1_10:()=>He,js_5_1_10_1:()=>ar,js_5_1_11:()=>ze,js_5_1_11_1:()=>ir,js_5_1_12:()=>Re,js_5_1_12_1:()=>lr,js_5_1_13:()=>Fe,js_5_1_13_1:()=>cr,js_5_1_14:()=>Me,js_5_1_14_1:()=>_r,js_5_1_15:()=>Ue,js_5_1_15_1:()=>hr,js_5_1_16:()=>qe,js_5_1_16_1:()=>dr,js_5_1_17:()=>Je,js_5_1_17_1:()=>ur,js_5_1_18:()=>$e,js_5_1_18_1:()=>pr,js_5_1_19:()=>Ye,js_5_1_19_1:()=>mr,js_5_1_2:()=>Te,js_5_1_20:()=>We,js_5_1_20_1:()=>gr,js_5_1_3:()=>Ie,js_5_1_3_1:()=>Zs,js_5_1_4:()=>Pe,js_5_1_4_1:()=>er,js_5_1_5:()=>Le,js_5_1_5_1:()=>tr,js_5_1_6:()=>Se,js_5_1_6_1:()=>nr,js_5_1_7:()=>Ae,js_5_1_7_1:()=>or,js_5_1_8:()=>Ne,js_5_1_8_1:()=>sr,js_5_1_9:()=>Be,js_5_1_9_1:()=>rr,js_5_2_1:()=>Ve,js_5_2_10:()=>ot,js_5_2_10_1:()=>kr,js_5_2_11:()=>st,js_5_2_11_1:()=>Or,js_5_2_12:()=>rt,js_5_2_12_1:()=>Dr,js_5_2_13:()=>at,js_5_2_13_1:()=>Tr,js_5_2_14:()=>it,js_5_2_14_1:()=>Ir,js_5_2_15:()=>lt,js_5_2_15_1:()=>Pr,js_5_2_16:()=>ct,js_5_2_16_1:()=>Lr,js_5_2_17:()=>_t,js_5_2_17_1:()=>Sr,js_5_2_18:()=>ht,js_5_2_18_1:()=>Ar,js_5_2_19:()=>dt,js_5_2_19_1:()=>Nr,js_5_2_1_1:()=>fr,js_5_2_2:()=>Ge,js_5_2_20:()=>ut,js_5_2_20_1:()=>Br,js_5_2_21:()=>pt,js_5_2_21_1:()=>Hr,js_5_2_22:()=>mt,js_5_2_22_1:()=>zr,js_5_2_23:()=>gt,js_5_2_23_1:()=>Rr,js_5_2_24:()=>ft,js_5_2_24_1:()=>Fr,js_5_2_25:()=>jt,js_5_2_25_1:()=>Mr,js_5_2_26:()=>yt,js_5_2_26_1:()=>Ur,js_5_2_27:()=>bt,js_5_2_27_1:()=>qr,js_5_2_28:()=>vt,js_5_2_28_1:()=>Jr,js_5_2_29:()=>wt,js_5_2_29_1:()=>$r,js_5_2_2_1:()=>jr,js_5_2_3:()=>Xe,js_5_2_3_1:()=>yr,js_5_2_4:()=>Ke,js_5_2_4_1:()=>br,js_5_2_5:()=>Qe,js_5_2_5_1:()=>vr,js_5_2_6:()=>Ze,js_5_2_6_1:()=>wr,js_5_2_7:()=>et,js_5_2_7_1:()=>xr,js_5_2_8:()=>tt,js_5_2_8_1:()=>Cr,js_5_2_9:()=>nt,js_5_2_9_1:()=>Er,js_5_3_1:()=>xt,js_5_3_10:()=>Lt,js_5_3_10_1:()=>ta,js_5_3_11:()=>St,js_5_3_11_1:()=>na,js_5_3_12:()=>At,js_5_3_12_1:()=>oa,js_5_3_13:()=>Nt,js_5_3_13_1:()=>sa,js_5_3_14:()=>Bt,js_5_3_14_1:()=>ra,js_5_3_15:()=>Ht,js_5_3_15_1:()=>aa,js_5_3_16:()=>zt,js_5_3_16_1:()=>ia,js_5_3_17:()=>Rt,js_5_3_17_1:()=>la,js_5_3_18:()=>Ft,js_5_3_18_1:()=>ca,js_5_3_19:()=>Mt,js_5_3_19_1:()=>_a,js_5_3_1_1:()=>Yr,js_5_3_2:()=>Ct,js_5_3_20:()=>Ut,js_5_3_20_1:()=>ha,js_5_3_21:()=>qt,js_5_3_21_1:()=>da,js_5_3_22:()=>Jt,js_5_3_22_1:()=>ua,js_5_3_23:()=>$t,js_5_3_23_1:()=>pa,js_5_3_24:()=>Yt,js_5_3_24_1:()=>ma,js_5_3_25:()=>Wt,js_5_3_25_1:()=>ga,js_5_3_2_1:()=>Wr,js_5_3_3:()=>Et,js_5_3_3_1:()=>Vr,js_5_3_4:()=>kt,js_5_3_4_1:()=>Gr,js_5_3_5:()=>Ot,js_5_3_5_1:()=>Xr,js_5_3_6:()=>Dt,js_5_3_6_1:()=>Kr,js_5_3_7:()=>Tt,js_5_3_7_1:()=>Qr,js_5_3_8:()=>It,js_5_3_8_1:()=>Zr,js_5_3_9:()=>Pt,js_5_3_9_1:()=>ea,js_5_4_1:()=>a,js_5_4_10:()=>en,js_5_4_10_1:()=>xa,js_5_4_11:()=>tn,js_5_4_11_1:()=>Ca,js_5_4_12:()=>nn,js_5_4_12_1:()=>Ea,js_5_4_13:()=>on,js_5_4_13_1:()=>ka,js_5_4_14:()=>p,js_5_4_15:()=>m,js_5_4_16:()=>sn,js_5_4_16_1:()=>Oa,js_5_4_17:()=>rn,js_5_4_17_1:()=>Da,js_5_4_18:()=>g,js_5_4_19:()=>f,js_5_4_2:()=>i,js_5_4_20:()=>an,js_5_4_20_1:()=>Ta,js_5_4_21:()=>ln,js_5_4_21_1:()=>Ia,js_5_4_2a:()=>Vt,js_5_4_2a_1:()=>fa,js_5_4_3:()=>Gt,js_5_4_3_1:()=>ja,js_5_4_4:()=>Xt,js_5_4_4_1:()=>ya,js_5_4_5:()=>Kt,js_5_4_5_1:()=>ba,js_5_4_6:()=>Qt,js_5_4_6_1:()=>va,js_5_4_7:()=>l,js_5_4_8:()=>c,js_5_4_9:()=>Zt,js_5_4_9_1:()=>wa,js_5_5_1:()=>Pa,js_5_5_2:()=>La,js_5_5_3:()=>Sa,js_5_5_4:()=>cn,js_5_5_4_1:()=>Aa,js_5_5_5:()=>_n,js_5_5_5_1:()=>Na,js_6_1_1:()=>hn,js_6_1_1_1:()=>Ba,js_6_1_2:()=>dn,js_6_1_3:()=>un,js_6_1_4:()=>pn,js_6_1_5:()=>mn,js_6_1_5_1:()=>Ha,js_6_2_1:()=>za,js_6_2_10:()=>vn,js_6_2_11:()=>Wa,js_6_2_12:()=>wn,js_6_2_13:()=>xn,js_6_2_13_1:()=>Va,js_6_2_2:()=>Ra,js_6_2_3:()=>gn,js_6_2_3_1:()=>Fa,js_6_2_4:()=>fn,js_6_2_4_1:()=>Ma,js_6_2_5:()=>jn,js_6_2_5_1:()=>Ua,js_6_2_6:()=>yn,js_6_2_6_1:()=>qa,js_6_2_7:()=>bn,js_6_2_7_1:()=>Ja,js_6_2_8:()=>$a,js_6_2_9:()=>Ya,js_6_3_1:()=>Cn,js_6_3_10:()=>Sn,js_6_3_10_1:()=>si,js_6_3_11:()=>An,js_6_3_11_1:()=>ri,js_6_3_12:()=>Nn,js_6_3_12_1:()=>ai,js_6_3_13:()=>Bn,js_6_3_13_1:()=>ii,js_6_3_14:()=>Hn,js_6_3_14_1:()=>li,js_6_3_15:()=>zn,js_6_3_15_1:()=>ci,js_6_3_16:()=>Rn,js_6_3_16_1:()=>_i,js_6_3_1_1:()=>Ga,js_6_3_2:()=>En,js_6_3_2_1:()=>Xa,js_6_3_3:()=>kn,js_6_3_3_1:()=>Ka,js_6_3_4:()=>On,js_6_3_4_1:()=>Qa,js_6_3_5:()=>Dn,js_6_3_5_1:()=>Za,js_6_3_6:()=>Tn,js_6_3_6_1:()=>ei,js_6_3_7:()=>In,js_6_3_7_1:()=>ti,js_6_3_8:()=>Pn,js_6_3_8_1:()=>ni,js_6_3_9:()=>Ln,js_6_3_9_1:()=>oi,js_7_2_1:()=>hc,js_7_2_1_1:()=>dc,js_7_2_2:()=>uc,js_7_2_2_1:()=>pc,js_7_3_1:()=>mc,js_7_3_10:()=>Lc,js_7_3_10_1:()=>Sc,js_7_3_2:()=>gc,js_7_3_2_1:()=>fc,js_7_3_3:()=>jc,js_7_3_3_1:()=>yc,js_7_3_4:()=>bc,js_7_3_4_1:()=>vc,js_7_3_5:()=>wc,js_7_3_5_1:()=>xc,js_7_3_6:()=>Cc,js_7_3_6_1:()=>Ec,js_7_3_7:()=>kc,js_7_3_7_1:()=>Oc,js_7_3_8:()=>Dc,js_7_3_8_1:()=>Tc,js_7_3_9:()=>Ic,js_7_3_9_1:()=>Pc,js_7_4_1:()=>Fn,js_7_4_1_1:()=>Ac,js_7_4_2:()=>Mn,js_7_4_2_1:()=>Nc,js_7_5_1:()=>Bc,js_7_5_1_1:()=>Hc,js_8_1_1:()=>zc,js_8_1_1_1:()=>Rc,js_8_1_2:()=>Un,js_8_1_2_1:()=>Fc,js_8_1_3:()=>Mc,js_8_1_3_1:()=>Uc,js_8_1_4:()=>qc,js_8_1_4_1:()=>Jc,js_8_1_5:()=>$c,js_8_1_5_1:()=>Yc,js_8_1_6:()=>Wc,js_8_1_6_1:()=>Vc,js_8_1_7:()=>Gc,js_8_1_7_1:()=>Xc,js_8_1_8:()=>qn,js_8_1_8_1:()=>Kc,js_8_1_9:()=>Jn,js_8_1_9_1:()=>Qc,js_8_2_1:()=>$n,js_8_2_1_1:()=>Zc,js_8_2_2:()=>Yn,js_8_2_2_1:()=>e_,js_8_2_3:()=>Wn,js_8_2_3_1:()=>t_,js_8_2_4:()=>Vn,js_8_2_4_1:()=>n_,js_8_2_5:()=>Gn,js_8_2_5_1:()=>o_,js_8_2_6:()=>Xn,js_8_2_6_1:()=>s_,js_8_2_7:()=>Kn,js_8_2_7_1:()=>r_,js_8_3_1:()=>a_,js_8_3_10:()=>x_,js_8_3_11:()=>C_,js_8_3_12:()=>E_,js_8_3_12_1:()=>k_,js_8_3_13:()=>O_,js_8_3_13_1:()=>D_,js_8_3_14:()=>T_,js_8_3_15:()=>I_,js_8_3_15_1:()=>P_,js_8_3_16:()=>L_,js_8_3_16_1:()=>S_,js_8_3_1_1:()=>i_,js_8_3_2:()=>l_,js_8_3_2_1:()=>c_,js_8_3_3:()=>__,js_8_3_3_1:()=>h_,js_8_3_4:()=>d_,js_8_3_4_1:()=>u_,js_8_3_5:()=>p_,js_8_3_5_1:()=>m_,js_8_3_6:()=>g_,js_8_3_6_1:()=>f_,js_8_3_7:()=>j_,js_8_3_7_1:()=>y_,js_8_3_8:()=>b_,js_8_3_8_1:()=>v_,js_8_3_9:()=>w_,js_8_4_1:()=>Qn,js_8_4_1_1:()=>A_,js_8_4_2:()=>N_,js_8_4_3:()=>B_,js_8_4_4:()=>H_,js_8_4_5:()=>z_,js_8_4_6:()=>R_,js_8_4_7:()=>F_,js_8_4_8:()=>M_,js_8_4_9:()=>U_,js_8_5_1:()=>Zn,js_8_5_10:()=>lo,js_8_5_10_1:()=>Q_,js_8_5_11:()=>co,js_8_5_11_1:()=>Z_,js_8_5_12:()=>_o,js_8_5_12_1:()=>eh,js_8_5_13:()=>ho,js_8_5_13_1:()=>th,js_8_5_1_1:()=>q_,js_8_5_2:()=>eo,js_8_5_2_1:()=>J_,js_8_5_3:()=>to,js_8_5_3_1:()=>$_,js_8_5_4:()=>no,js_8_5_4_1:()=>Y_,js_8_5_5:()=>oo,js_8_5_5_1:()=>W_,js_8_5_6:()=>so,js_8_5_6_1:()=>V_,js_8_5_7:()=>ro,js_8_5_7_1:()=>G_,js_8_5_8:()=>ao,js_8_5_8_1:()=>X_,js_8_5_9:()=>io,js_8_5_9_1:()=>K_,js_8_6_1:()=>nh,js_8_7_1:()=>oh,js_8_8_1:()=>sh,js_9_2_1:()=>hi,js_9_2_10:()=>Ti,js_9_2_10_1:()=>Ii,js_9_2_11:()=>Pi,js_9_2_11_1:()=>Li,js_9_2_12:()=>Si,js_9_2_12_1:()=>Ai,js_9_2_13:()=>Ni,js_9_2_13_1:()=>Bi,js_9_2_14:()=>Hi,js_9_2_14_1:()=>zi,js_9_2_15:()=>Ri,js_9_2_15_1:()=>Fi,js_9_2_16:()=>Mi,js_9_2_16_1:()=>Ui,js_9_2_17:()=>qi,js_9_2_17_1:()=>Ji,js_9_2_18:()=>$i,js_9_2_18_1:()=>Yi,js_9_2_19:()=>Wi,js_9_2_19_1:()=>Vi,js_9_2_1_1:()=>di,js_9_2_2:()=>ui,js_9_2_20:()=>Gi,js_9_2_20_1:()=>Xi,js_9_2_21:()=>Ki,js_9_2_21_1:()=>Qi,js_9_2_22:()=>Zi,js_9_2_22_1:()=>el,js_9_2_23:()=>tl,js_9_2_23_1:()=>nl,js_9_2_24:()=>ol,js_9_2_24_1:()=>sl,js_9_2_25:()=>rl,js_9_2_25_1:()=>al,js_9_2_26:()=>il,js_9_2_26_1:()=>ll,js_9_2_27:()=>cl,js_9_2_27_1:()=>_l,js_9_2_2_1:()=>pi,js_9_2_3:()=>mi,js_9_2_3_1:()=>gi,js_9_2_4:()=>fi,js_9_2_4_1:()=>ji,js_9_2_5:()=>yi,js_9_2_5_1:()=>bi,js_9_2_6:()=>vi,js_9_2_6_1:()=>wi,js_9_2_7:()=>xi,js_9_2_7_1:()=>Ci,js_9_2_8:()=>Ei,js_9_2_8_1:()=>ki,js_9_2_9:()=>Oi,js_9_2_9_1:()=>Di,js_9_3_1:()=>hl,js_9_3_10:()=>Tl,js_9_3_10_1:()=>Il,js_9_3_11:()=>Pl,js_9_3_11_1:()=>Ll,js_9_3_12:()=>Sl,js_9_3_12_1:()=>Al,js_9_3_13:()=>Nl,js_9_3_13_1:()=>Bl,js_9_3_14:()=>Hl,js_9_3_14_1:()=>zl,js_9_3_15:()=>Rl,js_9_3_15_1:()=>Fl,js_9_3_16:()=>Ml,js_9_3_16_1:()=>Ul,js_9_3_17:()=>ql,js_9_3_17_1:()=>Jl,js_9_3_18:()=>$l,js_9_3_18_1:()=>Yl,js_9_3_19:()=>Wl,js_9_3_19_1:()=>Vl,js_9_3_1_1:()=>dl,js_9_3_2:()=>ul,js_9_3_20:()=>Gl,js_9_3_20_1:()=>Xl,js_9_3_21:()=>Kl,js_9_3_21_1:()=>Ql,js_9_3_22:()=>Zl,js_9_3_22_1:()=>ec,js_9_3_23:()=>tc,js_9_3_23_1:()=>nc,js_9_3_24:()=>oc,js_9_3_24_1:()=>sc,js_9_3_25:()=>rc,js_9_3_25_1:()=>ac,js_9_3_26:()=>ic,js_9_3_26_1:()=>lc,js_9_3_2_1:()=>pl,js_9_3_3:()=>ml,js_9_3_3_1:()=>gl,js_9_3_4:()=>fl,js_9_3_4_1:()=>jl,js_9_3_5:()=>yl,js_9_3_5_1:()=>bl,js_9_3_6:()=>vl,js_9_3_6_1:()=>wl,js_9_3_7:()=>xl,js_9_3_7_1:()=>Cl,js_9_3_8:()=>El,js_9_3_8_1:()=>kl,js_9_3_9:()=>Ol,js_9_3_9_1:()=>Dl,js_9_4_1:()=>cc,js_9_4_1_1:()=>_c});var mo=o(6895),d=o(9299),go=o(767),s=o(4650),fo=o(4214);let jo=(()=>{class t{constructor(n){this.coreService=n}ngOnInit(){this.coreService.sentBookData(go.t)}ngOnDestroy(){}}return t.\u0275fac=function(n){return new(n||t)(s.Y36(fo.p))},t.\u0275cmp=s.Xpm({type:t,selectors:[["app-js-book"]],decls:1,vars:0,template:function(n,po){1&n&&s._UZ(0,"router-outlet")},dependencies:[d.lC]}),t})();function e(t){return`<!DOCTYPE html>\n  <html>\n  <head>\n    <style>\n      html { font-size: 16px; }\n      a { text-decoration: none; }\n    </style>\n    <script src="assets/js/utils.js"><\/script>\n  </head>\n  <body>\n    <script>\n      ${t}\n    <\/script>\n  </body>\n  </html>`}const y="// Log a greeting message\nconsole.log('Hello, world!');",yo=e(y),bo="// Declare a variable named 'x' and initialize it with the value 5\nlet x = 5;",vo="// This is a single-line comment",wo="/* This is a\nmulti-line comment */",xo="// Declare a variable `message` and initialize it with the string 'Hello' \nlet message = 'Hello'; \n\n// Declare a constant `PI` and initialize it with the numeric value 3.14 \nconst PI = 3.14;",Co="// Declare a variable `number` and initialize it with the numeric value 10 \nlet number = 10;        // Number \n\n// Declare a variable `name` and initialize it with the string value 'Jane' \nlet name = 'Jane';      // String \n\n// Declare a variable `isActive` and initialize it with the boolean value true \nlet isActive = true;    // Boolean \n\n// Declare a variable `x` without initializing it, resulting in an undefined value \nlet x;                  // Undefined \n\n// Declare a variable `y` and initialize it with the null value to represent the absence of any object value \nlet y = null;           // Null",Eo="// Declare an object `obj` with two properties: `name` with the value 'John' and `age` with the value 30 \nlet obj = {name: 'John', age: 30};  // Object \n\n// Declare an array `array` containing three numeric elements: 1, 2, and 3 \nlet array = [1, 2, 3];              // Array",b="// Declare a constant `userAge` and initialize it with the numeric value 25 \nconst userAge = 25; \n\n// Check if `userAge` is greater than or equal to 18 \nif (userAge >= 18) { \n  // If the condition is true, log 'User is an adult.' \n  console.log('User is an adult.'); \n} else { \n  // If the condition is false, log 'User is a minor.' \n  console.log('User is a minor.'); \n}",ko=e(b),v="// Start a for loop with the initialization of a variable `i` set to 0 \nfor (let i = 0; i < 5; i++) { \n  // For each iteration, check if `i` is less than 5; if true, execute the loop body \n  console.log(i); // Log the current value of `i` \n  // After each iteration, increment `i` by 1 using `i++` \n}",Oo=e(v),w="// Define a function named `greet` that takes one parameter `name` \nfunction greet(name) { \n  // Return a greeting string concatenated with the `name` parameter \n  return 'Hello ' + name; \n}",x="console.log(greet('Alice'));  // Output: Hello Alice",Do=e(`${w} ${x}`),To="document.getElementById('myBtn').onclick = function() {\n  // Action to perform on button click\n};",C="// Define a function named `func` \nfunction func() { \n  'use strict'; // Enable strict mode for this function scope \n  \n  // Attempt to assign a value to `x` without declaring it first \n  x = 3.14;  // This will cause an error because `x` is not declared \n} \n\n// Call the function `func`, which will attempt to execute its body \nfunc();",Io=e(`try {\n  ${C}\n} catch (err) {\n  console.error(err)\n}`),Po="// Declare a variable `age` and initialize it with the numeric value 35 \nlet age = 35;",Lo="// Declare a variable `name` and initialize it with the string value 'John' \nlet name = 'John';",So="// Declare a variable `isActive` and initialize it with the boolean value `true` \nlet isActive = true;",Ao="// Declare a variable `car` and initialize it with the `null` value \nlet car = null;",No="// Declare a variable `address` and initialize it with the `undefined` value \nlet address = undefined;",Bo="// Declare a variable `id` and initialize it with a unique symbol \nlet id = Symbol();",Ho="// Declare an object `person` with properties `name` set to 'John' and `age` set to 25 \nlet person = { name: 'John', age: 25 };",zo="// Declare a variable `bigNumber` and initialize it with a BigInt representation of 123456789 \nlet bigNumber = BigInt(123456789);",Ro="// Declare a variable `age` and initialize it with the numeric value 25 \nlet age = 25; \n\n// Declare a variable `str` and initialize it with a concatenated string that includes the `age` variable \nlet str = 'John is ' + age + ' years old.' // returns 'John is 25 years old.'",Fo="// Declare a variable `age` and initialize it with the numeric value 25 \nlet age = 25;  \n\n// Declare a variable `typeOfAge` and use the `typeof` operator to get the data type of the `age` variable \nlet typeOfAge = typeof age; // returns 'number'",Mo="// Declare an object `person` with properties `name` set to 'John' and `age` set to 25 \nlet person = { name: 'John', age: 25 }; \n\n// Declare a variable `isInstance` and use the `instanceof` operator to check if `person` is an instance of `Object` \nlet isInstance = person instanceof Object; // returns true",E="// Using the assignment operator (`=`) to assign a value to the variable `x` \nlet x = 5; \n\n// Log the initial value of `x` \nconsole.log('Initial value of x:', x); // Output: 5",Uo=e(E),k="// Using the assignment operator (`=`) to assign the value 5 to the variable `x` \nlet x = 5; \n\n// Additional assignment operators: `+=`, `-=`, `*=`, `/=`, and `%=` \n\n// Adds 3 to `x` and updates `x` with the new value \nx += 3; // `x` is now `x` + 3 \nconsole.log('x += 3:', x); // Output: 8 \n\n// Subtracts 2 from `x` and updates `x` with the new value \nx -= 2; // `x` is now `x` - 2 \nconsole.log('x -= 2:', x); // Output: 6 \n\n// Multiplies `x` by 4 and updates `x` with the new value \nx *= 4; // `x` is now `x` * 4 \nconsole.log('x *= 4:', x); // Output: 24 \n\n// Divides `x` by 3 and updates `x` with the new value \nx /= 3; // `x` is now `x` / 3 \nconsole.log('x /= 3:', x); // Output: 8 \n\n// Calculates `x` modulo 5 (remainder of `x` divided by 5) and updates `x` with the new value \nx %= 5; // `x` is now `x` % 5 \nconsole.log('x %= 5:', x); // Output: 3",qo=e(k),O="// Initialize two variables `a` and `b` with numeric values 10 and 4, respectively \nlet a = 10; \nlet b = 4; \n\n// Addition: Calculate the sum of `a` and `b` \nlet sum = a + b; \nconsole.log('Addition:', sum); // Output: 14 \n\n// Subtraction: Calculate the difference between `a` and `b` \nlet difference = a - b; \nconsole.log('Subtraction:', difference); // Output: 6 \n\n// Multiplication: Calculate the product of `a` and `b` \nlet product = a * b; \nconsole.log('Multiplication:', product); // Output: 40 \n\n// Division: Calculate the quotient of `a` divided by `b` \nlet quotient = a / b; \nconsole.log('Division:', quotient); // Output: 2.5",Jo=e(O),D="// Initialize two variables `a` and `b` with numeric values 10 and 4, respectively \nlet a = 10; \nlet b = 4; \n\n// Modulo: Calculate the remainder of `a` divided by `b` \nlet remainder = a % b; \nconsole.log('Modulo:', remainder); // Output: 2",$o=e(D),T="// Increment operation \n// Initialize a variable `x` with the numeric value 5 \nlet x = 5; \nx++; // Increment the value of `x` by 1 \nconsole.log('Increment:', x); // Output: 6 \n\n// Decrement operation \n// Initialize a variable `y` with the numeric value 8 \nlet y = 8; \ny--; // Decrement the value of `y` by 1 \nconsole.log('Decrement:', y); // Output: 7",Yo=e(T),I="// Equal to (`==`) comparison \n// Initialize variables `a` with 5 and `b` with '5' (string) \nlet a = 5; \nlet b = '5'; \n// Check if `a` is equal to `b` (type conversion allowed) \nlet isEqual = a == b; \nconsole.log('Equal to (`==`):', isEqual); // Output: true \n\n// Not equal to (`!=`) comparison \n// Initialize variables `c` with 10 and `d` with 7 \nlet c = 10; \nlet d = 7; \n// Check if `c` is not equal to `d` \nlet notEqual = c != d; \nconsole.log('Not equal to (`!=`):', notEqual); // Output: true \n\n// Strict equal to (`===`) comparison \n// Initialize variables `e` and `f` both with the numeric value 5 \nlet e = 5; \nlet f = 5; \n// Check if `e` is strictly equal to `f` (no type conversion) \nlet isStrictEqual = e === f; \nconsole.log('Strict equal to (`===`):', isStrictEqual); // Output: true \n\n// Strict not equal to (`!==`) comparison \n// Initialize variables `g` with 10 and `h` with '10' (string) \nlet g = 10; \nlet h = '10'; \n// Check if `g` is strictly not equal to `h` (considering type) \nlet isStrictNotEqual = g !== h; \nconsole.log('Strict not equal to (`!==`):', isStrictNotEqual); // Output: true",Wo=e(I),P="// Greater than (`>`) comparison \n// Initialize variables `i` with 8 and `j` with 5 \nlet i = 8; \nlet j = 5; \n// Check if `i` is greater than `j` \nlet isGreater = i > j; \nconsole.log('Greater than (`>`):', isGreater); // Output: true \n\n// Less than (`<`) comparison \n// Initialize variables `k` with 3 and `l` with 6 \nlet k = 3; \nlet l = 6; \n// Check if `k` is less than `l` \nlet isLess = k < l; \nconsole.log('Less than (`<`):', isLess); // Output: true \n\n// Greater than or equal to (`>=`) comparison \n// Initialize variables `m` and `n` both with the numeric value 7 \nlet m = 7; \nlet n = 7; \n// Check if `m` is greater than or equal to `n` \nlet isGreaterOrEqual = m >= n; \nconsole.log('Greater than or equal to (`>=`):', isGreaterOrEqual); // Output: true \n\n// Less than or equal to (`<=`) comparison \n// Initialize variables `o` with 9 and `p` with 12 \nlet o = 9; \nlet p = 12; \n// Check if `o` is less than or equal to `p` \nlet isLessOrEqual = o <= p; \nconsole.log('Less than or equal to (`<=`):', isLessOrEqual); // Output: true",Vo=e(P),L="// Logical AND (`&&`) operation \n// Initialize variables `a` and `b` both with the boolean value true \nlet a = true; \nlet b = true; \n// Use the logical AND operator to determine the conjunction of `a` and `b` \nlet resultAND = a && b; \nconsole.log('Logical AND (`&&`):', resultAND); // Output: true",Go=e(L),S="// Logical OR (`||`) operation \n// Initialize variables `c` with the boolean value true and `d` with false \nlet c = true; \nlet d = false; \n// Use the logical OR operator to determine the disjunction of `c` and `d` \nlet resultOR = c || d; \nconsole.log('Logical OR (`||`):', resultOR); // Output: true",Xo=e(S),A="// Logical NOT (`!`) operation \n// Initialize variable `e` with the boolean value true \nlet e = true; \n// Use the logical NOT operator to negate the value of `e` \nlet resultNOT = !e; \nconsole.log('Logical NOT (`!`):', resultNOT); // Output: false",Ko=e(A),N="// Initialize a variable `num` with the numeric value 10 \nlet num = 10; \n\n// Use the ternary operator to check if `num` is even. If `num` % 2 equals 0, return 'Even'; otherwise, return 'Odd' \nlet result = num % 2 === 0 ? 'Even' : 'Odd'; \n\n// Log the result of the ternary operation \nconsole.log(result); // Output: 'Even'",Qo=e(N),B="// Without using the grouping operator \nlet result1 = 10 + 5 * 2; // 10 + (5 * 2) due to operator precedence, multiplication before addition \nconsole.log('Result 1:', result1); // Output: 20 \n\n// Using the grouping operator \nlet result2 = (10 + 5) * 2; // (10 + 5) * 2, addition inside parentheses performed first, then multiplication \nconsole.log('Result 2:', result2); // Output: 30",Zo=e(B),H="// Bitwise AND (`&`) \nlet a = 5; // Binary: 0101 \nlet b = 3; // Binary: 0011 \nlet resultAND = a & b; // Performs bitwise AND on a and b, result in binary: 0001 (Decimal: 1) \nconsole.log('Bitwise AND (`&`):', resultAND); // Output: 1 \n\n// Bitwise OR (`|`) \nlet c = 5; // Binary: 0101 \nlet d = 3; // Binary: 0011 \nlet resultOR = c | d; // Performs bitwise OR on c and d, result in binary: 0111 (Decimal: 7) \nconsole.log('Bitwise OR (`|`):', resultOR); // Output: 7 \n\n// Bitwise XOR (`^`) \nlet e = 5; // Binary: 0101 \nlet f = 3; // Binary: 0011 \nlet resultXOR = e ^ f; // Performs bitwise XOR on e and f, result in binary: 0110 (Decimal: 6) \nconsole.log('Bitwise XOR (`^`):', resultXOR); // Output: 6 \n\n// Bitwise NOT (`~`) \nlet g = 5; // Binary: 0101 \nlet resultNOT = ~g; // Performs bitwise NOT on g, result in binary: 1010 (Decimal: -6) \nconsole.log('Bitwise NOT (`~`):', resultNOT); // Output: -6 \n\n// Bitwise left shift (`<<`) \nlet h = 5; // Binary: 0101 \nlet resultLeftShift = h << 2; // Shifts h left by 2, result in binary: 010100 (Decimal: 20) \nconsole.log('Bitwise left shift (`<<`):', resultLeftShift); // Output: 20 \n\n// Bitwise right shift (`>>`) \nlet i = 16; // Binary: 0001 0000 \nlet resultRightShift = i >> 2; // Shifts i right by 2, preserving sign, result in binary: 0000 0100 (Decimal: 4) \nconsole.log('Bitwise right shift (`>>`):', resultRightShift); // Output: 4 \n\n// Bitwise unsigned right shift (`>>>`) \nlet j = -16; // Two's complement binary: 1111 1111 1111 1111 1111 1111 1111 0000 \nlet resultUnsignedRightShift = j >>> 2; // Shifts j right by 2, filling with zeros, result in binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820) \nconsole.log('Bitwise unsigned right shift (`>>>`):', resultUnsignedRightShift); // Output: 1073741820",es=e(H),ts="if (condition) {\n  // Code to execute if condition is true\n}",z="// Initialize a variable `score` with the numeric value 75 \nlet score = 75; \n\n// Check if `score` is greater than 70 \nif (score > 70) { \n  // If the condition is true, log 'Pass' \n  console.log('Pass'); \n}",ns=e(z),os="if (condition) {\n  // Code to execute if condition is true\n} else {\n  // Code to execute if condition is false\n}",R="// Initialize a variable `score` with the numeric value 65 \nlet score = 65; \n\n// Check if `score` is greater than 70 \nif (score > 70) { \n  // If the condition is true, log 'Pass' \n  console.log('Pass'); \n} else { \n  // If the condition is false, log 'Fail' \n  console.log('Fail'); \n}",ss=e(R),rs="if (condition1) {\n  // Code to execute if condition1 is true\n} else if (condition2) {\n  // Code to execute if condition2 is true\n} else {\n  // Code to execute if both condition1 and condition2 are false\n}",F="// Initialize a variable `score` with the numeric value 85 \nlet score = 85; \n\n// Check if `score` is greater than or equal to 90 \nif (score >= 90) { \n  // If the condition is true, log 'Grade A' \n  console.log('Grade A'); \n} else if (score >= 80) { \n  // If `score` is less than 90 but greater than or equal to 80, log 'Grade B' \n  console.log('Grade B'); \n} else { \n  // If `score` is less than 80, log 'Grade below C' \n  console.log('Grade below C'); \n}",as=e(F),is="switch(expression) {\n  case x:\n    // Code to execute if expression equals x\n    break;\n  case y:\n    // Code to execute if expression equals y\n    break;\n  default:\n    // Code to execute if expression doesn't match any case\n}",M="// Initialize a variable `fruit` with the string value 'Apple' \nlet fruit = 'Apple'; \n\n// Use a switch statement to perform different actions based on the value of `fruit` \nswitch(fruit) { \n  case 'Banana': // If `fruit` is 'Banana' \n    console.log('Yellow fruit'); // Output: 'Yellow fruit' \n    break; // Exit the switch statement \n  case 'Apple': // If `fruit` is 'Apple' \n    console.log('Red or green fruit'); // Output: 'Red or green fruit' \n    break; // Exit the switch statement \n  default: // If `fruit` does not match any case \n    console.log('Unknown fruit'); // Output: 'Unknown fruit' \n} \n\n// Since `fruit` is 'Apple', will log 'Red or green fruit'.",ls=e(M),cs="condition ? expressionIfTrue : expressionIfFalse;",U="// Initialize a variable `age` with the numeric value 20 \nlet age = 20; \n\n// Use the ternary operator to assign 'Adult' to `role` if `age` is 18 or older, otherwise 'Child' \nlet role = age >= 18 ? 'Adult' : 'Child'; \n\n// Log the value of `role` \nconsole.log(role); // Output: 'Adult'",_s=e(U),hs="obj?.prop;       // Accessing property\nobj?.[expr];     // Accessing property with expression\nfunc?.(...args); // Calling a function (if it exists)",q="// Initialize an object `user` with a `name` property set to 'Alice' and an `address` property set to null \nlet user = { \n  name: 'Alice', \n  address: null \n}; \n\n// Use optional chaining to safely access `street` property of `address` within `user` \n// If `user` or `address` is nullish (`null` or `undefined`), `streetName` will be `undefined` without causing an error \nlet streetName = user?.address?.street; // No error, returns undefined \n\n// Log the value of `streetName`, which is `undefined` \nconsole.log(streetName); // Output: undefined",ds=e(q),us="leftExpr ?? rightExpr;",J="// Initialize a variable `inputName` with the value null \nlet inputName = null; \n\n// Use the nullish coalescing operator to assign `inputName` to `userName` if `inputName` is not null or undefined, \n// otherwise assign 'Anonymous' \nlet userName = inputName ?? 'Anonymous'; // Since `inputName` is null, `userName` will be 'Anonymous' \n\n// Log the value of `userName`, which is 'Anonymous' \nconsole.log(userName); // Output: 'Anonymous'",ps=e(J),ms="for (initialization; condition; increment) {\n  // Code to be executed\n}",$="// Initialize a `for` loop with a variable `i` starting at 0 \nfor (let i = 0; i < 5; i++) { \n  // For each iteration, check if `i` is less than 5 \n  // Log the current value of `i` \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment `i` by 1 after each iteration \n}",gs=e($),fs="while (condition) {\n  // Code to be executed\n}",Y="// Initialize a variable `i` with the value 0 \nlet i = 0; \n\n// Start a `while` loop that continues as long as `i` is less than 5 \nwhile (i < 5) { \n  // Log the current value of `i` \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment `i` by 1 after each iteration to avoid an infinite loop \n  i++; \n}",js=e(Y),ys="do {\n  // Code to be executed\n} while (condition);",W="// Initialize a variable `i` with the value 0 \nlet i = 0; \n\n// Start a `do-while` loop \ndo { \n  // Log the current value of `i` \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment `i` by 1 after logging \n  i++; \n} while (i < 5); // Continue the loop as long as `i` is less than 5",bs=e(W),vs="for (key in object) {\n  // Code to be executed\n}",V="// Define a constant object `person` with properties `firstName` and `lastName` \nconst person = {firstName: 'John', lastName: 'Doe'}; \n\n// Start a `for...in` loop to iterate over each property (key) in the `person` object \nfor (let key in person) { \n  // Concatenate the key and its corresponding value from the `person` object and log it \n  console.log(key + ': ' + person[key]); // This will log 'firstName: John' and 'lastName: Doe' on separate lines \n}",ws=e(V),xs="for (value of iterable) {\n  // Code to be executed\n}",G="// Define an array `colors` with the elements 'Red', 'Green', and 'Blue' \nlet colors = ['Red', 'Green', 'Blue']; \n\n// Start a `for...of` loop to iterate over each element in the `colors` array \nfor (let color of colors) { \n  // Log the current element (`color`) \n  console.log(color); // This will log 'Red', 'Green', and 'Blue' on separate lines \n}",Cs=e(G),u="// Define a function named `greet` that takes one parameter `name` \nfunction greet(name) { \n  // Return a greeting string concatenated with the `name` parameter \n  return 'Hello ' + name; \n}",X="// Define a constant `square` assigned to an anonymous function that takes one parameter `number` \nconst square = function(number) { \n  // Return the square of `number` by multiplying it by itself \n  return number * number; \n};",K="// Define a constant `sum` assigned to an arrow function that takes two parameters `a` and `b` \nconst sum = (a, b) => a + b;",Q="// Define `sum` to accumulate total of any number of arguments \nfunction sum(...numbers) { \n  // Sum up numbers using `reduce` method \n  return numbers.reduce((total, num) => total + num, 0); \n}",Z="// Define `greet` function with object destructuring for `name` and `age` from the parameter object \nfunction greet({ name, age }) { \n  // Use template literals to return a personalized greeting message \n  return `Hello, my name is ${name} and I am ${age} years old.`; \n}",ee="// Define `setCoordinates` function with array destructuring for `x` and `y` from the parameter array \nfunction setCoordinates([x, y]) { \n  // Use template literals to return formatted coordinates \n  return `X: ${x}, Y: ${y}`; \n}",te="// Calls the `greet` function with 'Alice' as an argument and logs the greeting message \nconsole.log(greet('Alice')); // Calls the greet function with 'Alice' as an argument \n\n// Calls the `square` function with 4 as an argument and logs the squared result \nconsole.log(square(4)); // Calls the square function with 4 as an argument \n\n// Calls the `sum` function with 5 and 10 as arguments and logs the sum of the two numbers \nconsole.log(sum(5, 10)); // Calls the sum function with 5 and 10 as arguments",Es=e(`${u} ${X} ${K} ${te}`),ne="// Calls the `sum` function with 1, 2, 3, and 4 as arguments and logs the sum of these numbers \nconsole.log(sum(1, 2, 3, 4)); // Output: 10",ks=e(`${Q} ${ne}`),oe="// Call the `greet` function with an object containing `name` and `age` properties and log the greeting message \nconsole.log(greet({ name: 'Alice', age: 30 })); // Output: Hello, my name is Alice and I am 30 years old.",Os=e(`${Z} ${oe}`),se="// Calls the `setCoordinates` function with an array containing two elements (10, 20) and logs the formatted coordinates \nconsole.log(setCoordinates([10, 20])); // Output: X: 10, Y: 20",Ds=e(`${ee} ${se}`),re="// Define `processUserInput` with callback parameter \nfunction processUserInput(callback) { \n  // Prompt user for name \n  let name = prompt('Please enter your name.'); \n  // Execute callback with `name` \n  console.log(callback(name)); \n} \n\n// Invoke `processUserInput` with `greet` callback \nprocessUserInput(greet); // Use `greet` as callback",Ts=e(`${u} ${re}`),ae="// Define and immediately invoke an anonymous function to create a private scope \n(function() { \n  // Declare a variable `privateVar` within the function's scope, making it private \n  let privateVar = 'I am private'; \n  // Log the value of `privateVar`, accessible only within this function \n  console.log(privateVar);  // Output: 'I am private' \n})(); // The function is invoked immediately after being defined",Is=e(ae),ie="// Declare a global variable `globalVar` \nlet globalVar = 'I am global'; \n\n// Define a function `testScope` \nfunction testScope() { \n  // Log the value of `globalVar`, demonstrating it's accessible within this function \n  console.log(globalVar); // Accessible here \n} \n\n// Call `testScope`, which will access and log the value of `globalVar` \ntestScope(); \n\n// Log the value of `globalVar`, demonstrating it's also accessible outside the function \nconsole.log(globalVar); // Also accessible here",Ps=e(ie),le="// Define `testFunctionScope` function \nfunction testFunctionScope() { \n  // Declare local variable `localVar` \n  let localVar = 'I am local to testFunctionScope'; \n  // Log `localVar` within its function scope \n  console.log(localVar); // Accessible here \n} \n\n// Invoke `testFunctionScope` to log `localVar` \ntestFunctionScope(); \n\n// Try accessing `localVar` outside its scope \ntry { \n  console.log(localVar); // Causes `ReferenceError` \n} catch (err) { \n  // Handle error when `localVar` is accessed outside scope \n  console.error(err); // Logs error \n}",Ls=e(le),ce="// Use an if statement to create a block scope \nif (true) { \n  // Declare a block-scoped variable `blockScopedVar` using `let` \n  let blockScopedVar = 'I am block-scoped'; \n  // Log the value of `blockScopedVar`, showing it's accessible within this block \n  console.log(blockScopedVar); // Accessible here \n} \n\n// Attempt to access `blockScopedVar` outside its block, expecting a `ReferenceError` \ntry { \n  console.log(blockScopedVar); // Attempt to log `blockScopedVar` outside its block \n} catch (err) { \n  // Catch and log the error \n  console.error(err); // Expected error: blockScopedVar is not defined \n}",Ss=e(ce),_e="// Define `outerFunction` with one parameter \nfunction outerFunction(outerVariable) { \n  // Return a closure `innerFunction` with one parameter \n  return function innerFunction(innerVariable) { \n      // Log `outerVariable`, accessible due to closure \n      console.log('Outer Variable: ' + outerVariable); \n      // Log `innerVariable`, local to `innerFunction` \n      console.log('Inner Variable: ' + innerVariable); \n  } \n} \n\n// Create `newFunction` by calling `outerFunction` with 'outside' \nconst newFunction = outerFunction('outside'); \n// Invoke `newFunction` (closure) with 'inside', accessing both variables \nnewFunction('inside');",As=e(_e),he="// Define an object `person` with a `name` property and a `greet` method \nconst person = { \n  name: 'Alice', \n  // Define `greet` method that logs a greeting using `this.name` \n  greet: function() { \n    console.log('Hello, ' + this.name); \n  } \n}; \n\n// Invoke the `greet` method of `person`. `this` within `greet` refers to the `person` object \nperson.greet(); // Output: Hello, Alice",Ns=e(he),de="// Declare a global variable `hello` \nvar hello = 'Hello'; \n\n// Define a function `showThis` to log `this.hello` \nfunction showThis() { \n  console.log(this.hello); \n} \n\n// Invoke `showThis`, where `this` refers to the global object, or `undefined` in strict mode \nshowThis(); // Output: Hello in non-strict mode, undefined in strict mode",Bs=e(de),ue="// Define a constructor function `Person` with a `name` parameter \nfunction Person(name) { \n  this.name = name; // Assign the `name` parameter to the `name` property of the new object \n} \n\n// Create a new instance of `Person` named `bob` \nconst bob = new Person('Bob'); \n\n// Log the `name` property of `bob`. `this` within `Person` refers to the new object. \nconsole.log(bob.name); // Output: Bob",Hs=e(ue),pe="// Define a function `greet` that logs a greeting message \nfunction greet() { \n  console.log('Hello, ' + this.name); // `this` will refer to the object passed to `call` \n} \n\n// Create an object `user` with a `name` property \nconst user = { name: 'Sarah' }; \n\n// Use `greet.call(user)` to invoke `greet` with `this` set to `user` \ngreet.call(user); // Output: Hello, Sarah",zs=e(pe),me="// Define a `team` object with properties (`members` and `name`), and a `greet` method \nconst team = { \n  members: ['Jane', 'Bill'], \n  teamName: 'Super Squad', \n  teamGreet: function() { \n    // Use `forEach` to iterate over `members` array \n    this.members.forEach((member) => { \n      // Inside arrow function, `this` still refers to `team` object due to lexical scoping \n      console.log(member + ' is part of ' + this.teamName); \n    }); \n  } \n \n}; \n\n// Call `teamGreet` method of `team` object \nteam.teamGreet(); // Log each member's name with the `teamName`, demonstrating `this` refers to `team`",Rs=e(me),ge="// Define a function `sum` without defined parameters \nfunction sum() { \n  let total = 0; // Initialize `total` to accumulate the sum \n  // Iterate over `arguments` object which contains all passed arguments \n  for (let i = 0; i < arguments.length; i++) { \n    total += arguments[i]; // Add each argument to `total` \n  } \n  return total; // Return the sum of all arguments \n} \n\n// Call `sum` with four numbers and log the result \nconsole.log(sum(1, 2, 3, 4)); // Output: 10",Fs=e(ge),fe="// Define a function `greet` with parameters for greeting and sign-off messages \nfunction greet(greeting, signOff) { \n  // Log a message using the parameters and `this.name` \n  console.log(greeting + ', ' + this.name + '. ' + signOff); \n} \n\n// Create an object `user` with a `name` property \nconst user = { name: 'Alice' }; \n\n// Use `greet.call(user, 'Hello', 'Have a nice day')` to invoke `greet` with `user` as `this` \n// and 'Hello' and 'Have a nice day' as arguments \ngreet.call(user, 'Hello', 'Have a nice day'); // Output: 'Hello, Alice. Have a nice day'",Ms=e(fe),je="// Define a function `sum` without defined parameters \nfunction sum() { \n  // Use `reduce` with `call` to iterate over `arguments`, accumulating a total sum \n  return Array.prototype.reduce.call(arguments, (acc, num) => acc + num, 0); \n} \n\n// Create an array of numbers \nconst numbers = [1, 2, 3, 4, 5]; \n\n// Use `sum.apply(null, numbers)` to invoke `sum` with an array of numbers as arguments \nconsole.log(sum.apply(null, numbers)); // Output: 15",Us=e(je),ye="// Define a function `multiply` that takes two parameters and returns their product \nfunction multiply(a, b) { \n  return a * b; \n} \n\n// Use `bind` to create a new function `double` by fixing the first argument of `multiply` to 2 \nconst double = multiply.bind(null, 2); // `null` is used for the `this` context, which `multiply` doesn't use \n\n// Call `double` with 5 as the argument, which acts as the second parameter to `multiply` \nconsole.log(double(5)); // Output: 10",qs=e(ye),Js="const functionName = (parameters) => {\n  // Function body\n};",be="// Define an arrow function `greet` that returns 'Hello' \nconst greet = () => 'Hello'; \n\n// Log the result of calling `greet` \nconsole.log(greet()); // Output: 'Hello'",$s=e(be),ve="// Define an arrow function `square` that takes one parameter and returns its square \nconst square = number => number * number; \n\n// Log the result of calling `square` with 3 \nconsole.log(square(3)); // Output: 9",Ys=e(ve),we="// Define an arrow function `add` that takes two parameters and returns their sum \nconst add = (a, b) => a + b; \n\n// Log the result of calling `add` with 1 and 2 \nconsole.log(add(1, 2)); // Output: 3",Ws=e(we),xe="// Define an arrow function `multiply` that takes two parameters and returns their product \nconst multiply = (a, b) => a * b; \n\n// Log the result of calling `multiply` with 2 and 3 \nconsole.log(multiply(2, 3)); // Output: 6",Vs=e(xe),Ce="// Define an arrow function `complexFunction` that calculates the sum of `a` and `b`, then doubles it \nconst complexFunction = (a, b) => { \n  const result = a + b; // Calculate the sum of `a` and `b` \n  return result * 2; // Return the doubled sum \n}; \n\n// Log the result of calling `complexFunction` with 1 and 2 \nconsole.log(complexFunction(1, 2)); // Output: 6",Gs=e(Ce),Ee="// Define a `Timer` class with a constructor that increments `seconds` after 1 second \nclass Timer { \n  constructor() { \n    this.seconds = 0; // Initialize seconds to 0 \n    setTimeout(() => { \n      this.seconds += 100; // Use arrow function to ensure `this` refers to Timer instance \n    }, 1000); // Increment after 1 second \n  } \n} \n\n// Create a new `Timer` instance \nlet timer = new Timer(); \n\n// Log the `seconds` property of the timer instance after 2 seconds \nsetTimeout(() => { \n  console.log(timer.seconds); // Expected output: 100 \n}, 2000);",Xs=e(Ee),ke="// Define an arrow function `showArgs` that takes a variable number of arguments and returns them as an array \nconst showArgs = (...args) => args; \n\n// Log the array returned by calling `showArgs` with multiple arguments \nconsole.log(showArgs(1, 2, 3, 4, 5)); // Output: [1, 2, 3, 4, 5]",Ks=e(ke),Oe="// Define an array of numbers and use map to calculate their squares\nconst numbers = [1, 2, 3, 4, 5];\nconst squares = numbers.map(number => number * number);\n\n// Log the array of squared numbers\nconsole.log(squares); // Output: [1, 4, 9, 16, 25]",Qs=e(Oe),De="// Declare a string primitive using single quotes \nlet stringPrimitive1 = 'This is a string'; \n\n// Declare a string primitive using double quotes \nlet stringPrimitive2 = \"This is also a string\"; \n\n// Declare a string primitive using backticks for template literals \nlet stringPrimitive3 = `This is a string using template literals`;",Te="// Declare a string object using the `String` constructor \nlet stringObject = new String('This is a string object');",Ie="// Log the type of a string primitive\nconsole.log(typeof stringPrimitive1); // Output: 'string'\n\n// Log the type of a string object\nconsole.log(typeof stringObject); // Output: 'object'\n",Zs=e(`${De} ${Te} ${Ie}`),Pe="// Compare two string primitives for equality\nconsole.log('Hello' === 'Hello'); // Output: true\n\n// Compare two string objects for equality\nconsole.log(new String('Hello') === new String('Hello')); // Output: false",er=e(Pe),Le="// Log the length of the string 'Hello'\nconsole.log('Hello'.length); // Output: 5",tr=e(Le),Se="// Log the character at index 1 of the string 'Hello'\nconsole.log('Hello'.charAt(1)); // Output: e",nr=e(Se),Ae="// Concatenate 'Hello ' with 'World!' and log the result\nconsole.log('Hello '.concat('World!')); // Output: Hello World!",or=e(Ae),Ne="// Check if 'Hello' includes the substring 'ell' and log the result\nconsole.log('Hello'.includes('ell')); // Output: true",sr=e(Ne),Be="// Find the index of 'e' in the string 'Hello' and log the result\nconsole.log('Hello'.indexOf('e')); // Output: 1",rr=e(Be),He="// Use the `slice` method to extract and log the substring from index 1 to 3 of 'Hello' \nconsole.log('Hello'.slice(1, 3)); // Output: el",ar=e(He),ze="// Split the string 'a,b,c' by ',' and log the resulting array\nconsole.log('a,b,c'.split(',')); // Output: ['a', 'b', 'c']",ir=e(ze),Re="// Convert 'Hello' to lowercase and log the result \nconsole.log('Hello'.toLowerCase()); // Output: hello",lr=e(Re),Fe="// Convert 'Hello' to uppercase and log the result\nconsole.log('Hello'.toUpperCase()); // Output: HELLO",cr=e(Fe),Me="// Remove whitespace from both ends of '  Hello  ' and log the result\nconsole.log('  Hello  '.trim()); // Output: Hello",_r=e(Me),Ue="// Concatenate 'Hello, ' and 'world!' into a single string `greeting` \nlet hello = 'Hello, '; \nlet world = 'world!'; \nlet greeting = hello + world; \n\n// Log the concatenated string \nconsole.log(greeting); // Output: Hello, world!",hr=e(Ue),qe="// Initialize `message` with 'Hello, ' and then append 'world!' using `+=` operator \nlet message = 'Hello, '; \nmessage += 'world!'; \n\n// Log the concatenated message \nconsole.log(message); // Output: Hello, world!",dr=e(qe),Je="// Define a variable `name` with the value 'Alice' \nlet name = 'Alice'; \n// Create a greeting message using template literals and embed the `name` variable \nlet greeting = `Hello, ${name}!`; \n\n// Log the greeting \nconsole.log(greeting); // Output: Hello, Alice!",ur=e(Je),$e="// Iterate over each character of the string `text` using a `for...of` loop \nlet text = 'Hello'; \n\nfor (const char of text) { \n  // Log each character of `text` \n  console.log(char); \n}",pr=e($e),Ye="// Destructure the string `greeting` into individual characters \nlet greeting = 'Hello'; \nlet [firstChar, secondChar, thirdChar, fourthChar, fifthChar] = greeting; \n\n// Log each character obtained through destructuring \nconsole.log(firstChar);  // Output: H \nconsole.log(secondChar); // Output: e \nconsole.log(thirdChar);  // Output: l \nconsole.log(fourthChar); // Output: l \nconsole.log(fifthChar);  // Output: o",mr=e(Ye),We="// Destructure the string `str` into its first two characters and the rest of the characters \nlet str = 'Hello, world!'; \nlet [firstChar, secondChar, ...restOfChars] = str; \n\n// Log the first and second characters \nconsole.log(firstChar);  // Output: H \nconsole.log(secondChar); // Output: e \n// Log the array containing the rest of the characters \nconsole.log(restOfChars); // Output: ['l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!']",gr=e(We),Ve="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n// Declare an empty array `emptyArray` \nlet emptyArray = []; \n\n// Log the contents of the `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana', 'cherry'] \n// Log the contents of the `numbers` array \nconsole.log(numbers); // Output: [1, 2, 3, 4, 5] \n// Log the contents of the `emptyArray`, showing it's empty \nconsole.log(emptyArray); // Output: []",fr=e(Ve),Ge="// Declare an array `colors` using the `Array` constructor with three string elements \nlet colors = new Array('red', 'green', 'blue'); \n\n// Log the contents of the `colors` array \nconsole.log(colors); // Output: ['red', 'green', 'blue']",jr=e(Ge),Xe="// Declare an array `arrayOfUndefined` with 3 empty slots using the `Array` constructor \nlet arrayOfUndefined = new Array(3); \n\n// Log the contents of the `arrayOfUndefined` array, which are uninitialized (thus 'undefined') \nconsole.log(arrayOfUndefined); // Output: [undefined, undefined, undefined]",yr=e(Xe),Ke="// Declare an array `mixedArray` containing mixed data types: number, string, object, and another array \nlet mixedArray = [1, 'hello', { a: 1, b: 2 }, [2, 3, 4]]; \n\n// Log the contents of the `mixedArray` \nconsole.log(mixedArray); // Output: [1, 'hello', { a: 1, b: 2 }, [2, 3, 4]]",br=e(Ke),Qe="// Declare a 2D array `matrix` representing a 3x3 matrix \nlet matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; \n\n// Access the element at the first row and first column of `matrix` \nlet firstRowFirstCol = matrix[0][0]; // 1 \n\n// Log the entire `matrix` \nconsole.log(matrix); // Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \n// Log the element from the first row and first column \nconsole.log(firstRowFirstCol); // Output: 1",vr=e(Qe),Ze="// Declare an array `fruits` and calculate its length \nlet fruits = ['apple', 'banana', 'cherry']; \nlet length = fruits.length; // Retrieve the length of the `fruits` array \n\n// Log the length of the `fruits` array \nconsole.log(length); // Output: 3",wr=e(Ze),et="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Access the first element of the array \nlet firstFruit = fruits[0]; // 'apple' \n\n// Access the second element of the array \nlet secondFruit = fruits[1]; // 'banana' \n\n// Access the last element using the array's length \nlet lastFruit = fruits[fruits.length - 1]; // 'cherry' \n\n// Log the accessed elements \nconsole.log(firstFruit, secondFruit, lastFruit); // Output: apple banana cherry",xr=e(et),tt="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Iterate over `fruits` using a traditional `for` loop \nfor (let i = 0; i < fruits.length; i++) { \n  console.log(fruits[i]); // Logs each fruit in the array \n} \n\n// Iterate over `fruits` using a `for...of` loop \nfor (let fruit of fruits) { \n  console.log(fruit); // Logs each fruit in the array \n} \n\n// Iterate over `fruits` using the `forEach` method \nfruits.forEach(fruit => console.log(fruit)); // Logs each fruit in the array",Cr=e(tt),nt="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array into individual variables \nlet [firstFruit, secondFruit, thirdFruit] = fruits; \n\n// Log each variable to show the result of destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(secondFruit); // Output: banana \nconsole.log(thirdFruit); // Output: cherry",Er=e(nt),ot="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array, skipping the second element \nlet [firstFruit, , thirdFruit] = fruits; \n\n// Log the variables to show the result of selective destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(thirdFruit); // Output: cherry",kr=e(ot),st="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array, skipping the second element \nlet [firstFruit, , thirdFruit] = fruits; \n\n// Log the variables to show the result of selective destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(thirdFruit); // Output: cherry",Or=e(st),rt="// Declare an array `colors` with one element \nlet colors = ['red']; \n\n// Destructure `colors` array, providing a default value for the second element \nlet [firstColor, secondColor = 'green'] = colors; \n\n// Log `firstColor` to show the first element from the array \nconsole.log(firstColor);  // Output: red \n// Log `secondColor` to show the default value, as the second element does not exist in the array \nconsole.log(secondColor); // Output: green (default value)",Dr=e(rt),at="// Declare an array `fruits` with two elements \nlet fruits = ['apple', 'banana']; \n\n// Use the `push` method to add 'orange' to the end of `fruits` and store the new length \nlet newLength = fruits.push('orange'); \n\n// Log the new length of the `fruits` array \nconsole.log(newLength); // Output: 3 \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana', 'orange']",Tr=e(at),it="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `pop` method to remove the last element from `fruits` and store it in `lastFruit` \nlet lastFruit = fruits.pop(); // Removes 'cherry' \n\n// Log the removed element \nconsole.log(lastFruit); // Output: cherry \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana']",Ir=e(it),lt="// Declare an array `fruits` with two elements \nlet fruits = ['apple', 'banana']; \n\n// Use the `unshift` method to add 'strawberry' to the beginning of `fruits` and store the new length \nlet newLength = fruits.unshift('strawberry'); \n\n// Log the new length of the `fruits` array \nconsole.log(newLength); // Output: 3 \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['strawberry', 'apple', 'banana']",Pr=e(lt),ct="// Declare an array `fruits` with four elements \nlet fruits = ['strawberry', 'apple', 'banana', 'cherry']; \n\n// Use the `shift` method to remove the first element from `fruits` and store it in `firstFruit` \nlet firstFruit = fruits.shift(); // Removes 'strawberry' \n\n// Log the removed element \nconsole.log(firstFruit); // Output: strawberry \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana', 'cherry']",Lr=e(ct),_t="// Declare an array `numbers` with three numeric elements \nlet numbers = [1, 2, 3]; \n\n// Use the `map` method to create a new array `squared` by squaring each element of `numbers` \nlet squared = numbers.map(num => num * num); // Results in [1, 4, 9] \n\n// Log the `squared` array \nconsole.log(squared); // Output: [1, 4, 9]",Sr=e(_t),ht="// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the `filter` method to create a new array `evenNumbers` containing only even numbers from `numbers` \nlet evenNumbers = numbers.filter(num => num % 2 === 0); // Results in [2, 4] \n\n// Log the `evenNumbers` array \nconsole.log(evenNumbers); // Output: [2, 4]",Ar=e(ht),dt="// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the `reduce` method to calculate the sum of all elements in `numbers` \nlet sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0); // Results in 15 \n\n// Log the calculated sum \nconsole.log(sum); // Output: 15",Nr=e(dt),ut="// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the `find` method to locate the first even number in `numbers` \nlet firstEven = numbers.find(num => num % 2 === 0); // Results in 2 \n\n// Log the first even number found \nconsole.log(firstEven); // Output: 2",Br=e(ut),pt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `indexOf` method to find the index of 'banana' in the `fruits` array \nlet index = fruits.indexOf('banana'); // Results in 1 \n\n// Log the index of 'banana' \nconsole.log(index); // Output: 1",Hr=e(pt),mt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `reverse` method to reverse the order of elements in `fruits` \nlet reversedFruits = fruits.reverse(); // The `fruits` array itself is reversed \n\n// Log the reversed array \nconsole.log(reversedFruits); // Output: ['cherry', 'banana', 'apple']",zr=e(mt),gt="// Declare an array `fruits` with four string elements \nlet fruits = ['strawberry', 'banana', 'apple', 'cherry']; \n\n// Use the `sort` method to sort the elements of `fruits` alphabetically \nlet sortedFruits = fruits.sort(); // The `fruits` array itself is sorted \n\n// Log the sorted array \nconsole.log(sortedFruits); // Output: ['apple', 'banana', 'cherry', 'strawberry']",Rr=e(gt),ft="// Declare an array `people` with objects containing `name` and `age` properties \nlet people = [ \n  { name: 'John', age: 30 }, \n  { name: 'Anna', age: 24 }, \n  { name: 'Mike', age: 28 } \n]; \n\n// Use the `sort` method with a compare function to sort `people` by `age` \npeople.sort((a, b) => a.age - b.age); \n\n// Log the sorted array, now ordered by age from youngest to oldest \nconsole.log(people); // Output: [{ name: 'Anna', age: 24 }, { name: 'Mike', age: 28 }, { name: 'John', age: 30 }]",Fr=e(ft),jt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `slice` method to create a new array `someFruits` from index 1 to 2 of `fruits` \nlet someFruits = fruits.slice(1, 3); \n\n// Log the new array, which includes elements from index 1 to 2 of the original `fruits` array \nconsole.log(someFruits); // Output: ['banana', 'cherry']",Mr=e(jt),yt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `splice` method to insert 'kiwi' at index 1 without removing any elements \nfruits.splice(1, 0, 'kiwi'); // Arguments: start index, number of elements to remove, element(s) to add \n\n// Log the updated `fruits` array, showing 'kiwi' added at index 1 \nconsole.log(fruits); // Output: ['apple', 'kiwi', 'banana', 'cherry']",Ur=e(yt),bt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `join` method to concatenate all elements of `fruits` into a single string, separated by ', ' \nlet fruitsString = fruits.join(', '); \n\n// Log the string created from the `fruits` array \nconsole.log(fruitsString); // Output: apple, banana, cherry",qr=e(bt),vt="// Declare two arrays `array1` and `array2` with numeric elements \nlet array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6]; \n\n// Use the `concat` method to merge `array1` and `array2` into `combinedArray` \nlet combinedArray = array1.concat(array2); \n\n// Log the merged array, showing elements from both `array1` and `array2` \nconsole.log(combinedArray); // Output: [1, 2, 3, 4, 5, 6]",Jr=e(vt),wt="// Declare two arrays `array1` and `array2` with string elements \nlet array1 = ['a', 'b', 'c']; \nlet array2 = ['d', 'e', 'f']; \n\n// Use the spread operator to combine `array1` and `array2` into `combinedArray` \nlet combinedArray = [...array1, ...array2]; \n\n// Log the combined array, showing elements from both `array1` and `array2` \nconsole.log(combinedArray); // Output: ['a', 'b', 'c', 'd', 'e', 'f']",$r=e(wt),xt="// Declare an object `person` with properties `name`, `age`, and a method `greet` \nlet person = { \n  name: 'Alice', \n  age: 30, \n  greet: function() {  \n    return 'Hello!';  \n  } \n}; \n\n// Log the `name` property of `person` \nconsole.log(person.name); // Output: Alice \n// Log the `age` property of `person` \nconsole.log(person.age); // Output: 30 \n// Call the `greet` method of `person` and log the returned greeting \nconsole.log(person.greet()); // Output: Hello!",Yr=e(xt),Ct="// Declare an object `person` with properties `name` and `age` \nlet person = { \n  name: 'Alice', \n  age: 30 \n}; \n\n// Add a new property `job` to the `person` object \nperson.job = 'Developer'; \n// Log the newly added property \nconsole.log(person.job); // Output: 'Developer' \n\n// Modify the existing `age` property of `person` \nperson.age = 31; \n// Log the modified `age` property \nconsole.log(person.age); // Output: 31 \n\n// Delete the `age` property from `person` \ndelete person.age; \n// Log the deleted `age` property, which now is `undefined` \nconsole.log(person.age); // Output: undefined",Wr=e(Ct),Et="// Define a `person` object with `firstName`, `lastName`, and `fullName` getter and setter \nlet person = { \n  firstName: 'Alice', \n  lastName: 'Smith', \n  // Getter for `fullName` returns the full name by concatenating `firstName` and `lastName` \n  get fullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }, \n  // Setter for `fullName` splits the name into `firstName` and `lastName` \n  set fullName(name) { \n    let parts = name.split(' '); \n    this.firstName = parts[0]; \n    this.lastName = parts[1]; \n  } \n}; \n\n// Log the `fullName` using the getter \nconsole.log(person.fullName); // Output: Alice Smith \n// Set a new `fullName`, which updates `firstName` and `lastName` \nperson.fullName = 'John Doe'; // Resets fullName \n// Log the updated `fullName` using the getter \nconsole.log(person.fullName); // Output: John Doe",Vr=e(Et),kt="// Define variables `name` and `age` \nlet name = 'Alice'; \nlet age = 25; \n\n// Create a `person` object using shorthand property names \nlet person = { name, age }; \n\n// Log properties of the `person` object \nconsole.log(person.name); // Output: Alice \nconsole.log(person.age); // Output: 25",Gr=e(kt),Ot="// Define a variable for dynamic property name \nlet propName = 'status'; \n\n// Create a `person` object with properties and use computed property name for `status` \nlet person = { \n  name: 'Alice', \n  age: 25, \n  [propName]: 'active' // `status` property is set dynamically using `propName` variable \n}; \n\n// Log the value of the `status` property \nconsole.log(person.status); // Output: active",Xr=e(Ot),Dt="// Define an object `person` with properties and a method \nlet person = { \n  name: 'Alice', \n  age: 30, \n  greet: function() {  \n    return 'Hello!'; // Method that returns a greeting \n  } \n}; \n\n// Call the `greet` method of the `person` object and log the result \nconsole.log(person.greet()); // Output: Hello!",Kr=e(Dt),Tt="// Define an object `person` with a `name` property and a `greet` method \nlet person = { \n  name: 'Alice', \n  greet: function() {  \n    return `Hello ${this.name}`;  // Use template literals to include the `name` property in the greeting \n  } \n} \n\n// Call the `greet` method of the `person` object and log the greeting \nconsole.log(person.greet()); // Output: Hello Alice",Qr=e(Tt),It="// Define an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Log the `person` object \nconsole.log(person);",Zr=e(It),Pt="// Initialize a new object `person` using the `Object` constructor \nlet person = new Object(); \n// Assign properties `name`, `age`, and `isEmployed` to the `person` object \nperson.name = 'John Doe'; \nperson.age = 30; \nperson.isEmployed = true; \n\n// Log the `person` object \nconsole.log(person);",ea=e(Pt),Lt="// Define a constructor function `Person` to create an object with `name`, `age`, and `isEmployed` properties \nfunction Person(name, age, isEmployed) { \n  this.name = name; \n  this.age = age; \n  this.isEmployed = isEmployed; \n} \n\n// Instantiate a new `Person` object with specific properties \nlet person = new Person('John Doe', 30, true); \n\n// Log the newly created `person` object \nconsole.log(person);",ta=e(Lt),St="// Define a prototype object `personProto` with a `greet` method \nlet personProto = { \n  greet: function() { \n    return `Hello, ${this.name}`; \n  } \n}; \n\n// Create a new object `person` that inherits from `personProto` \nlet person = Object.create(personProto); \n// Assign properties `name`, `age`, and `isEmployed` to the `person` object \nperson.name = 'John Doe'; \nperson.age = 30; \nperson.isEmployed = true; \n\n// Log the `person` object \nconsole.log(person);",na=e(St),At="// Define a `Person` class with a constructor and a `greet` method \nclass Person { \n  constructor(name, age, isEmployed) { \n    this.name = name; // Initialize `name` property \n    this.age = age; // Initialize `age` property \n    this.isEmployed = isEmployed; // Initialize `isEmployed` property \n  } \n  \n  greet() { \n    return `Hello, ${this.name}`; // Method to return a greeting \n  } \n} \n\n// Instantiate a new `Person` object with specific properties \nlet person = new Person('John Doe', 30, true); \n// Log the newly created `person` object \nconsole.log(person);",oa=e(At),Nt="// Declare an object `person` with properties `name` and `age` \nlet person = { \n  name: 'John Doe', \n  age: 30 \n}; \n\n// Log the `name` property of the `person` object \nconsole.log(person.name); // Output: John Doe \n// Log the `age` property of the `person` object \nconsole.log(person.age); // Output: 30",sa=e(Nt),Bt="// Declare an object `person` with properties `name` and `age` \nlet person = { \n  name: 'John Doe', \n  age: 30 \n}; \n\n// Access and log the `name` property using bracket notation \nconsole.log(person['name']); // Output: John Doe \n// Store the property name `age` in a variable `key` \nlet key = 'age'; // When the property name is stored in a variable \n// Access and log the property using the variable `key` with bracket notation \nconsole.log(person[key]); // Output: 30",ra=e(Bt),Ht="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Destructure `person` to extract `name`, `age`, and `isEmployed` properties into variables \nlet { name, age, isEmployed } = person; \n\n// Log the values of the extracted variables \nconsole.log(name); // Output: John Doe \nconsole.log(age); // Output: 30 \nconsole.log(isEmployed); // Output: true",aa=e(Ht),zt="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Iterate over each property in the `person` object \nfor (let key in person) { \n  // Log the key and its corresponding value \n  console.log(key + ': ' + person[key]); \n}",ia=e(zt),Rt="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use `Object.keys` to get an array of the object's property names \nlet keys = Object.keys(person); \n\n// Log the array of keys \nconsole.log(keys); // Output: ['name', 'age', 'isEmployed']",la=e(Rt),Ft="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use `Object.values` to get an array of the object's property values \nlet values = Object.values(person); \n\n// Log the array of values \nconsole.log(values); // Output: ['John Doe', 30, true]",ca=e(Ft),Mt="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use `Object.entries` to get an array of the object's property [key, value] pairs \nlet entries = Object.entries(person); \n\n// Log the array of entries \nconsole.log(entries); // Output: [['name', 'John Doe'], ['age', 30], ['isEmployed', true]]",_a=e(Mt),Ut="// Initialize an object `person` with a property `name` \nlet person = { name: 'Alice' }; \n\n// Define a new property `age` on `person` with specific property descriptors \nObject.defineProperty(person, 'age', { \n  value: 25,          // Set the initial value of `age` \n  writable: false,    // Prevent the property from being changed \n  enumerable: true,   // Allow the property to be listed in object enumerations \n  configurable: false // Prevent the property from being deleted or reconfigured \n}); \n\n// Log the `age` property of `person` \nconsole.log(person.age); // Output: 25 \n\n// Attempt to modify the `age` property \nperson.age = 30; // This will not change the age because `writable` is false \n// Log the `age` property again to show it remains unchanged \nconsole.log(person.age); // Output: 25",ha=e(Ut),qt="// Initialize an empty object `person` \nlet person = {}; \n\n// Define multiple properties on `person` with specific descriptors \nObject.defineProperties(person, { \n  'firstName': { \n    value: 'Alice',       // Set the initial value of `firstName` \n    writable: true,       // Allow `firstName` to be changed \n    enumerable: true      // Include `firstName` in object enumerations \n  }, \n  'lastName': { \n    value: 'Johnson',     // Set the initial value of `lastName` \n    writable: false,      // Prevent `lastName` from being changed \n    enumerable: true      // Include `lastName` in object enumerations \n  } \n}); \n\n// Log the `person` object to show defined properties \nconsole.log(person); // Output: { firstName: 'Alice', lastName: 'Johnson' }",da=e(qt),Jt="// Initialize an object `person` with a property `name` \nlet person = { name: 'Alice' }; \n\n// Define a new property `age` on `person` with specific descriptors \nObject.defineProperty(person, 'age', { \n  value: 25,          // Set the initial value of `age` \n  writable: false,    // Make `age` read-only \n  enumerable: true,   // Allow `age` to appear in object enumerations \n  configurable: false // Prevent the property from being deleted or reconfigured \n}); \n\n// Retrieve the property descriptor for `age` on `person` \nlet descriptor = Object.getOwnPropertyDescriptor(person, 'age'); \n\n// Log the property descriptor of `age` \nconsole.log(descriptor); // Output: { value: 25, writable: false, enumerable: true, configurable: false }",ua=e(Jt),$t="// Initialize an object `original` with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a shallow copy of `original` using spread syntax \nlet copy = { ...original }; \n\n// Modify the top-level property `a` in the copy \ncopy.a = 3; \n// Modify a nested property in the copy, which also affects the original due to shared reference \ncopy.b.c = 4; \n\n// Log the `original` object to show that its nested property was affected \nconsole.log(original); // Output: { a: 1, b: { c: 4 } } \n// Log the `copy` object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",pa=e($t),Yt="// Initialize an object `original` with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a shallow copy of `original` using `Object.assign` \nlet copy = Object.assign({}, original); \n\n// Modify the top-level property `a` in the copy \ncopy.a = 3; \n// Modify a nested property in the copy, which also affects the original due to shared reference \ncopy.b.c = 4; \n\n// Log the `original` object to show that its nested property was affected \nconsole.log(original); // Output: { a: 1, b: { c: 4 } } \n// Log the `copy` object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",ma=e(Yt),Wt="// Initialize an object `original` with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a deep copy of `original` using JSON.parse and JSON.stringify \nlet copy = JSON.parse(JSON.stringify(original)); \n\n// Modify the top-level property `a` in the copy \ncopy.a = 3; \n// Modify a nested property `b.c` in the copy \ncopy.b.c = 4; \n\n// Log the `original` object to show it remains unchanged \nconsole.log(original); // Output: { a: 1, b: { c: 2 } } \n// Log the `copy` object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",ga=e(Wt),a="// Initialize a new empty `Map` \nlet map = new Map();",i="// Set string keys with corresponding values \nmap.set('key1', 'value1'); \nmap.set('key2', 'value2'); \n// Set a numeric key with its corresponding value. Keys can be of any type \nmap.set(123, 'numeric key');  \n\n// Demonstrates that `Map` keys can be diverse, including strings and numbers",Vt="// Retrieve and log the number of key-value pairs in the `Map` \nlet size = map.size; \nconsole.log(size); // Output: 3",fa=e(`${a} ${i} \n ${Vt}`),Gt="// Use the `get` method to retrieve values based on their keys \nlet value1 = map.get('key1'); // Retrieve 'value1' \nlet value2 = map.get('key2'); // Retrieve 'value2' \nlet numericValue = map.get(123); // Retrieve 'numeric key' \n\n// Log the retrieved values \nconsole.log(value1, value2, numericValue); // Output: value1 value2 numeric key",ja=e(`${a} ${i} \n ${Gt}`),Xt="// Iterate over the `Map` using `forEach`, logging both key and value \nmap.forEach((value, key) => { \n  console.log(key, value); \n});",ya=e(`${a} ${i} \n ${Xt}`),Kt="// Iterate over the `Map` using a `for...of` loop on `map.entries()` \nfor (let [key, value] of map.entries()) { \n  // Log the key and value of each entry \n  console.log(key, value); \n}",ba=e(`${a} ${i} \n ${Kt}`),Qt="// Iterate over keys \nfor (let key of map.keys()) { \n  // Log each key in the `Map` \n  console.log(key); \n} \n\n// Iterate over values \nfor (let value of map.values()) { \n  // Log each value in the `Map` \n  console.log(value); \n}",va=e(`${a} ${i} \n ${Qt}`),l="// Initialize a new empty `Set` \nlet set = new Set();",c="// Add unique values to the `Set` \nset.add('value1'); \nset.add('value2'); \nset.add('value3'); \n\n// Demonstrate adding elements to `Set`, ensuring each element is unique",Zt="// Check for the presence of 'value1' in the `Set` \nlet hasValue1 = set.has('value1'); // Return true because 'value1' is in the `Set` \n// Check for the presence of 'value4' in the `Set` \nlet hasValue4 = set.has('value4'); // Return false because 'value4' is not in the `Set` \n\n// Log the results of the checks \nconsole.log(hasValue1, hasValue4); // Output: true false",wa=e(`${l} ${c} ${Zt}`),en="// Remove 'value1' from the set \nset.delete('value1'); \n\n// Check if 'value1' is present in the `Set` after deletion \nlet hasValue1 = set.has('value1'); // Expected to be false since 'value1' was deleted \n\n// Log the result of the check \nconsole.log(hasValue1); // Output: false",xa=e(`${l} ${c} ${en}`),tn="// Iterate over each element in the `Set` \nset.forEach(value => { \n  // Log the current value \n  console.log(value); \n});",Ca=e(`${l} ${c} ${tn}`),nn="// Iterate over each element in the `Set` using a `for...of` loop \nfor (let value of set) { \n  // Log the current element's value \n  console.log(value); \n}",Ea=e(`${l} ${c} ${nn}`),on="// Store the number of elements in the `Set` in the variable `size` \nlet size = set.size;  \n\n// Log the number of elements in the `Set` \nconsole.log(size); // Output: 3",ka=e(`${l} ${c} ${on}`),p="// Initialize a new `WeakMap` object \nlet weakMap = new WeakMap();",m="// Create an empty object to be used as a key \nlet objKey = {}; \n\n// Associate 'some value' with `objKey` in the` WeakMap` \nweakMap.set(objKey, 'some value');",sn="// Retrieve the value associated with `objKey` from the `WeakMap` \nlet value = weakMap.get(objKey); // Return 'some value' \n\n// Log the retrieved value \nconsole.log(value); // Output: some value",Oa=e(`${p} ${m} ${sn}`),rn="// Remove the key-value pair where the key is `objKey` from the `WeakMap` \nweakMap.delete(objKey); // Removes the key-value pair where the key is `objKey` \n\n// Retrieve the value associated with `objKey` after deletion, which is undefined \nlet value = weakMap.get(objKey); // Return undefined \n\n// Log the retrieved value \nconsole.log(value); // Output: undefined",Da=e(`${p} ${m} ${rn}`),g="// Create a new `WeakSet` instance \nlet weakSet = new WeakSet();",f="// Create empty objects to be used as keys \nlet obj1 = {}; \nlet obj2 = {}; \n\n// Add `obj1` to the `WeakSet` \nweakSet.add(obj1); \n// Add `obj2` to the `WeakSet` \nweakSet.add(obj2);",an="// Retrieve whether `obj1` is in the `WeakSet` \nlet hasObj1 = weakSet.has(obj1); // true if `obj1` is in the `WeakSet` \n\n// Retrieve whether a new object (`{}`) is in the `WeakSet`, which is false \nlet hasObj3 = weakSet.has({});   // false, as this is a new object \n\n// Log the results \nconsole.log(hasObj1, hasObj3); // Output: true false",Ta=e(`${g} ${f} ${an}`),ln="// Remove `obj1` from the `WeakSet` \nweakSet.delete(obj1); // Removes `obj1` from the `WeakSet` \n\n// Retrieve whether `obj1` is in the `WeakSet` after deletion, which is false \nlet hasObj1 = weakSet.has(obj1); \n\n// Log the result \nconsole.log(hasObj1); // Output: false",Ia=e(`${g} ${f} ${ln}`),Pa='{\n  "name": "John",\n  "occupation": "Engineer"\n}',La='[\n  "Apple",\n  "Banana",\n  "Cherry"\n]',Sa='{\n  "name": "Jane",\n  "age": 30,\n  "address": {\n    "street": "123 Main St",\n    "city": "Anytown"\n  },\n  "hobbies": ["Reading", "Hiking", "Coding"]\n}',cn='// Define a `person` object with name, age, and hobbies properties \nlet person = { \n  name: \'Alice\', \n  age: 30, \n  hobbies: [\'reading\', \'cycling\'] \n}; \n\n// Convert the `person` object to a JSON string \nlet jsonString = JSON.stringify(person); \n\n// Log the JSON string, outputting the stringified version of `person` \nconsole.log(jsonString); // Output: {"name":"Alice","age":30,"hobbies":["reading","cycling"]}',Aa=e(cn),_n='// Define a JSON string representing a person with `name`, `age`, and `hobbies` \nlet jsonString = \'{"name":"Alice","age":30,"hobbies":["reading","cycling"]}\'; \n\n// Parse the JSON string back into a JavaScript object \nlet person = JSON.parse(jsonString); \n\n// Log the `person` object \nconsole.log(person); // Output: { name: \'Alice\', age: 30, hobbies: [\'reading\', \'cycling\'] }',Na=e(_n),hn="// Define the `Person` constructor function with a `name` parameter \nfunction Person(name) { \n  this.name = name; // Assign the `name` parameter to the `name` property of the instance \n} \n\n// Add a `greet` method to the `Person.prototype` \nPerson.prototype.greet = function() { \n  // Return a greeting string using the `name` property of the instance \n  return `Hello, my name is ${this.name}`; \n}; \n\n// Create a new instance of `Person` named `alice` \nlet alice = new Person('Alice'); \n\n// Call the `greet` method on the `alice` instance and log the result \nconsole.log(alice.greet()); // Output: Hello, my name is Alice",Ba=e(hn),dn="// Define the `Vehicle` constructor function with a `type` parameter \nfunction Vehicle(type) { \n  this.type = type; // Assign the `type` parameter to the `type` property of the instance \n} \n\n// Add a `describe` method to the `Vehicle.prototype` \nVehicle.prototype.describe = function() { \n  // Return a description string using the `type` property of the instance \n  return `This is a ${this.type}.`; \n};",un="// Define the `Car` constructor function with `name` and `type` parameters \nfunction Car(name, type) { \n  Vehicle.call(this, type); // Call the `Vehicle` constructor function to inherit `type` property \n  this.name = name; // Assign the `name` parameter to the `name` property of the `Car` instance \n} \n\n// Inherit from `Vehicle` \nCar.prototype = Object.create(Vehicle.prototype); // Establish `Car.prototype` as an object created from `Vehicle.prototype` for inheritance purposes \nCar.prototype.constructor = Car; // Restore the `constructor` property on `Car.prototype` to refer to `Car`",pn="// Adds a `showDetails` method to the `Car` prototype for displaying detailed information about the car \nCar.prototype.showDetails = function() { \n  return `This car is a ${this.name} and is a type of ${this.type}.`; \n}; \n\n// Overriding the `describe` method from `Vehicle` prototype for `Car` instances \nCar.prototype.describe = function() { \n  // Provides a custom description specific to `Car` instances \n  return `This is a car named ${this.name}.`; \n};",mn="// Create a new instance of `Car` with `name` as 'Tesla Model 3' and `type` as 'electric car' \nconst myCar = new Car('Tesla Model 3', 'electric car'); \n\n// Call the overridden `describe` method on `myCar` instance and log the output \nconsole.log(myCar.describe()); // Output: This is a car named Tesla Model 3. \n\n// Call the `showDetails` method on `myCar` instance to get a detailed description and log the output \nconsole.log(myCar.showDetails()); // Output: This car is a Tesla Model 3 and is a type of electric car.",Ha=e(`${dn} ${un} ${pn} ${mn}`),za="class Person {\n  // Class body goes here\n}",Ra="class Person {\n  constructor(name, age) {\n    // Code goes here\n  }\n}",gn="// Define a class named `Person` \nclass Person { \n  // Declare a public class field `name` and initialize it with 'Default Name' \n  name = 'Default Name'; \n  // Declare another public class field `age` without initializing it \n  age; \n  \n  // Constructor function that initializes a new instance of the `Person` class \n  constructor(age) { \n    this.age = age; // Set the `age` field to the value passed to the constructor \n  } \n} \n\n// Create a new instance of the `Person` class with `age` set to 30 \nconst bob = new Person(30); \n\n// Log the `name` property of the `bob` instance \nconsole.log(bob.name); // Output: Default Name",Fa=e(gn),fn="// Define a class named `Person` \nclass Person { \n  // Initialize a public class field `name` with a default value \n  name = 'Default Name'; \n  // Declare another public class field `age` without initializing it \n  age; \n  \n  // Constructor function for creating a new instance of `Person` \n  constructor(name, age) { \n    this.name = name; // Assign the `name` argument to the `name` field \n    this.age = age; // Assign the `age` argument to the `age` field \n  }  \n  \n  // Define a method `greet` to generate a greeting message \n  greet() { \n    // Return a greeting message using the `name` and `age` fields \n    return `Hello, my name is ${this.name}, I am ${this.age} years old.`;  \n  } \n} \n\n// Create a new instance of `Person` with `name` as 'Bob' and `age` as 30 \nconst bob = new Person('Bob', 30);  \n// Call the `greet` method on the `bob` instance and log the output \nconsole.log(bob.greet()); // Output: Hello, my name is Bob, I am 30 years old.",Ma=e(fn),jn="// Define a class named `Person` \nclass Person { \n  // Define a static field `species` with the value 'Humans' \n  static species = 'Humans'; // Static field means it belongs to the class itself, not to instances of the class \n  \n  // Define a static method `getSpecies` \n  static getSpecies() { \n    // This method returns the value of the static field `species` \n    return Person.species; // Access the static field using the class name \n  } \n} \n\n// Call the static method `getSpecies` on the `Person` class and log the result \nconsole.log(Person.getSpecies()); // Output: Humans",Ua=e(jn),yn="// Define a class named `Person` \nclass Person { \n  // Declare a private-like field `_name` to store the person's name \n  _name; \n  \n  // Constructor to initialize a new instance of `Person` with a `name` \n  constructor(name) { \n    this._name = name; // Set the private-like field `_name` to the provided `name` \n  } \n  \n  // Getter for `name` that allows reading the private-like `_name` field \n  get name() { \n    return this._name; // Return the value of `_name` \n  } \n  \n  // Setter for `name` that allows writing to the private-like `_name` field \n  set name(value) { \n    this._name = value; // Set the value of `_name` to the new `value` \n  } \n} \n\n// Create a new instance of `Person` named `bob` with the name 'Bob' \nconst bob = new Person('Bob'); \nconsole.log(bob.name);  // Use the getter to output: Bob \n\n// Change `bob.name` to 'Robert' using the setter \nbob.name = 'Robert'; \nconsole.log(bob.name);  // Use the getter again to output: Robert",qa=e(yn),bn="// Define a class named `Person` \nclass Person { \n  // Declare a private field `#secret` initialized with a string \n  #secret = 'I have a secret.'; \n  \n  // Define a private method `#privateMethod` that uses the private field `#secret` \n  #privateMethod() {  \n    // Return a string that incorporates the private field `#secret` \n    return `The secret is: ${this.#secret}`; \n  } \n  \n  // Define a public method `revealSecret` that calls the private method `#privateMethod` \n  revealSecret() {  \n    // Call and return the result of the private method `#privateMethod` \n    return this.#privateMethod(); // Calling the private method  \n  }  \n}  \n\n// Create an instance of `Person` named `alice` \nconst alice = new Person();  \n// Call the public method `revealSecret` on `alice` and log the output \nconsole.log(alice.revealSecret()); // Output the result of the private method  \n// Attempting to access the private field `#secret` directly outside the class body will result in a `SyntaxError` \n// console.log(alice.#secret); // Syntax Error: Private field '#secret' must be declared in an enclosing class",Ja=e(bn),$a="class Vehicle {\n  // Class body goes here\n}\n\nclass Car extends Vehicle {\n  // Class body goes here\n}",Ya="class Car extends Vehicle {\n  ...\n\n  constructor(...) {\n    super(...); // Call the parent's constructor\n    ...\n  }\n\n  ...\n}",vn="// Define a class named `Vehicle` \nclass Vehicle { \n  // Constructor that initializes a new instance of `Vehicle` with a `brand` \n  constructor(brand) { \n    this.brand = brand; // Assign the `brand` argument to the `brand` field \n  } \n  \n  // Define a method `start` to simulate starting the vehicle \n  start() { \n    // Return a message indicating the vehicle is starting, including its brand \n    return `Starting the ${this.brand}`; \n  } \n}",Wa="// Define a subclass `Car` that inherits from the `Vehicle` class \nclass Car extends Vehicle { \n  // Constructor that initializes a new instance of `Car` with `brand` and `model` \n  constructor(brand, model) { \n    super(brand); // Call the parent class `Vehicle` constructor with `brand` \n    this.model = model; // Assign the `model` argument to the `model` field \n  } \n  \n  // Define a method `display` to show information about the car \n  display() { \n    // Return a message indicating the brand and model of the car \n    return `This is a ${this.brand} ${this.model}`; \n  } \n}",wn="// Define a subclass `Car` that inherits from the `Vehicle` class \nclass Car extends Vehicle { \n  // Constructor that initializes a new instance of `Car` with `brand` and `model` \n  constructor(brand, model) { \n    super(brand); // Call the parent class `Vehicle` constructor with `brand` \n    this.model = model; // Assign the `model` argument to the `model` field \n  } \n  \n  // Define a method `display` to show information about the car \n  display() { \n    // Return a message indicating the brand and model of the car \n    return `This is a ${this.brand} ${this.model}`; \n  } \n  \n  // Override the `start` method to add custom behavior for `Car` \n  start() { \n    // Call the parent's `start` method and add additional text specific to `Car` \n    return `${super.start()}. The ${this.model} is ready to go!`; \n  } \n}",xn="// Create a new instance of the `Car` class with 'Toyota' as the `brand` and 'Corolla' as the `model` \nconst myCar = new Car('Toyota', 'Corolla'); \n\n// Call the `display` method on `myCar` to output a description of the car \nconsole.log(myCar.display()); // Output: This is a Toyota Corolla \n\n// Call the `start` method on `myCar` to simulate starting the car and append additional information \nconsole.log(myCar.start()); // Output: Starting the Toyota. The Corolla is ready to go!",Va=e(`${vn} ${wn} ${xn}`),Cn="// Create an object using the `Object` constructor \nlet myObject = new Object(); \nmyObject.name = 'Alice'; // Assign property `name` \nmyObject.age = 30; // Assign property `age` \n\n// Create an object using object literal syntax \nlet myObjectLiteral = { \n  name: 'Alice', \n  age: 30 \n}; \n\n// Log the object created by the constructor \nconsole.log('Created by constructor:', myObject); \n// Log the object created by literal syntax \nconsole.log('Created by literal:', myObjectLiteral);",Ga=e(Cn),En="// Create an object by calling `Object()` as a function, equivalent to using `new Object()` \nlet myObject = Object();  \nmyObject.name = 'Alice'; // Assign property `name` \nmyObject.age = 30; // Assign property `age` \n\n// Log the object with details on its creation method \nconsole.log('Created by calling the constructor as a function:', myObject);",Xa=e(En),kn="// Create an array using the `Array` constructor, assigning elements 'apple', 'banana', 'cherry' \nlet myArray = new Array('apple', 'banana', 'cherry'); \n\n// Create an array using array literal syntax, initializing with elements 'apple', 'banana', 'cherry' \nlet myArrayLiteral = ['apple', 'banana', 'cherry']; \n\n// Log the array created by the constructor \nconsole.log('Created by constructor:', myArray); \n// Log the array created by literal syntax \nconsole.log('Created by literal:', myArrayLiteral);",Ka=e(kn),On="// Create an array by calling `Array()` as a function, equivalent to using `new Array()` \nlet myArray = Array('apple', 'banana', 'cherry'); \n\n// Log the array with details on its creation method \nconsole.log('Created by calling the constructor as a function:', myArray);",Qa=e(On),Dn="// Create a string object using the `String` constructor \nlet myString = new String('Hello world'); \n\n// Use the `valueOf` method to get the string primitive from the string object \nlet myStringPrimitive = myString.valueOf(); \n\n// Concatenate a string to the string object, which returns a string primitive \nlet myStringResult = myString.concat('!'); \n\n// It's generally recommended to use string literals for simplicity and performance \nlet myStringLiteral = 'Hello world'; \n\n// Log the primitive string value obtained from the string object \nconsole.log('Created by constructor:', myStringPrimitive); // Output: Created by constructor: Hello world \n// Log the type of the result from concatenating a string object with a string primitive (which is 'string') \nconsole.log('Type of concatenation of a string object with a string primitive:', typeof myStringResult); // Output: Type of concatenation of a string object with a string primitive: string \n// Log the string created by literal \nconsole.log('Created by literal:', myStringLiteral); // Output: Created by literal: Hello world",Za=e(Dn),Tn="// Convert the number 123 to a string '123' by calling the `String()` function \nlet stringFromNumber = String(123); \n\n// Convert the boolean value true to a string 'true' by calling the `String()` function \nlet stringFromBoolean = String(true); \n\n// Log the string representation of the number \nconsole.log('Created by calling the constructor as a function:', stringFromNumber); // Output: Created by calling the constructor as a function: 123 \n// Log the string representation of the boolean \nconsole.log('Created by calling the constructor as a function:', stringFromBoolean); // Output: Created by calling the constructor as a function: true \n// Log the type of the variable 'stringFromNumber' to demonstrate it's a string \nconsole.log('Type of created string:', typeof stringFromNumber); // Output: Type of created string: string",ei=e(Tn),In="// Create a `Number` object with the value 123 \nlet myNumber = new Number(123); \n\n// Use the `valueOf` method to get the number primitive from the `Number` object \nlet myNumberPrimitive = myNumber.valueOf(); \n\n// Perform an operation on a number primitive and a number object, adding 123 and 456 \n// Note: `new Number(456)` creates a `Number` object, but the operation converts it to a primitive \nlet myNumberResult = myNumberPrimitive + new Number(456); \n\n// Use a number literal, which is the preferred way to work with numbers in JavaScript \nlet myNumberLiteral = 123; \n\n// Log the primitive number obtained from the `Number` object \nconsole.log('Created by constructor:', myNumberPrimitive); // Output: Created by constructor: 123 \n// Log the type of the result from adding a number literal and a number object to demonstrate it's a number \nconsole.log('Type of sum of a number literal and a number object:', typeof myNumberResult); // Output: Type of sum of a number literal and a number object: number \n// Log the number created by literal \nconsole.log('Created by literal:', myNumberLiteral); // Output: Created by literal: 123",ti=e(In),Pn="// Convert the string '123' to the number 123 by calling the `Number()` as a function \nlet numberFromString = Number('123'); \n\n// Convert the boolean value false to the number 0 by calling the `Number()` as a function \nlet numberFromBoolean = Number(false); \n\n// Log the number obtained from converting a string \nconsole.log('Created by calling the constructor as a function:', numberFromString); // Output: Created by calling the constructor as a function: 123 \n// Log the number obtained from converting a boolean \nconsole.log('Created by calling the constructor as a function:', numberFromBoolean); // Output: Created by calling the constructor as a function: 0 \n// Log the type of the variable 'numberFromString' to demonstrate it's a number \nconsole.log('Type of created number:', typeof numberFromString); // Output: Type of created number: number",ni=e(Pn),Ln="// Create a `Boolean` object with the value true \nlet myBoolean = new Boolean(true); \n\n// Use the `valueOf` method to get the boolean primitive from the `Boolean` object \nlet myBooleanPrimitive = myBoolean.valueOf(); \n\n// Use a boolean literal, which is the preferred way to work with booleans in JavaScript \nlet myBooleanLiteral = true; \n\n// Log the primitive boolean obtained from the `Boolean` object \nconsole.log('Created by constructor:', myBooleanPrimitive); // Output: Created by constructor: true \n// Log the boolean created by literal \nconsole.log('Created by literal:', myBooleanLiteral); // Output: Created by literal: true",oi=e(Ln),Sn="// Convert the number 1 to a boolean true by calling the `Boolean()` as a function \nlet boolFromNumber = Boolean(1); \n\n// Log the boolean value obtained from converting a number \nconsole.log('Created by calling the constructor as a function:', boolFromNumber); // Output: Created by calling the constructor as a function: true \n// Log the type of the variable 'boolFromNumber' to demonstrate it's a boolean \nconsole.log('Type of created boolean value:', typeof boolFromNumber); // Output: Type of created boolean value: boolean",si=e(Sn),An="// Create a function using the `Function` constructor, which takes argument names followed by the function body as strings \nlet sum = new Function('a', 'b', 'return a + b'); \n\n// Define a function using a function expression, which is the more common and recommended approach \nlet sumLiteral = function(a, b) { \n  return a + b; \n}; \n\n// Log the result of calling the function created by the `Function` constructor with arguments 2 and 6 \nconsole.log('Created by constructor:', sum(2, 6)); // Output: Created by constructor: 8 \n// Log the result of calling the function defined by the function expression with arguments 2 and 6 \nconsole.log('Using function declaration:', sumLiteral(2, 6)); // Output: Using function declaration: 8",ri=e(An),Nn="// Create a sum function by calling the `Function` constructor directly \nlet sum = Function('a', 'b', 'return a + b');  // Equivalent to using `new Function()` \n\n// Log the result of the sum function with 2 and 6 as arguments \nconsole.log('Created by calling the constructor as a function:', sum(2, 6)); // Output: Created by calling the constructor as a function: 8 \n// Log the type of the `sum` variable to show it's recognized as a function \nconsole.log('Type of created function:', typeof sum); // Output: Type of created function: function",ai=e(Nn),Bn="// Create a new `Date` object to represent the current date and time \nlet now = new Date(); \n\n// Log the current date and time \nconsole.log(now); // Output current date and time",ii=e(Bn),Hn="// Call the `Date()` function without `new` to return a string representing the current date and time \nlet now = Date();   \n\n// Log the string representation of the current date and time \nconsole.log('Created by calling the constructor as a function:', now); // Output will be the current date and time in string format \n// Log the type of the `now` variable to demonstrate it's a string \nconsole.log('Type of created date:', typeof now); // Output: Type of created date: string",li=e(Hn),zn="// Create a `RegExp` object using the constructor with a string for word boundaries and word characters \nlet regex = new RegExp('\\\\b\\\\w+\\\\b'); \n\n// Create the same regular expression using literal syntax, preferred for readability \nlet regexLiteral = /\\b\\w+\\b/; \n\n// Log the regular expression created by the constructor \nconsole.log('Created by constructor:', regex); // Output: Created by constructor: /\\b\\w+\\b/ \n// Log the regular expression created by the literal syntax \nconsole.log('Created by literal:', regexLiteral); // Output: Created by literal: /\\b\\w+\\b/",ci=e(zn),Rn="// Create a `RegExp` object for matching words bounded by word boundaries\nlet regex = RegExp('\\\\b\\\\w+\\\\b');  // Equivalent to using `new RegExp()` \n\n// Log the created regular expression \nconsole.log('Created by calling the constructor as a function:', regex); // Output: Created by calling the constructor as a function: /\\b\\w+\\b/ \n// Log the type of the created regular expression, which is 'object' \nconsole.log('Type of created regular expression:', typeof regex); // Output: Type of created regular expression: object",_i=e(Rn),hi="// Code snippet demonstrating syntax\nlet element = document.getElementById('elementId');",di="<!DOCTYPE html>\n<html>\n<head>\n  <title>The getElementById Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by ID Example</h1>\n  <div id=\"elementId\">This is the selected element.</div>\n  <br/>\n\n  <script>\n    let element = document.getElementById('elementId');\n\n    console.log('This is the inner text of the selected element: ' + element.innerText); // innerText property will be discussed below\n  <\/script>\n</body>\n</html>",ui="// Code snippet demonstrating syntax\nlet elements = document.getElementsByClassName('className');",pi='<!DOCTYPE html>\n<html>\n<head>\n  <title>The getElementsByClassName Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Class Name Example</h1>\n  <div class="className">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByClassName(\'className\');\n\n    for (let i = 0; i < elements.length; i++) {\n      console.log(\'This is the selected element: \' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>',mi="// Code snippet demonstrating syntax\nlet elements = document.getElementsByTagName('tagName');",gi="<!DOCTYPE html>\n<html>\n<head>\n  <title>The getElementsByTagName Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Tag Name Example</h1>\n  <div>Element 1</div>\n  <p>Element 2</p>\n  <span>Element 3</span>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByTagName('div');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",fi="// Code snippet demonstrating syntax\nlet element = document.querySelector('selector');",ji='<!DOCTYPE html>\n<html>\n<head>\n  <title>The querySelector Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id="elementId">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    // Use `document.querySelector` to select the first element with the specified ID\n    let element = document.querySelector(\'#elementId\');\n    \n    // Output the inner text of the selected element\n    console.log(\'This is the selected element by id: \' + element.innerText);\n  <\/script>\n</body>\n</html>',yi="// Code snippet demonstrating syntax\nlet elements = document.querySelectorAll('selector');",bi='<!DOCTYPE html>\n<html>\n<head>\n  <title>The querySelectorAll Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id="elementId">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    // Use `document.querySelectorAll` to select all elements with the specified class name\n    let elements = document.querySelectorAll(\'.className\');\n    \n    // Iterate over the `NodeList` of selected elements\n    for (let i = 0; i < elements.length; i++) {\n      // Log the inner text of each element\n      console.log(\'This is the selected element by class name: \' + elements[i].innerText);\n    };  \n  <\/script>\n</body>\n</html>',vi="// Code snippet demonstrating syntax\nelement.innerHTML = '<span>New HTML content</span>';",wi="<!DOCTYPE html>\n<html>\n<head>\n  <title>The innerHTML Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <h1 id=\"elementId\">Initial Content</h1>\n\n  <script>\n    let element = document.getElementById('elementId');\n    element.innerHTML = '<span>New HTML content</span>';\n  <\/script>\n</body>\n</html>",xi="// Code snippet demonstrating syntax\nelement.textContent = 'New text content';",Ci="<!DOCTYPE html>\n<html>\n<head>\n  <title>The innerHTML Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p>Some paragraph with initial content</p>\n\n  <script>\n    let paragraph = document.querySelector('p');\n    paragraph.textContent = 'New text content';\n  <\/script>\n</body>\n</html>",Ei="// Code snippet demonstrating syntax\nelement.style.property = 'value';",ki="<!DOCTYPE html>\n<html>\n<head>\n  <title>Set CSS Properties Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    // Select the HTML element with the ID 'myElement'\n    let element = document.getElementById('myElement');\n    \n    // Set the CSS property values for the selected element\n    element.style.color = 'blue'; // Change the text color to blue\n    element.style.backgroundColor = 'yellow'; // Change the background color to yellow\n    element.style.fontSize = '20px'; // Set the font size to 20 pixels\n    element.style.padding = '10px'; // Add padding of 10 pixels on all sides  \n  <\/script>\n</body>\n</html>",Oi="// Code snippet demonstrating syntax\nelement.classList.add('className');\nelement.classList.remove('className');",Di="<!DOCTYPE html>\n<html>\n<head>\n  <title>Class Manipulation on Hover Example</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight {\n      background-color: yellow;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    // Select the HTML element with the ID 'myElement'\n    let element = document.getElementById('myElement');\n    \n    // Add an event listener for the `mouseover` event\n    element.addEventListener('mouseover', function() {\n      // When the mouse hovers over the element, add the `highlight` class to it\n      element.classList.add('highlight');\n    });\n    \n    // Add an event listener for the `mouseout` event\n    element.addEventListener('mouseout', function() {\n      // When the mouse moves out of the element, remove the `highlight` class from it\n      element.classList.remove('highlight');\n    });  \n  <\/script>\n</body>\n</html>",Ti="// Code snippet demonstrating syntax\nlet value = element.getAttribute('attributeName');\nelement.setAttribute('attributeName', 'attributeValue');\nelement.removeAttribute('attributeName')",Ii="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get, Set, and Remove Attributes Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <img id=\"myImage\" src=\"assets/images/cute_cat.jpg\" alt=\"My Image\">\n  <br/>\n\n  <script>\n    // Select the HTML element (image) with the ID 'myImage'\n    let element = document.getElementById('myImage');\n    \n    // Get the value of the `src` (source) attribute of the image\n    let src = element.getAttribute('src');\n    console.log(src); // Log the source URL of the image\n    \n    // Set the value of the `alt` (alternative text) attribute for the image\n    element.setAttribute('alt', 'New Alt Text');\n    // Get the new value of the `alt` attribute to verify it was set correctly\n    let alt = element.getAttribute('alt');\n    console.log(alt); // Log the new alternative text of the image\n    \n    // Remove the `alt` attribute from the image\n    element.removeAttribute('alt');\n    // Attempt to get the value of the `alt` attribute after removal\n    alt = element.getAttribute('alt'); \n    console.log(alt); // This will log `null`, indicating `alt` attribute is no longer present  \n  <\/script>\n</body>\n</html>",Pi="// Code snippet demonstrating syntax\nlet newElement = document.createElement('tagName');\nlet newText = document.createTextNode('Text content');",Li="<!DOCTYPE html>\n<html>\n<head>\n  <title>The createElement and createTextNode Methods Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"container\"></div>\n\n  <script>\n    // Select the container element by its ID\n    let container = document.getElementById('container');\n    \n    // Create a new paragraph (`<p>`) element\n    let newElement = document.createElement('p');\n    \n    // Create a new text node containing the string 'Text content'\n    let newText = document.createTextNode('Text content');\n    \n    // Append the text node to the newly created paragraph (`<p>`) element\n    newElement.appendChild(newText);\n    \n    // Append the new paragraph element, now containing the text, to the container element\n    container.appendChild(newElement);  \n  <\/script>\n</body>\n</html>",Si="// Code snippet demonstrating syntax\nparentNode.appendChild(newNode);",Ai="<!DOCTYPE html>\n<html>\n<head>\n  <title>The appendChild Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"parent\"></div>\n\n  <script>\n    // JavaScript code\n    let parentElement = document.getElementById('parent');\n\n    // Create a new element\n    let newElement = document.createElement('span');\n    newElement.textContent = 'New Child Element';\n\n    // Append the new element to the parent\n    parentElement.appendChild(newElement);\n  <\/script>\n</body>\n</html>",Ni="// Code snippet demonstrating syntax\nparentNode.append(...childNodes /* including strings to create text nodes */);",Bi="<!DOCTYPE html>\n<html>\n<head>\n  <title>The append Method Example</title>\n  <style>\n    :root { font-size: 16px; }\n    #contentContainer > div {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n  </style>\n</head>\n<body>\n  <div>\n    <input type=\"text\" id=\"titleInput\" placeholder=\"Enter title\" />\n    <input type=\"text\" id=\"descriptionInput\" placeholder=\"Enter description\" />\n    <button onclick=\"addItem()\">Add Content</button>\n  </div>\n  <div id=\"contentContainer\"></div>\n\n  <script>\n    function addItem() {\n      // Get the title and description input by the user\n      let title = document.getElementById('titleInput').value;\n      let description = document.getElementById('descriptionInput').value;\n\n      // Only proceed if both title and description are not empty\n      if (title.trim() !== '' && description.trim() !== '') {\n        // Create a new `div` to hold the title and description\n        let newItem = document.createElement('div');\n        \n        // Create `h2` and `p` node for the title and description\n        let titleNode = document.createElement('h2');\n        titleNode.textContent = title;\n        let descriptionNode = document.createElement('p');\n        descriptionNode.textContent = description;\n        \n        // Append the title node, a line break, and the description node to the new `div`\n        newItem.append(titleNode, ' - ', descriptionNode);\n\n        // Append the new `div` to the content container\n        document.getElementById('contentContainer').append(newItem);\n\n        // Clear the `input` fields for the next item\n        document.getElementById('titleInput').value = '';\n        document.getElementById('descriptionInput').value = '';\n      } else {\n        // If either input is empty, alert the user\n        alert('Please enter both a title and a description!');\n      }\n    }\n  <\/script>\n</body>\n</html>",Hi="// Code snippet demonstrating syntax\nparentNode.insertBefore(newNode, referenceNode);",zi="<!DOCTYPE html>\n<html>\n<head>\n  <title>The insertBefore Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"container\">\n    <p>Initial Paragraph</p>\n  </div>\n  <button onclick=\"addNewParagraph()\">Add New Paragraph above 'Initial Paragraph'</button>\n\n  <script>\n    function addNewParagraph() {\n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'New Paragraph';\n\n      // Get the container and its first child\n      let container = document.getElementById('container');\n      let firstChild = container.firstChild;\n\n      // Insert the new paragraph before the first child in the container\n      container.insertBefore(newParagraph, firstChild);\n    }\n  <\/script>\n</body>\n</html>",Ri="// Code snippet demonstrating syntax\nexistingNode.before(newNode);",Fi="<!DOCTYPE html>\n<html>\n<head>\n  <title>The before Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"existingParagraph\">This is an existing paragraph.</p>\n  <button onclick=\"addParagraphBefore()\">Add New Paragraph Before</button>\n\n  <script>\n    function addParagraphBefore() {\n      // Select the existing paragraph\n      let existingParagraph = document.getElementById('existingParagraph');\n      \n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'I am a new paragraph added before the existing one.';\n      \n      // Use the `before()` method to insert the new paragraph before the existing one\n      existingParagraph.before(newParagraph);\n    }\n  <\/script>\n</body>\n</html>",Mi="// Code snippet demonstrating syntax\nexistingNode.after(newNode);",Ui="<!DOCTYPE html>\n<html>\n<head>\n  <title>The after Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"existingParagraph\">This is an existing paragraph.</p>\n  <button onclick=\"addParagraphAfter()\">Add New Paragraph After</button>\n\n  <script>\n    function addParagraphAfter() {\n      // Select the existing paragraph\n      let existingParagraph = document.getElementById('existingParagraph');\n      \n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'I am a new paragraph added after the existing one.';\n      \n      // Use the `after()` method to insert the new paragraph after the existing one\n      existingParagraph.after(newParagraph);\n    }\n  <\/script>\n</body>\n</html>",qi="// Code snippet demonstrating syntax\nnodeToReplace.replaceWith(newNode);",Ji="<!DOCTYPE html>\n<html>\n<head>\n  <title>The replaceWith Method Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p id=\"paragraphToReplace\">This paragraph will be replaced.</p>\n  <button onclick=\"replaceParagraph()\">Replace Paragraph</button>\n\n  <script>\n    function replaceParagraph() {\n      // Select the paragraph that will be replaced\n      let paragraphToReplace = document.getElementById('paragraphToReplace');\n      \n      // Create a new paragraph element\n      let newParagraph = document.createElement('p');\n      newParagraph.textContent = 'This is the new paragraph, replacing the old one.';\n      \n      // Use the `replaceWith()` method to replace the old paragraph with the new one\n      paragraphToReplace.replaceWith(newParagraph);\n    }\n  <\/script>\n</body>\n</html>",$i="// Code snippet demonstrating syntax\nparentNode.removeChild(childNode);",Yi='<!DOCTYPE html>\n<html>\n<head>\n    <title>The removeChild Method Example</title>\n    <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="listContainer">\n    <ul>\n      <li id="item1">Item 1 <button onclick="removeItem(\'item1\')">Remove</button></li>\n      <li id="item2">Item 2 <button onclick="removeItem(\'item2\')">Remove</button></li>\n      <li id="item3">Item 3 <button onclick="removeItem(\'item3\')">Remove</button></li>\n    </ul>\n  </div>\n\n  <script>\n    function removeItem(itemId) {\n      // Select the item to be removed by its ID\n      let item = document.getElementById(itemId);\n      \n      // Select the parent of the item, which is the `<ul>` element\n      let parent = item.parentNode;\n      \n      // Remove the selected item from the parent\n      parent.removeChild(item);\n    }\n  <\/script>\n</body>\n</html>',Wi="// Code snippet demonstrating syntax\nnode.remove();",Vi='<!DOCTYPE html>\n<html>\n<head>\n  <title>The remove Method  Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="listContainer">\n    <ul>\n      \x3c!-- Each list item (`<li>`) contains text and a button. When the button is clicked, it triggers an inline `onclick` event handler. --\x3e\n      \x3c!-- The button\'s `onclick` attribute calls `this.parentNode.remove()`. `this` refers to the button itself, so `this.parentNode` is the `<li>` element that contains the button. --\x3e\n      \x3c!-- The `remove()` method is called on the parent node (`<li>`), which removes the entire list item from the document. This action dynamically alters the DOM to no longer include the clicked item. --\x3e\n      <li>Item 1 <button onclick="this.parentNode.remove()">Remove</button></li>\n      <li>Item 2 <button onclick="this.parentNode.remove()">Remove</button></li>\n      <li>Item 3 <button onclick="this.parentNode.remove()">Remove</button></li>\n    </ul>\n  </div>\n</body>\n</html>\n',Gi="// Code snippet demonstrating syntax\nlet parentNode = node.parentNode;",Xi='<!DOCTYPE html>\n<html>\n<head>\n  <title>The parentNode Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n  <body>\n    <div id="parentDiv" style="padding: 20px; background-color: #f0f0f0;">\n    This is the parent div.\n    <button onclick="changeParentBackgroundColor(this)">Change Parent Background Color</button>\n  </div>\n\n  <script>\n    function changeParentBackgroundColor(element) {\n      // Use the `parentNode` property to access the parent element of the button\n      let parentDiv = element.parentNode;\n      \n      // Change the background color of the parent element\n      parentDiv.style.backgroundColor = \'#a0e0a0\';\n    }\n  <\/script>\n</body>\n</html>',Ki="// Code snippet demonstrating syntax\nlet parentElement = element.parentElement",Qi='<!DOCTYPE html>\n<html>\n<head>\n  <title>The parentElement Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id="parentDiv" style="padding: 20px; border: 2px solid #0000ff;">\n    This is the parent div. Click the button to change my border style.\n    <button onclick="changeParentBorder(this)">Change Border Style</button>\n  </div>\n\n  <script>\n    function changeParentBorder(element) {\n      // Use the `parentElement` property to access the direct parent element of the button\n      let parentDiv = element.parentElement;\n      \n      // Change the border style of the parent element\n      parentDiv.style.border = "3px dashed #ff0000";\n    }\n  <\/script>\n</body>\n</html>',Zi="// Code snippet demonstrating syntax\nlet childNodes = parentNode.childNodes;",el="<!DOCTYPE html>\n<html>\n<head>\n  <title>The childNodes Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div id=\"myDiv\">\n    <p>First Paragraph</p>\n    \x3c!-- This is a comment node --\x3e\n    <p>Second Paragraph</p>\n    Text node here\n    <p>Third Paragraph</p>\n  </div>\n  <button onclick=\"changeChildNodes()\">Change All Child Nodes</button>\n\n  <script>\n    function changeChildNodes() {\n      // Access the `div` and its child nodes\n      let div = document.getElementById('myDiv');\n      let children = div.childNodes;\n      \n      // Iterate over all child nodes\n      for (let i = 0; i < children.length; i++) {\n        // Check if the child node is an element node (nodeType === 1)\n        if (children[i].nodeType === 1) {\n          // Change the text content of element nodes\n          children[i].textContent = 'Modified Element Node';\n        } else if (children[i].nodeType === 3) {\n          // Filter out text nodes that their values contain only '\\n' and empty chars\n          if (children[i].nodeValue.trim() !== '') { \n            // Change the content of text nodes\n            children[i].nodeValue = 'Modified Text Node';\n          }\n        }\n        // Comment nodes (nodeType === 8) and other types are not modified in this example\n      }\n    }\n  <\/script>\n</body>\n</html>",tl="// Code snippet demonstrating syntax\nlet children = parentElement.children",nl='<!DOCTYPE html>\n<html>\n<head>\n  <title>The children Property Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <h2>List of Items</h2>\n  <ul id="itemList">\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n      khs sdgkh gsd\n  </ul>\n  <button onclick="countChildElements()">Count Child Elements</button>\n  <p id="countResult"></p>\n\n  <script>\n    function countChildElements() {\n      // Access the `ul` element and its child elements\n      let list = document.getElementById(\'itemList\');\n      let children = list.children;\n\n      // Count and display the number of child elements\n      let resultText = "Number of child elements: " + children.length;\n      document.getElementById(\'countResult\').textContent = resultText;\n    }\n  <\/script>\n</body>\n</html>',ol="// Code snippet demonstrating syntax\nlet firstNode = parentNode.firstChild;\nlet lastNode = parentNode.lastChild;",sl="<!DOCTYPE html>\n<html>\n<head>\n  <title>The firstChild and lastChild Properties Example</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: yellow; }\n  </style>\n</head>\n<body>\n  <h2>Shopping List</h2>\n  <ul id=\"shoppingList\">\n    \x3c!-- Possible whitespace or comment node --\x3e\n    <li>Milk</li>\n    <li>Bread</li>\n    <li>Eggs</li>\n    \x3c!-- Possible whitespace or comment node --\x3e\n  </ul>\n  <button onclick=\"highlightFirst()\">Highlight First Item</button>\n  <button onclick=\"highlightLast()\">Highlight Last Item</button>\n\n  <script>\n    function highlightFirst() {\n      let list = document.getElementById('shoppingList');\n      // firstChild might be a text node (whitespace), so we check and move to the next element sibling if it is\n      let firstItem = list.firstChild.nodeType !== 1 ? list.firstChild.nextElementSibling : list.firstChild;\n      firstItem.classList.add('highlight');\n    }\n\n    function highlightLast() {\n      let list = document.getElementById('shoppingList');\n      // lastChild might be a text node (whitespace), so we check and move to the previous element sibling if it is\n      let lastItem = list.lastChild.nodeType !== 1 ? list.lastChild.previousElementSibling : list.lastChild;\n      lastItem.classList.add('highlight');\n    }\n  <\/script>\n</body>\n</html>",rl="// Code snippet demonstrating syntax\nlet firstElement = parentElement.firstElementChild;\nlet lastElement = parentElement.lastElementChild;",al="<!DOCTYPE html>\n<html>\n<head>\n  <title>The firstElementChild and lastElementChild Properties Example</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: lightgreen; }\n  </style>\n</head>\n<body>\n  <h2>Task List</h2>\n  <ul id=\"taskList\">\n    <li>Task 1</li>\n    <li>Task 2</li>\n    <li>Task 3</li>\n  </ul>\n  <button onclick=\"highlightFirstElement()\">Highlight First Task</button>\n  <button onclick=\"highlightLastElement()\">Highlight Last Task</button>\n\n  <script>\n    // Function to highlight the first element child of the list\n    function highlightFirstElement() {\n      // Retrieve the list by its ID\n      let list = document.getElementById('taskList');\n      // Access the first element child\n      let firstElement = list.firstElementChild;\n      // Add the `highlight` class to the first element child\n      firstElement.classList.add('highlight');\n    }\n\n    // Function to highlight the last element child of the list\n    function highlightLastElement() {\n      // Retrieve the list by its ID\n      let list = document.getElementById('taskList');\n      // Access the last element child\n      let lastElement = list.lastElementChild;\n      // Add the `highlight` class to the last element child\n      lastElement.classList.add('highlight');\n    }\n  <\/script>\n</body>\n</html>",il="// Code snippet demonstrating syntax\nlet nextNode = currentNode.nextSibling;\nlet previousNode = currentNode.previousSibling;",ll='<!DOCTYPE html>\n<html>\n<head>\n  <title>The nextSibling and previousSibling Properties Example</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: #ffff99; }\n  </style>\n</head>\n<body>\n  <ul id="itemList">\n    <li>Item 1 <button onclick="highlightNext(this)">Next</button></li>\n    <li>Item 2 <button onclick="highlightPrevious(this)">Previous</button> <button onclick="highlightNext(this)">Next</button></li>\n    <li>Item 3 <button onclick="highlightPrevious(this)">Previous</button></li>\n  </ul>\n\n  <script>\n    function highlightNext(element) {\n      // Get the next sibling of the parent `<li>\' element\n      let nextItem = element.parentElement.nextSibling;\n      // Check if the next sibling is an element node and highlight it. If not, find the next element sibling.\n      while(nextItem && nextItem.nodeType !== 1) {\n        nextItem = nextItem.nextSibling;\n      }\n      if (nextItem) {\n        nextItem.classList.add(\'highlight\');\n      }\n    }\n\n    function highlightPrevious(element) {\n      // Get the previous sibling of the parent `<li>` element\n      let previousItem = element.parentElement.previousSibling;\n      // Check if the previous sibling is an element node and highlight it. If not, find the previous element sibling.\n      while(previousItem && previousItem.nodeType !== 1) {\n        previousItem = previousItem.previousSibling;\n      }\n      if (previousItem) {\n        previousItem.classList.add(\'highlight\');\n      }\n    }\n  <\/script>\n</body>\n</html>',cl="// Code snippet demonstrating syntax\nlet nextSibling = currentElement.nextElementSibling;\nlet previousSibling = currentElement.previousElementSibling;",_l="<!DOCTYPE html>\n<html>\n<head>\n  <title>The nextElementSibling and previousElementSibling Properties Example</title>\n  <style>\n    :root { font-size: 16px; }\n    .highlight { background-color: lightcoral; }\n    .highlighted { background-color: lightblue; }\n  </style>\n</head>\n<body>\n  <h2>Interactive List</h2>\n  <ul id=\"interactiveList\">\n    <li>Item 1 <button onclick=\"highlightSibling(this, 'next')\">Next</button></li>\n    <li>Item 2 <button onclick=\"highlightSibling(this, 'prev')\">Previous</button><button onclick=\"highlightSibling(this, 'next')\">Next</button></li>\n    <li>Item 3 <button onclick=\"highlightSibling(this, 'prev')\">Previous</button></li>\n  </ul>\n\n  <script>\n    function highlightSibling(buttonElement, direction) {\n      // Remove existing highlights\n      document.querySelectorAll('.highlighted').forEach(function(item) {\n        item.classList.remove('highlighted');\n      });\n\n      let currentLi = buttonElement.parentNode; // The `<li>` element\n      let targetLi = null; // Target `<li>` element to highlight\n      \n      if (direction === 'next') {\n        targetLi = currentLi.nextElementSibling; // Get the next element sibling\n      } else if (direction === 'prev') {\n        targetLi = currentLi.previousElementSibling; // Get the previous element sibling\n      }\n\n      if (targetLi) {\n        targetLi.classList.add('highlighted'); // Add highlight class to the target\n      }\n    }\n  <\/script>\n</body>\n</html>",hl="// Code snippet demonstrating syntax\nelement.addEventListener('click', () => { /* Code goes here */ });",dl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Click Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Paragraph that will have its text changed --\x3e\n  <p id=\"message\">Click the button to change this text!</p>\n  \x3c!-- Button that will trigger the click event --\x3e\n  <button id=\"changeTextBtn\">Click Me!</button>\n\n  <script>\n    // JavaScript to handle the click event\n    document.getElementById('changeTextBtn').addEventListener('click', () => {\n      // Change the text of the paragraph with id=\"message\"\n      document.getElementById('message').textContent = 'The text has been changed!';\n    });\n  <\/script>\n</body>\n</html>",ul="// Code snippet demonstrating syntax\nelement.addEventListener('dbclick', () => { /* Code goes here */ });",pl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Double Click Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Paragraph that will have its text color changed on double click --\x3e\n  <p id=\"message\">Double-click me to change my text color to red!</p>\n\n  <script>\n    // Access the paragraph element by its ID \n    let message = document.getElementById('message');\n\n    // JavaScript to handle the dblclick event\n    message.addEventListener('dblclick', () => {\n      // Change the text color of the paragraph with id='message'\n      message.style.color = 'red';\n    });\n  <\/script>\n</body>\n</html>",ml="// Code snippet demonstrating syntax\nelement.addEventListener('mouseover', () => { /* Code goes here */ });",gl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mouseover Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    /* Simple styling for the div */\n    #hoverDiv {\n      width: 200px;\n      height: 100px;\n      background-color: lightgrey;\n      text-align: center;\n      line-height: 100px;\n      margin-top: 20px;\n    }\n  </style>\n</head>\n<body>\n  \x3c!-- Div that will change background color on mouseover --\x3e\n  <div id=\"hoverDiv\">Hover over me!</div>\n\n  <script>\n    // Access the `<div>` element by its ID\n    let hoverDiv = document.getElementById('hoverDiv');\n\n    // JavaScript to handle the mouseover event\n    hoverDiv.addEventListener('mouseover', () => {\n      // Change the background color of the div with id='hoverDiv'\n      hoverDiv.style.backgroundColor = 'blue';\n    });\n  <\/script>\n</body>\n</html>",fl="// Code snippet demonstrating syntax\nelement.addEventListener('mouseout', () => { /* Code goes here */ });",jl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mouseout Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    /* Simple styling for the div */\n    #colorfulDiv {\n      width: 200px;\n      height: 100px;\n      background-color: blue;\n      text-align: center;\n      line-height: 100px;\n      margin-top: 20px;\n      color: white;\n    }\n  </style>\n</head>\n<body>\n  \x3c!-- Div that changes background color on mouseout --\x3e\n  <div id=\"colorfulDiv\">Move your mouse away!</div>\n\n  <script>\n    // Access the `<div>` element by its ID\n    let colorfulDiv = document.getElementById('colorfulDiv');\n\n    // JavaScript to handle the mouseout event\n    colorfulDiv.addEventListener('mouseout', () => {\n      // Change the background color of the div to lightgrey when mouse moves away\n      colorfulDiv.style.backgroundColor = 'lightgrey';\n    });\n  <\/script>\n</body>\n</html>",yl="// Code snippet demonstrating syntax\nelement.addEventListener('mousemove', event => { /* Code goes here */ });",bl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mousemove Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    /* Simple styling for the div */\n    #trackingDiv {\n      width: 300px;\n      height: 150px;\n      background-color: lightblue;\n      text-align: center;\n      line-height: 150px;\n      margin-top: 20px;\n      position: relative; /* Allows for more accurate coordinate tracking */\n    }\n  </style>\n</head>\n<body>\n  \x3c!-- Div to track and display mouse movement --\x3e\n  <div id=\"trackingDiv\">Move your mouse here!</div>\n\n  <script>\n    // Access the `<div>` element by its ID\n    let trackingDiv = document.getElementById('trackingDiv');\n\n    // JavaScript to handle the mousemove event\n    trackingDiv.addEventListener('mousemove', event => {\n      // Calculate mouse coordinates relative to the `div`\n      let mouseX = event.clientX - trackingDiv.getBoundingClientRect().left;\n      let mouseY = event.clientY - trackingDiv.getBoundingClientRect().top;\n      \n      // Display the coordinates within the `div`\n      trackingDiv.textContent = 'Mouse Position: X: ' + mouseX + ', Y: ' + mouseY;\n    });\n  <\/script>\n</body>\n</html>",vl="// Code snippet demonstrating syntax\nelement.addEventListener('mousedown', () => { /* Code goes here */ });\nelement.addEventListener('mouseup', () => { /* Code goes here */ });",wl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Mousedown and Mouseup Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    /* Styling for the button to make it visually appealing */\n    #pressButton {\n      padding: 10px 20px;\n      background-color: lightblue;\n      border: none;\n      cursor: pointer; /* Changes the cursor on hover to indicate it's clickable */\n      font-size: 16px;\n    }\n  </style>\n</head>\n<body>\n  \x3c!-- Button element for demonstrating mousedown and mouseup events --\x3e\n  <button id=\"pressButton\">Press Me</button>\n\n  <script>\n    // Access the button element by its ID\n    let button = document.getElementById('pressButton');\n\n    // Add event listener for the mousedown event\n    button.addEventListener('mousedown', () => {\n      // Change the button's style when it's pressed\n      button.style.backgroundColor = 'darkblue'; // Makes the background dark blue\n      button.style.color = 'white'; // Changes the text color to white for contrast\n    });\n\n    // Add event listener for the mouseup event\n    button.addEventListener('mouseup', () => {\n      // Revert the button's style back to its original state when the mouse button is released\n      button.style.backgroundColor = 'lightblue'; // Changes the background back to light blue\n      button.style.color = 'black'; // Reverts the text color back to black\n    });\n  <\/script>\n</body>\n</html>",xl="// Code snippet demonstrating syntax\nelement.addEventListener('keydown', event => { /* Code goes here */ });\nelement.addEventListener('keyup', event => { /* Code goes here */ });",Cl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Keydown and Keyup Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Text input field for detecting keydown and keyup events --\x3e\n  <input type=\"text\" id=\"inputField\" placeholder=\"Press and release 'Enter' key\">\n\n  <script>\n    // Access the input field by its ID\n    let inputField = document.getElementById('inputField');\n\n    // Add event listener for the keydown event\n    inputField.addEventListener('keydown', event => {\n      // Check if the key pressed is the Enter key\n      if (event.key === 'Enter') {\n        // Change the input field's background color when Enter key is pressed\n        inputField.style.backgroundColor = 'lightgreen';\n      }\n    });\n\n    // Add event listener for the keyup event\n    inputField.addEventListener('keyup', event => {\n      // Check if the key released is the Enter key\n      if (event.key === 'Enter') {\n        // Revert the input field's background color when Enter key is released\n        inputField.style.backgroundColor = '';\n      }\n    });\n  <\/script>\n</body>\n</html>",El="// Code snippet demonstrating syntax\nelement.addEventListener('keypress', event => { /* Code goes here */ });",kl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Keypress Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Text input field for detecting keypress events --\x3e\n  <input type=\"text\" id=\"inputField\" placeholder=\"Type something here\">\n  \x3c!-- Placeholder for displaying the message --\x3e\n  <p id=\"message\"></p>\n\n  <script>\n    // Access the input field and message paragraph by their IDs\n    let inputField = document.getElementById('inputField');\n    let message = document.getElementById('message');\n\n    // Add event listener for the keypress event\n    inputField.addEventListener('keypress', event => {\n      // Display a message including the key pressed using its `key` property\n      message.textContent = 'Key pressed: ' + event.key;\n    });\n  <\/script>\n</body>\n</html>",Ol="// Code snippet demonstrating syntax\nform.addEventListener('submit', event => { /* Code goes here */ });",Dl='<!DOCTYPE html>\n<html>\n<head>\n  <title>Submit Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Form with a text input and a submit button --\x3e\n  <form id="myForm">\n    <label for="textInput">Enter something:</label>\n    <input type="text" id="textInput" name="textInput">\n    <button type="submit">Submit</button>\n  </form>\n  \x3c!-- Placeholder for displaying messages --\x3e\n  <p id="message"></p>\n\n  <script>\n    // Access the form by its ID\n    let form = document.getElementById(\'myForm\');\n\n    // Add event listener for the \'submit\' event\n    form.addEventListener(\'submit\', event => {\n      // Prevent the default form submission\n      event.preventDefault();\n      \n      // Access the text input by its name within the form\n      let inputText = form.textInput.value;\n      \n      // Display an alert with the inputted text\n      //alert(\'Form submitted with input: \' + inputText);\n\n      // Display the message below the form as well\n      document.getElementById(\'message\').textContent = \'Form submitted with input: \' + inputText;\n    });\n  <\/script>\n</body>\n</html>',Tl="// Code snippet demonstrating syntax\nelement.addEventListener('change', event => { /* Code goes here */ });",Il='<!DOCTYPE html>\n<html>\n<head>\n  <title>Change Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Dropdown menu for selecting an option --\x3e\n  <select id="mySelect">\n    <option value="Option 1">Option 1</option>\n    <option value="Option 2">Option 2</option>\n    <option value="Option 3">Option 3</option>\n  </select>\n  \x3c!-- Placeholder for displaying the selected option --\x3e\n  <p id="message">Please select an option.</p>\n\n  <script>\n    // Access the select element by its ID\n    let selectElement = document.getElementById(\'mySelect\');\n    let message = document.getElementById(\'message\');\n\n    // Add event listener for the `change` event\n    selectElement.addEventListener(\'change\', () => {\n      // Display a message with the currently selected option\n      let selectedOption = selectElement.options[selectElement.selectedIndex].text; // Get the text of the selected option\n      message.textContent = \'You selected: \' + selectedOption; // Update the message below the select menu\n    });\n  <\/script>\n</body>\n</html>',Pl="// Code snippet demonstrating syntax\n\n// Function to handle `focus` event\nfunction handleFocus(event) { /* Code goes here */ }\n\n// Function to handle `blur` event\nfunction handleBlur(event) { /* Code goes here */ }\n\n// Add `focus` event listener\nelement.addEventListener('focus', handleFocus);\n// Add `blur` event listener\nelement.addEventListener('blur', handleBlur);",Ll="<!DOCTYPE html>\n<html>\n<head>\n  <title>Focus and Blur Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Two text input fields to demonstrate `focus` and `blur` events --\x3e\n  <input type=\"text\" id=\"inputField1\" placeholder=\"Focus on me\">\n  <input type=\"text\" id=\"inputField2\" placeholder=\"Focus on me too\">\n\n  <script>\n    // Function to change the background color when the field is focused\n    function handleFocus(event) {\n      event.target.style.backgroundColor = 'lightblue';\n    }\n\n    // Function to revert the background color when the field loses focus\n    function handleBlur(event) {\n      event.target.style.backgroundColor = 'white';\n    }\n\n    // Access the input fields by their IDs\n    let inputField1 = document.getElementById('inputField1');\n    let inputField2 = document.getElementById('inputField2');\n\n    // Add focus event listeners to the input fields\n    inputField1.addEventListener('focus', handleFocus);\n    inputField2.addEventListener('focus', handleFocus);\n\n    // Add blur event listeners to the input fields\n    inputField1.addEventListener('blur', handleBlur);\n    inputField2.addEventListener('blur', handleBlur);\n  <\/script>\n</body>\n</html>",Sl="// Code snippet demonstrating syntax\nelement.addEventListener('input', event => { /* Code goes here */ });",Al="<!DOCTYPE html>\n<html>\n<head>\n  <title>Input Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Text input field for user input --\x3e\n  <input type=\"text\" id=\"textInput\" placeholder=\"Start typing...\">\n  \x3c!-- Paragraph to display the user's input in real time --\x3e\n  <p id=\"feedback\">You type, I display!</p>\n\n  <script>\n    // Access the text input field by its ID\n    let textInput = document.getElementById('textInput');\n    // Access the paragraph where the input text will be displayed\n    let feedback = document.getElementById('feedback');\n\n    // Add an event listener for the `input` event on the text input field\n    textInput.addEventListener('input', () => {\n      // Update the paragraph's text content with the current value of the text input field\n      feedback.textContent = 'You typed: ' + textInput.value;\n    });\n  <\/script>\n</body>\n</html>",Nl="// Code snippet demonstrating syntax\ndocument.addEventListener('DOMContentLoaded', () => { /* Code goes here */ });",Bl="<!DOCTYPE html>\n<html>\n<head>\n  <title>DOMContentLoaded Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Placeholder for the message --\x3e\n  <p id=\"message\">Waiting for document to load...</p>\n\n  <script>\n    // Event listener for the `DOMContentLoaded` event\n    document.addEventListener('DOMContentLoaded', () => {\n      // Access the paragraph by its ID\n      let message = document.getElementById('message');\n      // Update the paragraph's text content to indicate the document is loaded\n      message.textContent = 'The document is fully loaded and parsed!';\n    });\n  <\/script>\n</body>\n</html>",Hl="// Code snippet demonstrating syntax\nwindow.addEventListener('load', () => { /* Code goes here */ });",zl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Load Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Placeholder for the loading message --\x3e\n  <p id=\"loadingMessage\">Page is loading, please wait...</p>\n  \x3c!-- Placeholder for the loaded message, initially hidden --\x3e\n  <p id=\"loadedMessage\" style=\"display: none;\">The entire page is fully loaded, including all resources!</p>\n\n  <script>\n    // Event listener for the `load` event on the window object\n    window.addEventListener('load', () => {\n      // Access the paragraphs by their IDs\n      let loadingMessage = document.getElementById('loadingMessage');\n      let loadedMessage = document.getElementById('loadedMessage');\n      \n      // Hide the loading message\n      loadingMessage.style.display = 'none';\n      // Show the loaded message\n      loadedMessage.style.display = 'block';\n    });\n  <\/script>\n</body>\n</html>",Rl="// Code snippet demonstrating syntax\n\n// Function to update the window size\nfunction updateWindowSize() { /* Code goes here */ };\nwindow.addEventListener('load', updateWindowSize);",Fl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Resize Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Placeholder for displaying the window size --\x3e\n  <p id=\"windowSize\">Resize the window to see its size here.</p>\n\n  <script>\n    // Function to update the window size display\n    function updateWindowSize() {\n      let width = window.innerWidth; // Get the current width of the window\n      let height = window.innerHeight; // Get the current height of the window\n      // Update the paragraph's text content with the current window size\n      document.getElementById('windowSize').textContent = 'Window size: ' + width + 'x' + height;\n    }\n\n    // Add event listener for the `resize` event on the `window` object\n    window.addEventListener('resize', updateWindowSize);\n\n    // Initial update so the size is correct even before the first resize\n    updateWindowSize();\n  <\/script>\n</body>\n</html>",Ml="// Code snippet demonstrating syntax\nfunction updateScrollMessage() { /* Code goes here */ };\nwindow.addEventListener('scroll', updateScrollMessage)",Ul="<!DOCTYPE html>\n<html>\n<head>\n  <title>Scroll Event Example</title>\n  <style>\n    :root { font-size: 16px; }\n    /* Adding extra height to the body to ensure there's a scrollbar */\n    body {\n      height: 2000px;\n    }\n    /* Styling for the fixed position message */\n    #scrollMessage {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background-color: lightblue;\n      padding: 10px;\n      border-radius: 5px;\n    }\n  </style>\n</head>\n<body>\n  \x3c!-- Placeholder for displaying the scroll position --\x3e\n  <div id=\"scrollMessage\">Scroll down to see the magic!</div>\n\n  <script>\n    // Function to update the scroll position display\n    function updateScrollMessage() {\n      let scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n      // Update the div's text content with the current scroll position\n      document.getElementById('scrollMessage').textContent = 'You have scrolled ' + scrollPosition + ' pixels.';\n    }\n\n    // Add event listener for the `scroll` event on the window object\n    window.addEventListener('scroll', updateScrollMessage);\n  <\/script>\n</body>\n</html>",ql="// Code snippet demonstrating syntax\nwindow.addEventListener('beforeunload', event => { /* Code goes here */ });",Jl="<!DOCTYPE html>\n<html>\n<head>\n  <title>BeforeUnload Event Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <p>Refresh the page to trigger the event.</p>\n\n  <script>\n    // Add event listener for the `beforeunload` event on the `window` object\n    window.addEventListener('beforeunload', event => {\n      event.preventDefault();\n      // Set the returnValue property of the event to a custom message or true\n      // Note: Most modern browsers ignore custom messages and display a standard dialog text\n      event.returnValue = 'Are you sure you want to leave? Changes you made may not be saved.';\n    });\n  <\/script>\n</body>\n</html>",$l="// Code snippet demonstrating syntax\nwindow.addEventListener('unload', event => { /* Code goes here */ });",Yl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Unload Event Example</title>\n</head>\n<body>\n  <script>\n    // Add event listener for the `unload` event on the window object\n    window.addEventListener('unload', function(event) {\n      // Perform cleanup or save state operations\n    });\n  <\/script>\n</body>\n</html>",Wl='// Code snippet demonstrating syntax\n<button onclick="eventHandler()">Click Me!</button>',Vl='<!DOCTYPE html>\n<html>\n<head>\n  <title>HTML Event Attribute Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Button with an onclick attribute --\x3e\n  <button onclick="displayMessage()">Click Me!</button>\n  \n  \x3c!-- Paragraph where the message will be displayed --\x3e\n  <p id="message">Button not clicked yet.</p>\n\n  <script>\n    // Function called by the onclick event handler\n    function displayMessage() {\n      // Change the text of the paragraph with id="message"\n      document.getElementById(\'message\').textContent = "Button was clicked!";\n    }\n  <\/script>\n</body>\n</html>',Gl='// Code snippet demonstrating syntax\n<button onclick="eventHandler(this, event)">Click Me!</button>',Xl="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Handler Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <button onclick=\"changeText(this, event)\">Click Me!</button>\n\n  <script>\n    function changeText(element, event) {\n      // `element` refers to the button, pointing to `this` passed in\n      element.textContent = 'Button clicked';\n\n      // `event` is the native DOM event object\n      console.log('Event type:', event.type);\n\n      // Additional actions can be performed using `event`, such as preventing default actions\n      event.preventDefault();\n    }\n  <\/script>\n</body>\n</html>",Kl="// Code snippet demonstrating syntax\nelement.onclick = function(event) { /* Code goes here */ };",Ql='<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM Property Event Handling Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  \x3c!-- Button without an onclick attribute in the markup --\x3e\n  <button id="myButton">Click Me!</button>\n  \x3c!-- Paragraph where the message will be displayed --\x3e\n  <p id="message">Button not clicked yet.</p>\n\n  <script>\n    // Get the button element by its ID\n    var myButton = document.getElementById(\'myButton\');\n\n    // Set up the `click` event handler using the DOM property\n    myButton.onclick = function(event) {\n      // Access the event object, e.g., to prevent the default action\n      event.preventDefault();\n      \n      // Change the text of the `<p>\' element with `id="message"`\n      document.getElementById(\'message\').textContent = "Button was clicked!";\n      \n      // Log the event type\n      console.log(\'Event type:\', event.type);\n    };\n  <\/script>\n</body>\n</html>',Zl="// Code snippet demonstrating syntax\n\n// Create event listener\nfunction eventHandler() { /* Code goes here */ };\n// Add event listener\nelement.addEventListener('click', eventHandler);\n// Remove event listener\nbutton.removeEventListener('click', eventHandler);",ec="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Listener Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Button for changing the paragraph text --\x3e\n  <button id=\"changeTextButton\">Change Text</button>\n  \x3c!-- Paragraph where the text will be changed --\x3e\n  <p id=\"textToChange\">This text will change when the button is clicked.</p>\n  \x3c!-- Checkbox to enable or disable the button's event listener --\x3e\n  <input type=\"checkbox\" id=\"toggleEventListener\" checked>\n  <label for=\"toggleEventListener\">Enable Button Event Listener</label>\n\n  <script>\n    // Function to change the paragraph's text\n    function changeText() {\n      document.getElementById('textToChange').textContent = \"Text changed!\";\n    }\n    \n    // Function to add or remove the event listener\n    function toggleEventListener(event) {\n      const button = document.getElementById('changeTextButton');\n      \n      if (event.target.checked) {\n        button.addEventListener('click', changeText);\n      } else {\n        button.removeEventListener('click', changeText);\n      }\n    }\n    \n    // Initially add the event listener to the button\n    document.getElementById('changeTextButton').addEventListener('click', changeText);\n    \n    // Set up the event listener for the checkbox\n    document.getElementById('toggleEventListener').addEventListener('change', toggleEventListener);\n  <\/script>\n</body>\n</html>",tc="// Code snippet demonstrating syntax\nlet property = event.property;",nc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Object Detailed Properties Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <button id=\"infoButton\">Click Me</button>\n  <p id=\"eventType\">Event Type: </p>\n  <p id=\"eventTarget\">Event Target: </p>\n  <p id=\"eventCurrentTarget\">Event CurrentTarget: </p>\n  <p id=\"eventEventPhase\">Event Phase: </p>\n  <p id=\"eventCancelable\">Event Cancelable: </p>\n  <p id=\"eventDefaultPrevented\">Event Default Prevented: </p>\n  <p id=\"eventTimeStamp\">Event TimeStamp: </p>\n\n  <script>\n    document.getElementById('infoButton').addEventListener('click', function(event) {\n      // Display the event type\n      document.getElementById('eventType').textContent = 'Event Type: ' + event.type;\n      \n      // Display the target element tag name\n      document.getElementById('eventTarget').textContent = 'Event Target: ' + event.target.tagName;\n      \n      // Display the current target element tag name\n      document.getElementById('eventCurrentTarget').textContent = 'Event CurrentTarget: ' + event.currentTarget.tagName;\n      \n      // Display the event phase (1 = Capturing, 2 = At Target, 3 = Bubbling)\n      document.getElementById('eventEventPhase').textContent = 'Event Phase: ' + event.eventPhase;\n      \n      // Display if the event is cancelable\n      document.getElementById('eventCancelable').textContent = 'Event Cancelable: ' + event.cancelable;\n      \n      // Display if the default action has been prevented\n      document.getElementById('eventDefaultPrevented').textContent = 'Event Default Prevented: ' + event.defaultPrevented;\n      \n      // Display the event timestamp\n      document.getElementById('eventTimeStamp').textContent = 'Event TimeStamp: ' + event.timeStamp;\n    });\n  <\/script>\n</body>\n</html>",oc="// Code snippet demonstrating syntax\nevent.preventDefault();\nevent.stopPropagation();\nevent.stopImmediatePropagation();",sc='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>Event Object Methods Example</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n    .outer {\n      padding: 20px;\n      background-color: lightblue;\n    }\n    .inner {\n      padding: 20px;\n      background-color: lightcoral;\n    }\n  </style>\n</head>\n<body>\n  <div class="outer" id="outerDiv">Outer Div\n    <div class="inner" id="innerDiv">Inner Div\n      <button id="myButton">Click Me</button>\n    </div>\n  </div>\n\n  <script>\n    // Handler for the button\n    document.getElementById(\'myButton\').addEventListener(\'click\', function(event) {\n      // Prevent the default action (useful if the button was a submit button in a form, for example)\n      event.preventDefault();\n      \n      // Stop the event from propagating to parent elements\n      event.stopPropagation();\n      \n      alert("Button clicked. Event propagation stopped.");\n      \n      // For demonstration, this would stop all other listeners on the button from being called, if there were any.\n      event.stopImmediatePropagation();\n    });\n\n    // Handler for the inner div\n    document.getElementById(\'innerDiv\').addEventListener(\'click\', function() {\n      // This alert won\'t show because stopPropagation() in the button\'s handler prevents the event from reaching here\n      alert("Inner div clicked.");\n    });\n\n    // Handler for the outer div\n    document.getElementById(\'outerDiv\').addEventListener(\'click\', function() {\n      // This alert won\'t show either due to stopPropagation()\n      alert("Outer div clicked.");\n    });\n  <\/script>\n</body>\n</html>',rc="// Code snippet demonstrating syntax\n\n// Event bubbling\nelement1.addEventListener('click', eventHandler);\n\n// Event capturing\nelement2.addEventListener('click', eventHandler, true);",ac="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling and Capturing Example</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n    div {\n      padding: 20px;\n      border: 1px solid black;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"outerDiv1\">\n    <h2>Bubbling:</h2>\n    <div id=\"innerDiv1\">Click Me!</div>\n  </div>\n\n  <div id=\"outerDiv2\">\n    <h2>Capturing:</h2>\n    <div id=\"innerDiv2\">Click Me!</div>\n  </div>\n</div>\n  <script>\n    // Define an event handler function that alerts the ID of the current target element\n    function eventHandler(event) {\n      alert('Event handler triggered on: ' + event.currentTarget.id);\n      // Uncomment the line below to stop the event from propagating further\n      // event.stopPropagation();\n    }\n    \n    // Get references to the first pair of div elements for demonstrating event bubbling\n    let innerDiv1 = document.getElementById('innerDiv1');\n    let outerDiv1 = document.getElementById('outerDiv1');\n    \n    // Get references to the second pair of div elements for demonstrating event capturing\n    let innerDiv2 = document.getElementById('innerDiv2');\n    let outerDiv2 = document.getElementById('outerDiv2');\n    \n    // Attach event listeners to the first pair of div elements to demonstrate event bubbling\n    // Here, 'false' indicates that events will bubble from the inner div to the outer div\n    innerDiv1.addEventListener('click', eventHandler, false);\n    outerDiv1.addEventListener('click', eventHandler, false);\n    \n    // Attach event listeners to the second pair of div elements to demonstrate event capturing\n    // Here, 'true' indicates that events will be captured from the outer div to the inner div\n    innerDiv2.addEventListener('click', eventHandler, true);\n    outerDiv2.addEventListener('click', eventHandler, true);  \n  <\/script>\n</body>\n</html>",ic="// Code snippet demonstrating syntax\nparentElement.addEventListener('click' /* Or other events */, event => {\n  // Check if the clicked element is a child element\n  if (event.target.tagName === childElementTagName) {\n    // Code goes here\n  }\n});",lc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Delegation Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <ul id=\"myList\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n    \x3c!-- More items can be dynamically added here --\x3e\n  </ul>\n\n  <script>\n    // Attach an event listener to the parent `<ul>` element\n    document.getElementById('myList').addEventListener('click', function(event) {\n      // Check if the clicked element is a <li>\n      if (event.target.tagName === 'LI') {\n        alert('You clicked on item: ' + event.target.textContent);\n      }\n    });\n  <\/script>\n</body>\n</html>",cc="// Code snippet demonstrating syntax\n\n// Fetch data from the server\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => {\n    // Access container element\n    const container = document.getElementById('data-container');\n \n    // Create a new list element for each data item\n    data.forEach(item => {\n      const listItem = document.createElement('li');\n      listItem.textContent = item.name;\n      container.appendChild(listItem);\n    });\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",_c="<!DOCTYPE html>\n<html>\n<head>\n  <title>Dynamic HTML Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  \x3c!-- Container to display fetched data --\x3e\n  <ul id=\"data-container\"></ul>\n \n  <script>\n    // Use the Fetch API to retrieve data from a local JSON file\n    fetch('assets/data/json/list.json')\n      .then(response => response.json()) // Convert the response to JSON\n      .then(data => {\n        // Get the container element where the data will be displayed\n        const container = document.getElementById('data-container');\n \n        // Loop through each item in the fetched data\n        data.forEach(item => {\n          // Create a new list item (li) element for each data item\n          const listItem = document.createElement('li');\n          // Set the text content of the list item to the 'name' property of the data item\n          listItem.textContent = item.name;\n          // Append the newly created list item to the container\n          container.appendChild(listItem);\n        });\n      })\n      .catch(error => {\n        // Log any errors that occur during the fetch operation\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",hc="// Code snippet demonstrating syntax\nfunction callbackFunction(result) {\n  // Code to be executed when the callback is invoked\n}\n\n// Passing callbackFunction as a callback to another function\nsomeFunction(callbackFunction);",dc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Javascript Callback Function Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function called 'greet' with parameters 'name' and 'callback'\n    function greet(name, callback) {\n      const message = 'Hello, ' + name + '!';\n    \n      // Call the 'callback' function and pass the 'message' as an argument\n      callback(message);\n    }\n    \n    function displayMessage(message) {\n      console.log(message);\n    }\n    \n    // Call the 'greet' function with arguments 'John' as the name and 'displayMessage' as the callback\n    greet('John', displayMessage);\n  <\/script>\n</body>\n</html>",uc="// Asynchronous function that simulates making an API request\nfunction fetchDataFromAPI(callback) {\n  // Simulating API request delay with setTimeout\n  setTimeout(() => {\n    const data = ['John', 'Jane', 'Alice'];\n    callback(data);\n  }, 2000); // Simulate 2 seconds delay\n}\n\n// Callback function to handle the fetched data\nfunction handleData(data) {\n  console.log(data);\n}",pc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Asynchronous Callback Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Asynchronous function that simulates making an API request\n    function fetchDataFromAPI(callback) {\n      // Simulating API request delay with setTimeout\n      setTimeout(() => {\n        const data = ['John', 'Jane', 'Alice'];\n        callback(data);\n      }, 2000); // Simulate 2 seconds delay\n    }\n\n    // Callback function to handle the fetched data\n    function handleData(data) {\n      console.log(data);\n    }\n\n    fetchDataFromAPI(handleData);\n  <\/script>\n</body>\n</html>",mc="// Code snippet demonstrating syntax\n\n// Create a new Promise object\nconst myPromise = new Promise((resolve, reject) => {\n  // Placeholder for asynchronous operation (e.g., API call, file read)\n  const operationWasSuccessful = true; // Simulate the outcome of an async operation\n\n  if (operationWasSuccessful) {\n    // If operation succeeds, resolve the promise with a success message\n    resolve('Operation succeeded');\n  } else {\n    // If operation fails, reject the promise with a failure message\n    reject('Operation failed');\n  }\n});",gc="// Code snippet demonstrating syntax\nmyPromise.then(result => { /* Handling code goes here */ });",fc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Consuming Promise Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function that returns a promise based on the success of an operation\n    function promiseWrapper(successful) {\n      // Create a new Promise object\n      return new Promise((resolve, reject) => {\n        // Use the successful parameter to simulate the outcome of an async operation\n        let operationWasSuccessful = successful;\n      \n        if (operationWasSuccessful) {\n          // If operation is successful, resolve the promise with a success message\n          resolve('Operation succeeded');\n        } else {\n          // If operation fails, reject the promise with a failure message\n          reject('Operation failed');\n        }\n      });\n    }\n    \n    // Execute promiseWrapper with true to simulate a successful operation\n    promiseWrapper(true)\n      .then(\n        result => {\n          // Log the success message if the promise is resolved\n          console.log(result); // Expected output: \"Operation succeeded\"\n        }\n      );\n  <\/script>\n</body>\n</html>",jc="// Code snippet demonstrating syntax\nmyPromise.catch(error => { /* Handling code goes here */ });",yc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Consuming Promise Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function that returns a promise, simulating an asynchronous operation\n    function promiseWrapper(successful) {\n      // Return a new Promise object\n      return new Promise((resolve, reject) => {\n        // Determine the outcome of the simulated operation based on the successful parameter\n        let operationWasSuccessful = successful;\n      \n        if (operationWasSuccessful) {\n          // Resolve the promise with a success message if the operation is successful\n          resolve('Operation succeeded');\n        } else {\n          // Reject the promise with a failure message if the operation fails\n          reject('Operation failed');\n        }\n      });\n    }\n    \n    // Call promiseWrapper with true to simulate a successful operation\n    promiseWrapper(false)\n      .then(result => {\n        // Log the `result` if the promise is resolved\n        console.log(result); // Expected output: \"Operation succeeded\"\n      })\n      .catch(error => {\n        // Log the `error` if the promise is rejected\n        console.error(error); // This line is for handling failures, not expected to run in this case\n      });\n  <\/script>\n</body>\n</html>",bc="// Code snippet demonstrating syntax\nmyPromise.finally(() => { /* Handling code goes here */ });",vc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Consuming Promise Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Defines a function that returns a promise simulating an asynchronous operation\n    function promiseWrapper(successful) {\n      // Returns a new Promise object\n      return new Promise((resolve, reject) => {\n        // Uses the successful parameter to determine the outcome of the simulated operation\n        let operationWasSuccessful = successful;\n      \n        if (operationWasSuccessful) {\n          // Resolve the promise with a success message if the operation is successful\n          resolve('Operation succeeded');\n        } else {\n          // Reject the promise with a failure message if the operation fails\n          reject('Operation failed');\n        }\n      });\n    }\n    \n    // Execute `promiseWrapper` with a true argument to simulate a successful operation\n    promiseWrapper(true)\n      .then(result => {\n        // Log the result if the promise is resolved\n        console.log(result); // Expected output: \"Operation succeeded\"\n      })\n      .catch(error => {\n        // Log the error if the promise is rejected\n        console.error(error); // This line is for handling failures, not expected to run in this case\n      })\n      .finally(() => {\n        // Execute after the promise is either resolved or rejected\n        console.log('Promise settled'); // Expected to run after the promise settles, indicating the promise chain is complete\n      });\n  <\/script>\n</body>\n</html>",wc="// Code snippet demonstrating syntax\nmyPromise.then(result => newValue).then(result => { /* Handling code goes here */ });",xc='<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Chaining Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Initialize a promise chain with a new Promise object\n    const promiseChain = new Promise((resolve, reject) => {\n      // Immediately resolve the promise with a value of 1\n      resolve(1);\n    })\n    .then(result => result * 2) // First `.then()` receives the resolved value (1) and multiplies it by 2\n    .then(result => result * 3) // Second `.then()` receives the previous result (2) and multiplies it by 3\n    .then(result => {\n      console.log(result); // Output: 6\n      return result;\n    }); // Third `.then()` receives the previous result (6), log it, and return it\n  <\/script>\n</body>\n</html>',Cc="// Code snippet demonstrating syntax\nPromise.resolve(value);\nPromise.reject(message);",Ec="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Resolve and Reject Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Function to simulate fetching user data based on a userId\n    function getUser(userId) {\n      // Check if the provided `userId` is valid (positive)\n      if (userId <= 0) {\n        // If `userId is invalid, return a rejected Promise with an error message\n        return Promise.reject('Invalid user ID');\n      }\n\n      // If `userId` is valid, return a resolved Promise with a user object\n      return Promise.resolve({ id: userId, name: 'John Doe' });\n    }\n\n    // Fetch user with a valid ID and log the user data\n    getUser(10).then(user => {\n      // This block is executed for a resolved Promise\n      console.log(user); // Expected output: { id: 10, name: 'John Doe' }\n    });\n\n    // Attempt to fetch user with an invalid ID (0) and log the error\n    getUser(0).catch(error => {\n      // This block is executed for a rejected Promise\n      console.error(error); // Expected output: Invalid user ID\n    });\n  <\/script>\n</body>\n</html>",kc="// Code snippet demonstrating syntax\nPromise.all([Promise.resolve('A'), Promise.resolve('B')]).then(results => { /* Handling code goes here */ });",Oc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise All Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Using `Promise.all` with all promises resolving\n    Promise.all([\n      Promise.resolve('A'), // First promise resolves with the value 'A'\n      Promise.resolve('B') // Second promise resolves with the value 'B'\n    ])\n    .then(results => {\n      // Both promises resolved successfully, so this callback is executed\n      console.log(results); // Expected output: ['A', 'B']\n    })\n    .catch(error => {\n      // This block is not executed because there are no rejected promises\n      console.error(error);\n    });\n\n    // Using `Promise.all` with one of the promises being rejected\n    Promise.all([\n      Promise.resolve('A'), // First promise resolves with the value 'A'\n      Promise.reject('B rejected') // Second promise is rejected with the reason 'B rejected'\n    ])\n    .then(results => {\n      // This block is not executed because one of the promises was rejected\n      console.log(results);\n    })\n    .catch(error => {\n      // This block is executed because at least one promise was rejected\n      console.error(error); // Expected output: 'B rejected'\n    });\n  <\/script>\n</body>\n</html>",Dc="// Code snippet demonstrating syntax\nPromise.race([Promise.resolve('A'), Promise.resolve('B')]).then(results => { /* Handling code goes here */ });",Tc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Race Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Using `Promise.race` with two promises that both resolve\n    Promise.race([\n      Promise.resolve('A'), // This promise resolves immediately with the value 'A'\n      Promise.resolve('B')  // This promise also resolves immediately with the value 'B'\n    ])\n    .then(result => {\n      // This block is executed with the result of the first promise to resolve\n      console.log(result); // Expected output: \"A\"\n    })\n    .catch(error => {\n      // This block would be executed if any of the promises rejected first,\n      // but in this case, it will not execute because both promises resolve.\n      console.error(error);\n    });\n\n    // Using `Promise.race` to handle the first settled promise from the provided list\n    Promise.race([\n      Promise.resolve('A'), // This promise resolves immediately with the value 'A'\n      Promise.reject('B rejected')   // This promise rejects immediately with the reason 'B rejected'\n    ])\n    .then(result => {\n      // This block is executed because the resolved promise ('A') settles first\n      console.log(result); // Expected output: \"A\"\n    })\n    .catch(error => {\n      // This block would be executed if the first promise to settle was a rejection\n      console.error(error);\n    });\n\n    // Using `Promise.race` with two promises that both reject\n    Promise.race([\n      Promise.reject('A rejected'), // This promise rejects immediately with the reason 'A rejected'\n      Promise.reject('B rejected')  // This promise also rejects immediately with the reason 'B rejected'\n    ])\n    .then(result => {\n      // This block would be executed if any of the promises resolved first,\n      // but in this case, it will not execute because both promises reject.\n      console.log(result);\n    })\n    .catch(error => {\n      // This block is executed because the first promise to settle is a rejection ('A')\n      console.error(error); // Expected output: \"A rejected\"\n    });\n  <\/script>\n</body>\n</html>",Ic="// Code snippet demonstrating syntax\nPromise.allSettled([Promise.resolve('A'), Promise.reject('B')]).then(results => { /* Handling code goes here */ });",Pc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise All Settled Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Using `Promise.allSettled` with promises that all resolve\n    Promise.allSettled([\n      Promise.resolve('A'), // This promise resolves with the value 'A'\n      Promise.resolve('B')  // This promise resolves with the value 'B'\n    ])\n    .then(results => {\n      // Log the array of outcome objects for each promise\n      console.log(results); // Expected output: [{ status: 'fulfilled', value: 'A' }, { status: 'fulfilled', value: 'B' }]\n    });\n\n    // Using `Promise.allSettled` with a mix of resolved and rejected promises\n    Promise.allSettled([\n      Promise.resolve('A'), // This promise resolves with the value 'A'\n      Promise.reject('B rejected')   // This promise rejects with the reason 'B rejected'\n    ])\n    .then(results => {\n      // Log the array of result objects, each describing the outcome of each promise\n      console.log(results); // Expected output: [{ status: \"fulfilled\", value: 'A' }, { status: \"rejected\", reason: 'B rejected' }]\n    });\n  <\/script>\n</body>\n</html>",Lc="// Code snippet demonstrating syntax\nPromise.any([Promise.reject('A'), Promise.reject('B')]).then(result => { /* Handling code goes here */ })",Sc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Any Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Using `Promise.any` with promises that all resolve\n    Promise.any([\n      Promise.resolve('A'), // This promise resolves immediately with the value 'A'\n      Promise.resolve('B')  // This promise also resolves immediately with the value 'B'\n    ])\n    .then(result => {\n      // This block is executed because at least one promise (the first one that resolves) fulfills\n      console.log(result); // Expected output: \"A\"\n    })\n    .catch(error => {\n      // This block is executed if all promises are rejected,\n      // which does not happen in this case since both promises resolve.\n      console.error(error);\n    });\n    \n    // Using `Promise.any` with a mix of rejected and resolved promises\n    Promise.any([\n      Promise.reject('A rejected'), // This promise rejects with the reason 'A rejected'\n      Promise.resolve('B')  // This promise resolves with the value 'B'\n    ])\n    .then(result => {\n      // This block is executed because at least one promise (the second) resolves\n      console.log(result); // Expected output: \"B\"\n    })\n    .catch(error => {\n      // This block is executed if all promises are rejected\n      // It's not executed in this case because the second promise resolves\n      console.error(error);\n    });\n\n    // Using `Promise.any` with promises that all reject\n    Promise.any([\n      Promise.reject('A rejected'), // This promise rejects with the reason 'A rejected'\n      Promise.reject('B rejected')  // This promise also rejects with the reason 'B rejected'\n    ])\n    .then(result => {\n      // This block is not executed because all promises reject\n      console.log(result);\n    })\n    .catch(error => {\n      // This block is executed due to all promises being rejected\n      // The error is an `AggregateError` containing all rejection reasons\n      console.error(error.message); // Expected to log a message 'All promises were rejected'\n      console.error(error.errors); // Expected to log an AggregateError with reasons ['A rejected', 'B rejected']\n    });\n  <\/script>\n</body>\n</html>",Fn="// Define an async function named helloAsync\nasync function helloAsync() {\n  // The async function implicitly returns a promise resolved with the string 'Hello, async!'\n  return 'Hello, async!';\n}\n\n// Call the async function, which returns a promise\nhelloAsync().then((value) => {\n  // Use `then()` to handle the resolved value of the promise\n  console.log(value); // Output: 'Hello, async!'\n});",Ac=e(Fn),Mn="// Define an async function to fetch user data \nasync function fetchUserData(userId) { \n  try { \n    // Use the `fetch` function with `await` to pause execution until the request completes \n    const response = await fetch(`assets/data/json/user/${userId}.json`); // Simulate an endpoint \n    \n    // Check if the request was successful \n    if (!response.ok) { \n      // If the response status is not OK, throw an error \n      throw new Error(`Failed to fetch data for user ${userId}: ${response.statusText}`); \n    } \n    \n    // Use `await` again to pause execution until the JSON data is parsed \n    const userData = await response.json(); \n    \n    // Log or process the user data \n    console.log(userData); \n  } catch (error) { \n    // If there's an error in any of the await statements, catch it here \n    console.error('Error fetching user data:', error); \n  } \n} \n\n// Call the async function with a user ID \nfetchUserData(1); // Assume '1' is a valid user ID for demonstration purposes",Nc=e(Mn),Bc="// Adding an event listener to a DOM element for 'click' event\ndocument.getElementById('myButton').addEventListener('click', function() {\n  alert('Button Clicked!');\n});",Hc="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event-Driven Programming</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <button id=\"myButton\">Click Me!</button>\n  <script>\n    // Adding an event listener to the button element for 'click' event\n    document.getElementById('myButton').addEventListener('click', function() {\n      alert('Button Clicked!');\n    });\n  <\/script>\n</body>\n</html>",zc="let title = window.document.title; // Gets the title of the document\nconsole.log(title); // Output the title of the current web page",Rc="<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html {\n      font-size: 16px;\n    }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    let title = window.document.title;\n    console.log(title); // Output: My Webpage (Note: 'My Webpage' was specified in title tag)\n  <\/script>\n</body>\n</html>",Un="let width = window.innerWidth; // Gets the width of the viewport in pixels\nlet height = window.innerHeight; // Gets the height of the viewport in pixels\nconsole.log(width, height) // Output width and height of the viewport in pixels",Fc=e(Un),Mc="let frames = window.frames; // Access all the iframes in the document",Uc='<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n    iframe { \n      height: 10px;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <iframe></iframe>\n  <iframe></iframe>\n  <script>\n    let frames = window.frames;\n    console.log(frames.length); // Output: 2\n  <\/script>\n</body>\n</html>',qc="let newWindow = window.open('https://www.example.com');\nwindow.close(); // Closes the current window",Jc="<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n<script>\n  let newWindow;\n\n  function onOpenWindow() {\n    newWindow = window.open('assets/webpages/large-webpage.html', 'newWindow', 'width=200, height=150, left=100, top=150');\n  }\n\n  function onOpenWindow() {\n    newWindow.close();\n  }\n<\/script>\n<button onclick=\"onOpenWindow()\">Open Window</button>\n<br />\n<button onclick=\"onOpenWindow()\">Close Window</button>\n</body>\n</html>",$c="window.scrollTo(0, 300); // Scrolls the window to coordinates (0, 300)\nwindow.scrollBy(0, 200); // Scrolls the window 200 pixels down from the current position",Yc='<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n    div {\n      width: 300px;\n    }\n    iframe {\n      border-width: 0;\n      height: 800px;\n      width: 300px;\n      overflow-y: hidden;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    function onScrollTo() {\n      window.scrollTo(0, 300);\n    }\n\n    function onScrollBy() {\n      window.scrollBy(0, 200);\n    }\n  <\/script>\n  <div>\n    <button onclick="onScrollTo()">Srcoll Window Using <strong>window.scrollTo()</strong></button>\n    <br />\n    <button onclick="onScrollBy()">Srcoll Window Using <strong>window.scrollBy()</strong></button>\n    <iframe src="assets/webpages/large-webpage.html"></iframe>\n  <div>\n</body>\n</html>',Wc="// Creating an alert dialog\nalert('This is an alert dialog box!');\n\n// Creating a confirm dialog\nlet userResponse = confirm('Do you really want to proceed?');\nif (userResponse) {\n    console.log('User clicked OK!');\n} else {\n    console.log('User clicked Cancel!');\n}\n\n// Creating a propmt dialog\nlet userName = prompt('Please enter your name:', 'John Doe');\nif (userName != null) {\n    console.log('Hello, ' + userName + '!');\n}",Vc="<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function onAlert() {\n      window.alert('This is an alert dialog box!');\n    }\n\n    function onPrompt() {\n      let userName = window.prompt('Please enter your name:', 'John Doe');\n      if (userName != null) {\n          console.log('Hello, ' + userName + '!');\n      }\n    }\n\n    function onConfirm() {\n      let userResponse = window.confirm('Do you really want to proceed?');\n      if (userResponse) {\n          console.log('User clicked OK!');\n      } else {\n          console.log('User clicked Cancel!');\n      }\n    }\n  <\/script>\n  <div>\n    <button onclick=\"onAlert()\">Creating an Alert Dialog Using <strong>window.alert()</strong></button>\n    <br />\n    <button onclick=\"onPrompt()\">Creating a ConFirm Dialog Using <strong>window.prompt()</strong></button>\n    <br />\n    <button onclick=\"onConfirm()\">Creating a Prompt Dialog Using <strong>window.confirm()</strong></button>\n  <div>\n</body>\n</html>",Gc="// Creating setTimeout\nlet timeoutID = setTimeout(() => {\n  console.log('This message is shown after 3 seconds');\n}, 3000);\n\n// Clearing setTimeout\nclearTimeout(timeoutID);\n\n// Creating setInterval\nlet intervalID = setInterval(() => {\n  console.log('This message is shown every 2 seconds');\n}, 2000);\n\n// Clearing setInterval\nclearInterval(intervalID);",Xc='<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n    button {\n      cursor: pointer;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    let timeoutID;\n\n    function onSetTimeout() {\n      timeoutID = window.setTimeout(() => {\n        console.log(\'This message is shown after 3 seconds\');\n      }, 3000);\n    }\n\n    function onClearTimeout() {\n      if(timeoutID) {\n        window.clearTimeout(timeoutID);\n        timeoutID = null;\n        console.log(\'The setTimeout is cleared\');\n      }\n    }\n\n    let intervalID;\n\n    function onSetInterval() {\n      intervalID = window.setInterval(() => {\n        console.log(\'This message is shown every 2 seconds\');\n      }, 2000);\n    }\n\n    function onClearInterval() {\n      if(intervalID) {\n        window.clearInterval(intervalID);\n        intervalID = null;\n        console.log(\'The interval is cleared\');\n      }\n    }\n  <\/script>\n  <div>\n    <button onclick="onSetTimeout()">Creating Timeout Using <strong>window.setTimeout()</strong></button>\n    <br />\n    <button onclick="onClearTimeout()">Clearing Timeout Using <strong>window.clearTimeout()</strong></button>\n    <br />\n    <button onclick="onSetInterval()">Creating Interval Using <strong>window.setInterval()</strong></button>\n    <br />\n    <button onclick="onClearInterval()">Clearing Interval Using <strong>window.clearInterval()</strong></button>\n  <div>\n</body>\n</html>',qn='var globalVar = "I\'m a global variable";\nconsole.log(window.globalVar); // Accesses the global variable',Kc=e(qn),Jn="window.addEventListener('resize', () => {\n  console.log('Window size changed');\n});",Qc=e(Jn),$n="let screenWidth = screen.width;\nlet screenHeight = screen.height;\nconsole.log(screenWidth, screenHeight); // Output depend on device",Zc=e($n),Yn="let availableScreenWidth = screen.availWidth;\nlet availableScreenHeight = screen.availHeight;\nconsole.log(availableScreenWidth, availableScreenHeight) // Output depend on device",e_=e(Yn),Wn="let colorDepth = screen.colorDepth;\nconsole.log(colorDepth); // Output depends on device",t_=e(Wn),Vn="let pixelDepth = screen.pixelDepth;\nconsole.log(pixelDepth); // Output depends on device",n_=e(Vn),Gn="if (screen.width <= 480) {\n  console.log('Load mobile-specific content or layout');\n} else {\n  console.log('Load desktop-specific content or layout');\n}",o_=e(Gn),Xn="if (screen.colorDepth > 24) {\n  console.log('Use high-quality images');\n} else {\n  console.log('Use standard-quality images');\n}",s_=e(Xn),Kn="window.open( \n  'assets/webpages/hello.html', \n  'newWindow', \n  `width=200, height=150, left=${(screen.availWidth-400)/2}, top=${(screen.availHeight-300)/2}` \n);",r_=e(Kn),a_="let href = location.href;\nconsole.log(href); // Output the current URL",i_=e('location.href = "assets/webpages/location-href-example.html";'),l_="let protocol = location.protocol;\nconsole.log(protocol); // Output 'http:' or 'https:'",c_=e('location.href = "assets/webpages/location-protocol-example.html";'),__="let host = location.host;\nconsole.log(host); // Output 'example.com:80', for instance",h_=e('location.href = "assets/webpages/location-host-example.html";'),d_="let hostname = location.hostname;\nconsole.log(hostname); // Output 'example.com'",u_=e('location.href = "assets/webpages/location-hostname-example.html";'),p_="let port = location.port;\nconsole.log(port); // Output '80', for instance",m_=e('location.href = "assets/webpages/location-port-example.html";'),g_="let pathname = location.pathname;\nconsole.log(pathname); // Output '/path/'",f_=e('location.href = "assets/webpages/location-pathname-example.html";'),j_="let search = location.search;\nconsole.log(search); // Output '?query=string', for instance",y_=e('location.href = "assets/webpages/location-search-example.html?id=123";'),b_="let hash = location.hash;\nconsole.log(hash); // Output '#section1', for instance",v_=e('location.href = "assets/webpages/location-hash-example.html#section/12";'),w_='// Please refer to the reload example in "Use Cases"\nlocation.reload(); // Reloads the current page',x_="// Please refer to the redirect example in \"Use Cases\"\nlocation.replace('https://www.newsite.com'); // Redirects to newsite.com without adding a history entry",C_="// Please refer to the redirect example in \"Use Cases\"\nlocation.assign('https://www.newsite.com'); // Redirects to newsite.com and adds a history entry",E_="location.href = 'https://www.newsite.com'; // Redirects the browser to newsite.com\nlocation.assign('https://www.newsite.com'); // Redirects to newsite.com and adds a history entry",k_="<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n  </style>\n</head>\n<body>\n  <script>\n    function onRedirectWithHref() {\n      location.href = 'assets/webpages/location-redirect-example.html';\n    }\n\n    function onRedirectWithAssign() {\n      location.assign('assets/webpages/location-redirect-example.html');\n    }\n  <\/script>\n  <button onclick=\"onRedirectWithHref()\">Click to Redirect Using <strong>location.href</strong> Property</button>\n  <button onclick=\"onRedirectWithAssign()\">Click to Redirect Using <strong>location.assign</strong> Method</button>\n</body>\n</html>",O_="location.reload(); // Reloads the current page",D_='<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html {\n      font-size: 16px;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    function onReload() {\n      // Simulate loading a big webpage by delaying a second to reload\n      console.log(\'Loading ...\');\n      setTimeout(() => {\n        location.reload();\n      }, 1000);\n    }\n  <\/script>\n  <button onclick="onReload()">Click to Reload Using <strong>location.reload</strong> Method</button>\n</body>\n</html>',T_="let protocol = location.protocol; // 'http:' or 'https:'\nlet host = location.host; // 'example.com:8080'\nlet hostname = location.hostname;  // 'example.com'\nlet port = location.port; // '8080'\nlet pathname = location.pathname; // '/path/page'\nlet search = location.search; // '?query=string'\nlet hash = location.hash; // '#section'",I_="let params = new URLSearchParams(location.search);\nlet id = params.get('id'); // Assuming URL is '...?id=123'\nconsole.log(id); // Output: 123",P_=e('location.href = "assets/webpages/location-query-string-example.html?id=123";'),L_="window.onhashchange = function() { \n  console.log(`New hash: ${location.hash}`); \n};",S_="<!DOCTYPE html>\n<html>\n<head>\n  <title>My Webpage</title>\n  <style>\n    html {\n      font-size: 16px;\n    }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function onChangeHash() {\n      location.hash = 'section/1';\n    }\n\n    window.addEventListener('hashchange', () => {\n      console.log('Current hash:', window.location.hash);\n    });\n  <\/script>\n  <button onclick=\"onChangeHash()\">Click to Change URL Hash Using <strong>location.hash</strong> Property</button>\n</body>\n</html>",Qn="let length = window.history.length;\nconsole.log(length); // Output the number of pages in the session history",A_=e(Qn),N_="history.back(); // Navigates to the previous page",B_="history.forward(); // Navigates to the next page",H_="history.go(-1); // Equivalent to history.back()\nhistory.go(1); // Equivalent to history.forward()\nhistory.go(0); // Reloads the current page",z_="history.pushState({ page: 'newpage' }, 'New Page', 'newpage.html');",R_="history.replaceState({ page: 'anotherpage' }, 'Another Page', 'anotherpage.html');",F_="// When a new content is loaded\nhistory.pushState({contentID: 'content123'}, 'Content Title', '/content/123');",M_="window.onpopstate = function(event) {\n  if(event.state) {\n    loadContent(event.state.contentID); // Function to load content based on state\n  }\n};",U_="history.replaceState(null, null, '/newpage');",Zn="let appName = navigator.appName;\nconsole.log(appName); // e.g., 'Netscape' for modern browsers",q_=e(Zn),eo="let appVersion = navigator.appVersion;\nconsole.log(appVersion); // e.g., '5.0 (Windows)'",J_=e(eo),to="let userAgent = navigator.userAgent;\nconsole.log(userAgent); // e.g., 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)...'",$_=e(to),no="let platform = navigator.platform;\nconsole.log(platform); // e.g., 'Win32'",Y_=e(no),oo="let language = navigator.language;\nconsole.log(language); // e.g., 'en-US'",W_=e(oo),so="let languages = navigator.languages;\nconsole.log(languages); // e.g., ['en-US', 'en', 'fr']",V_=e(so),ro="let onLine = navigator.onLine;\nconsole.log(onLine); // true or false",G_=e(ro),ao="let cookieEnabled = navigator.cookieEnabled;\nconsole.log(cookieEnabled); // true or false",X_=e(ao),io="navigator.geolocation.getCurrentPosition(position => {\n  console.log(position.coords.latitude, position.coords.longitude);\n});",K_=e(io),lo="if (navigator.onLine) {\n  console.log('Browser is online');\n} else {\n  console.log('Browser is offline');\n}",Q_=e(lo),co="let preferredLanguage = navigator.languages ? navigator.languages[0] : navigator.language;\nconsole.log(preferredLanguage); // e.g., 'en-US'",Z_=e(co),_o="if (/Mobi|Android/i.test(navigator.userAgent)) {\n  console.log('Mobile environment detected');\n} else {\n  console.log('Mobile environment is not detected');\n}",eh=e(_o),ho="if ('geolocation' in navigator) { \n  navigator.geolocation.getCurrentPosition(position => { \n    console.log(`Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`); \n  }); \n}",th=e(ho),nh="",oh="",sh="",rh="navigator.geolocation.getCurrentPosition(position => {\n  const latitude = position.coords.latitude;\n  const longitude = position.coords.longitude;\n  // Do something with the coordinates\n});",ah="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Geolocation API Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Check if the Geolocation API is supported by the browser\n    if (navigator.geolocation) {\n      // Request the current position\n      navigator.geolocation.getCurrentPosition(\n        // Success callback function\n        position => {\n          // Extract latitude and longitude from the position object\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          // Log the latitude and longitude\n          console.log(latitude, longitude);\n        },\n        // Error callback function\n        error => {\n          // Log any errors encountered during the request to the console\n          console.error('Error:', error.message);\n        }\n      );\n    } else {\n      // Log an error message if Geolocation API is not supported\n      console.error('Geolocation is not supported by this browser.');\n    }\n  <\/script>\n</body>\n</html>",ih="// Storing data\nlocalStorage.setItem('key', 'value');\n\n// Retrieving data\nconst data = localStorage.getItem('key');\n\n// Removing data\nlocalStorage.removeItem('key');",lh="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Storage API Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Storing data\n    localStorage.setItem('key', 'Hello World!');\n    \n    // Retrieving data\n    const data = localStorage.getItem('key');\n    console.log(data);\n    \n    // Removing data\n    localStorage.removeItem('key');\n  <\/script>\n</body>\n</html>",ch="const copyButton = document.getElementById('copyButton');\nconst textToCopy = 'Hello, world!';\n\ncopyButton.addEventListener('click', async () => {\n  try {\n    await navigator.clipboard.writeText(textToCopy);\n    console.log('Text copied to clipboard successfully!');\n  } catch (err) {\n    console.error('Failed to copy text:', err);\n  }\n});",_h="const pasteButton = document.getElementById('pasteButton');\nconst outputElement = document.getElementById('output');\n\npasteButton.addEventListener('click', async () => {\n  try {\n    const textFromClipboard = await navigator.clipboard.readText();\n    outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n  } catch (err) {\n    console.error('Failed to read text from clipboard:', err);\n  }\n});",hh="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Clipboard API Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputText\" placeholder=\"Enter text to copy\">\n  <button id=\"copyButton\">Copy to Clipboard</button>\n  <button id=\"pasteButton\">Paste from Clipboard</button>\n  <div id=\"output\"></div>\n\n  <script>\n    const inputText = document.getElementById('inputText');\n    const copyButton = document.getElementById('copyButton');\n    const pasteButton = document.getElementById('pasteButton');\n    const outputElement = document.getElementById('output');\n\n    copyButton.addEventListener('click', async () => {\n      const textToCopy = inputText.value;\n      try {\n        await navigator.clipboard.writeText(textToCopy);\n        console.log('Text copied to clipboard successfully!');\n      } catch (err) {\n        console.error('Failed to copy text:', err);\n      }\n    });\n\n    pasteButton.addEventListener('click', async () => {\n      try {\n        const textFromClipboard = await navigator.clipboard.readText();\n        outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n      } catch (err) {\n        console.error('Failed to read text from clipboard:', err);\n      }\n    });\n  <\/script>\n</body>\n</html>",dh="const xhr = new XMLHttpRequest();",uh="xhr.open('GET', 'https://api.example.com/data', true);",ph="xhr.setRequestHeader('Content-Type', 'application/json');",mh="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n      const responseData = xhr.responseText;\n      // ...\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",gh="xhr.send();",fh="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr = new XMLHttpRequest();\n\n    // Set up the AJAX request\n    xhr.open('GET', 'assets/data/json/hello.json', true); // true for asynchronous, false for synchronous\n    \n    // Set up request headers\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Handle the Response\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          // Request was successful, handle the response\n          const responseData = xhr.responseText;\n          console.log(xhr.responseText); // Output the response data\n        } else {\n          // Handle HTTP error\n          console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n        }\n      }\n    };\n\n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",jh="let xhr;\ntry {\n  xhr = new XMLHttpRequest();\n} catch (error) {\n  // Handle initialization error\n  console.error('XMLHttpRequest creation failed:', error);\n}",yh="xhr.onerror = function() {\n  // Handle network error\n  console.error('Network error occurred:', xhr.status, xhr.statusText);\n};",bh="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",vh="xhr.timeout = 5000; // Set the timeout to 5 seconds\n\nxhr.ontimeout = function() {\n  // Handle timeout error\n  console.error('Request timed out');\n};",uo="// Create an XMLHttpRequest object\nlet xhr;\ntry {\n  xhr = new XMLHttpRequest();\n} catch (error) {\n  // Handle initialization error\n  console.error('XMLHttpRequest creation failed:', error);\n}\n\n// Set up the AJAX request\nxhr.open('GET', 'https://api.example.com/data', true); // true for asynchronous, false for synchronous\n\n// Set up request headers\nxhr.setRequestHeader('Content-Type', 'application/json');\n\n// Handle the Response\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n      const responseData = xhr.responseText;\n      console.log(xhr.responseText); // Output the response data\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};\n\n// Handle network error\nxhr.onerror = function() {\n  console.error('Network error occurred:', xhr.status, xhr.statusText);\n};\n\nxhr.timeout = 5000; // Set the timeout to 5 seconds\n\n// Handle timeout error\nxhr.ontimeout = function() {\n  console.error('Request timed out');\n};\n\n// Send the Request\nxhr.send();",wh=e(uo),xh="<div>\n  \x3c!-- The content will be updated here --\x3e\n  <h2 id=\"header\">Original header</h2>\n  <p id=\"paragraph\">Original paragraph</p>\n</div>\n\n<script>\n  // Create a new XMLHttpRequest object\n  const xhr = new XMLHttpRequest();\n\n  // Configure the AJAX request\n  xhr.open('GET', 'assets/data/json/content.json', true);\n\n  // Set up the response handling\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status === 200) {\n        // Request was successful, handle the response\n        const data = JSON.parse(xhr.responseText);\n\n        // Update the content of h2 and p elements with the data from the JSON file\n        document.getElementById('header').innerText = data.title;\n        document.getElementById('paragraph').innerText = data.content;\n      }\n    }\n  };\n\n  // Send the AJAX request\n  xhr.send();\n<\/script>",Ch="<!DOCTYPE html>\n<html>\n<head>\n  <title>AJAX Updating Web Page Content Example</title>\n  <style>:root { font-size: 16px; }</style>\n</head>\n<body>\n  <div>\n    \x3c!-- The content will be updated here --\x3e\n    <h2 id=\"header\">Original header</h2>\n    <p id=\"paragraph\">Original paragraph</p>\n  </div>\n\n  <button id=\"updateButton\">Update Content</button>\n\n  <script>\n    // Event listener to handle the button click\n    document.getElementById('updateButton').addEventListener('click', function() {\n      // Create a new XMLHttpRequest object\n      const xhr = new XMLHttpRequest();\n\n      // Configure the AJAX request\n      xhr.open('GET', 'assets/data/json/content.json', true);\n\n      // Set up the response handling\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            // Request was successful, handle the response\n            const data = JSON.parse(xhr.responseText);\n\n            // Update the content of h2 and p elements with the data from the JSON file\n            document.getElementById('header').innerText = data.title;\n            document.getElementById('paragraph').innerText = data.content;\n          } else {\n            // Handle HTTP error\n            console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n          }\n        }\n      };\n\n      // Handle network errors\n      xhr.onerror = function() {\n        console.error('Network error occurred');\n      };\n\n      // Send the AJAX request\n      xhr.send();\n    });\n  <\/script>\n</body>\n</html>",Eh="fetch(url)\n  .then(response => {\n    // Check if the fetch request was successful (status 200-299)\n    if (response.ok) {\n      // Parse the JSON from the response body\n      return response.json();\n    }\n  })\n  .then(data => {\n    // Process the response data\n  });",kh='<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n  // Initiates a fetch request to get the JSON file from the specified path\n  fetch(\'assets/data/json/hello.json\')\n    .then(response => {\n      // Check if the fetch request was successful (status 200-299)\n      if (response.ok) {\n        // Parse the JSON from the response body\n        return response.json();\n      }\n    })\n    .then(data => {\n      // Log the "hello" property from the parsed JSON data\n      console.log(data.hello);\n    });\n  <\/script>\n</body>\n</html>',Oh="// API endpoint (using a placeholder URL)\nconst apiUrl = 'https://api.example.com/posts';\n\n// Data to be sent in the request body\nconst postData = {\n  title: 'Understanding Fetch',\n  body: 'This is a post about the fetch API.',\n  userId: 1\n};\n\n// Fetch options\nconst fetchOptions = {\n  method: 'POST', // Request method\n  headers: {\n    'Content-Type': 'application/json', // Content type header\n  },\n  body: JSON.stringify(postData), // Stringify the data object to JSON\n};\n\n// Perform the fetch request\nfetch(apiUrl, fetchOptions)\n  .then(response => {\n    if (!response.ok) {\n      // If the response status code is not in the 200-299 range,\n      // throw an error with the status text\n      throw new Error('Request failed: ' + response.statusText);\n    }\n    // Parse the JSON response body\n    return response.json();\n  })\n  .then(data => {\n    // Handle the parsed data\n    console.log('Success:', data);\n  })\n  .catch(error => {\n    // Handle any errors that occurred during the fetch or in processing the response\n    console.error('Error:', error);\n  });",Dh="fetch('https://api.example.com/data')\n  .then(response => {\n    // Check if the fetch request was successful (status 200-299)\n    if (response.ok) {\n      // Parse the JSON from the response body\n      return response.json();\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Th="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Attempt to fetch a JSON file from the specified path\n    fetch('assets/data/json/data.json') // File `data.json` doesn't exist in the path\n      .then(response => {\n        // Check if the HTTP response status indicates success\n        if (response.ok) {\n          // If successful, parse the response body as JSON\n          return response.json();\n        } else {\n          // If the request was not successful, throw an error\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        // Log the \"hello\" property of the parsed JSON\n        console.log(data.hello);\n      })\n      .catch(error => {\n        // Catch and log any errors that occurred during the fetch or data processing\n        console.error('Error:', error);\n      });  \n  <\/script>\n</body>\n</html>",Ih="try {\n  // Code that might throw an error\n} catch (error) {\n  // Handle the error\n  console.error('Error:', error);\n} finally {\n  // Code to be executed regardless of whether an exception is thrown or caught\n}",Ph="<!DOCTYPE html>\n<html>\n<head>\n  <title>Try-Catch Example</title>\n  <style>:root { font-size: 16px; }</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function handleError() {\n      try {\n        // Simulating code that might throw an error\n        throw new Error('Custom error message');\n      } catch (error) {\n        // Handle the error\n        console.error('Error: ' + error.message);\n      } finally {\n        console.log(''Finally' code is exexuted.')\n      }\n    }\n\n    handleError();\n  <\/script>\n</body>\n</html>";var Lh=o(7359);let _=(()=>{class t{constructor(){this.bookData=h}}return t.\u0275fac=function(n){return new(n||t)},t.\u0275cmp=s.Xpm({type:t,selectors:[["app-js-chapter"]],decls:1,vars:1,consts:[[3,"bookData"]],template:function(n,po){1&n&&s._UZ(0,"app-chapter",0),2&n&&s.Q6J("bookData",po.bookData)},dependencies:[Lh.l]}),t})();const Sh=[{path:"",component:jo,children:[{path:"chapter",component:_},{path:"chapter/:chid",component:_},{path:"chapter/:chid/section/:secid",component:_},{path:"**",component:_},{path:"",component:_}]}];let Ah=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=s.oAB({type:t}),t.\u0275inj=s.cJS({imports:[d.Bz.forChild(Sh),d.Bz]}),t})();var Nh=o(1375);let Bh=(()=>{class t{}return t.\u0275fac=function(n){return new(n||t)},t.\u0275mod=s.oAB({type:t}),t.\u0275inj=s.cJS({imports:[mo.ez,Ah,Nh.I]}),t})()}}]);