"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[545],{767:(ll,a,s)=>{s.d(a,{t:()=>e});const e=[{category:"js",chid:1,title:"Introduction to JavaScript",sections:[{secid:1,subtitle:"What is JavaScript?",paragraphs:[{text:"JavaScript is a high-level, interpreted programming language primarily used for creating interactive and dynamic behavior on websites. It is a versatile language that allows developers to build a wide range of applications, from simple web page enhancements to complex web applications and server-side development."},{text:"Here are some key points about JavaScript:"},{text:"<ol><li><strong>Core Features</strong></li></ol>"},{text:"<ul><ul><li><strong>Dynamic Typing</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript is dynamically typed, which means you don't have to specify the data type of a variable when you declare it.</ul></ul>"},{text:"<ul><ul><li><strong>Object-Oriented and Functional</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript supports both object-oriented and functional programming paradigms.</ul></ul>"},{text:"<ul><ul><li><strong>Event-Driven</strong></li></ul></ul>"},{text:"<ul><ul>It can respond to events, such as user interactions like clicks, form input, and page navigation, making websites more interactive.</ul></ul>"},{text:"<ul><ul><li><strong>Client-Side and Server-Side</strong></li></ul></ul>"},{text:"<ul><ul>Although originally designed to run in the browser, JavaScript is now used server-side as well, most notably with Node.js.</ul></ul>"},{text:'<ol start="2"><li><strong>Key Components</strong></li></ol>'},{text:"<ul><ul><li><strong>ECMAScript</strong></li></ul></ul>"},{text:"<ul><ul>The standardized scripting language specification upon which JavaScript is based.</ul></ul>"},{text:"<ul><ul><li><strong>Document Object Model (DOM)</strong></li></ul></ul>"},{text:"<ul><ul>The structure representing a web page, which JavaScript can manipulate.</ul></ul>"},{text:"<ul><ul><li><strong>Asynchronous JavaScript and XML (AJAX)</strong></li></ul></ul>"},{text:"<ul><ul>A technique that allows JavaScript to communicate with a server in the background without refreshing the page.</ul></ul>"},{text:'<ol start="3"><li><strong>Areas of Application</strong></li></ol>'},{text:"<ul><ul><li><strong>Web Development</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript is crucial for client-side web scripting. Modern web frameworks like Angular, React, and Vue.js are JavaScript-based.</ul></ul>"},{text:"<ul><ul><li><strong>Server-Side Development</strong></li></ul></ul>"},{text:"<ul><ul>With Node.js, JavaScript can be used to build robust server-side applications.</ul></ul>"},{text:"<ul><ul><li><strong>Mobile App Development</strong></li></ul></ul>"},{text:"<ul><ul>Frameworks like React Native enable JavaScript-based mobile app development.</ul></ul>"},{text:"<ul><ul><li><strong>Internet of Things (IoT)</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript can be used in IoT development, particularly through Node.js.</ul></ul>"},{text:'<ol start="4"><li><strong>Advantages</strong></li></ol>'},{text:"<ul><ul><li><strong>Versatile</strong></li></ul></ul>"},{text:"<ul><ul>Can be used for both front-end and back-end development.</ul></ul>"},{text:"<ul><ul><li><strong>Large Ecosystem</strong></li></ul></ul>"},{text:"<ul><ul>Extensive libraries, frameworks, and community support.</ul></ul>"},{text:"<ul><ul><li><strong>Good Performance</strong></li></ul></ul>"},{text:"<ul><ul>Just-in-time compilation and other optimizations make JavaScript very fast.</ul></ul>"},{text:"<ul><ul><li><strong>Cross-Platform</strong></li></ul></ul>"},{text:"<ul><ul>Runs on any device that has a web browser, and server-side via Node.js.</ul></ul>"},{text:'<ol start="5"><li><strong>Limitations</strong></li></ol>'},{text:"<ul><ul><li><strong>Single-Threaded</strong></li></ul></ul>"},{text:"<ul><ul>Although it can perform asynchronous operations, JavaScript is single-threaded, which can be a limitation for some types of applications.</ul></ul>"},{text:"<ul><ul><li><strong>Client-Side Security</strong></li></ul></ul>"},{text:"<ul><ul>Since JavaScript runs on the client side, it can be exploited for malicious purposes.</ul></ul>"},{text:"Overall, JavaScript is a powerful programming language that enables developers to bring interactivity, functionality, and dynamism to web pages and web applications. Its versatility, widespread adoption, and continuous development make it a popular choice for both beginner and experienced developers in the web development industry."}]},{secid:2,subtitle:"History and Evolution of JavaScript",paragraphs:[{text:"JavaScript has an interesting history and has undergone significant evolution since its creation. Here's an overview of the history and key milestones of JavaScript:"},{text:"<ol><li><strong>Creation of JavaScript</strong></li></ol>"},{text:'<ul>JavaScript was created by Brendan Eich in 1995 while he was working at Netscape Communications. Originally called "Mocha", it was later renamed to "LiveScript" and finally to "JavaScript". The goal was to develop a scripting language for web browsers that could add interactivity and dynamic features to web pages.</ul>'},{text:'<ol start="2"><li><strong>Collaboration with ECMA</strong></li></ol>'},{text:"<ul>In 1996, Netscape submitted JavaScript to Ecma International, a standards organization, for standardization. The standardization process resulted in the creation of the ECMAScript specification, which defines the language syntax, semantics, and standard library. The first standardized version was ECMAScript 1 in 1997.</ul>"},{text:'<ol start="3"><li><strong>Adoption by Multiple Browsers</strong></li></ol>'},{text:"<ul>JavaScript quickly gained popularity due to its ability to enhance web pages. Other browsers, such as Microsoft's Internet Explorer, started implementing JavaScript support, often with their own variations. This led to some compatibility issues between different browser implementations.</ul>"},{text:'<ol start="4"><li><strong>DOM and Dynamic Web Content</strong></li></ol>'},{text:"<ul>In the late 1990s, the Document Object Model (DOM) was introduced. The DOM allowed JavaScript to access and manipulate elements of an HTML document, enabling dynamic updates and interactivity. This advancement played a crucial role in the evolution of JavaScript as a powerful web development language.</ul>"},{text:'<ol start="5"><li><strong>AJAX and Rich Internet Applications</strong></li></ol>'},{text:"<ul>In the early 2000s, JavaScript became a key component in the development of AJAX (Asynchronous JavaScript and XML) techniques. AJAX allowed web applications to retrieve data from servers asynchronously without reloading the entire page. This led to the rise of rich internet applications (RIAs), which provided a more desktop-like user experience within a web browser.</ul>"},{text:'<ol start="6"><li><strong>Frameworks and Libraries</strong></li></ol>'},{text:"<ul>The mid-2000s saw the emergence of JavaScript frameworks and libraries that simplified web development. Libraries like jQuery (2006) provided a concise and convenient API for manipulating the DOM and handling events. Later, powerful frameworks like AngularJS (2009), React (2013), and Vue.js (2014) gained popularity, offering advanced tools for building complex web applications.</ul>"},{text:'<ol start="7"><li><strong>Server-Side JavaScript</strong></li></ol>'},{text:"<ul>In 2009, Ryan Dahl introduced Node.js, a runtime environment that allowed JavaScript to run on the server-side. Node.js enabled developers to use JavaScript for server-side programming, opening up opportunities for full-stack JavaScript development and facilitating the creation of scalable and efficient web applications.</ul>"},{text:'<ol start="8"><li><strong>Evolution of ECMAScript</strong></li></ol>'},{text:"<ul>ECMAScript, the standard for JavaScript, has undergone several significant updates and releases. ECMAScript 3 (1999) introduced many core features still widely used today, while ECMAScript 5 (2009) brought important enhancements. ECMAScript 6 (2015) introduced major language improvements, including classes, arrow functions, and modules. Subsequent versions like ECMAScript 2016, 2017, and 2018 introduced additional features and syntax enhancements.</ul>"},{text:'<ol start="9"><li><strong>Modern JavaScript</strong></li></ol>'},{text:"<ul>JavaScript has continued to evolve with regular updates and new features. Recent developments have focused on improving performance, enhancing developer productivity, and providing better language support for complex applications. Notable features introduced in recent years include async/await for asynchronous programming, spread syntax, optional chaining, and more.</ul>"},{text:"JavaScript has come a long way from its early days as a simple scripting language to its current position as a versatile and powerful programming language for web development. Its evolution, standardization, and the vibrant ecosystem of frameworks and libraries have contributed to its widespread adoption and its position as one of the essential technologies on the web."}]},{secid:3,subtitle:"JavaScript in Web Development",paragraphs:[{text:"JavaScript plays a vital role in web development, enabling developers to create dynamic, interactive, and feature-rich web applications. Here are some key aspects of JavaScript's role in web development:"},{text:"<ol><li><strong>Client-Side Interactivity</strong></li></ol>"},{text:"<ul>JavaScript is primarily used on the client-side, meaning it runs directly in the user's web browser. It allows developers to add interactivity and responsiveness to web pages. JavaScript can handle events, such as button clicks, form submissions, and mouse movements, and respond dynamically by modifying the content, styles, or behavior of the page.</ul>"},{text:'<ol start="2"><li><strong>Manipulating the DOM</strong></li></ol>'},{text:"<ul>The Document Object Model (DOM) is a programming interface that represents the structure and content of an HTML document as a tree of objects. JavaScript provides extensive support for accessing, modifying, and manipulating the DOM elements. Developers can use JavaScript to dynamically update the content, create or remove elements, change styles, and handle user interactions.</ul>"},{text:'<ol start="3"><li><strong>Form Validation</strong></li></ol>'},{text:"<ul>JavaScript enables form validation on the client-side, allowing for immediate feedback to users when they submit forms. Developers can use JavaScript to perform various validations, such as checking for required fields, validating email addresses, enforcing input formats, and displaying error messages without the need for a server roundtrip.</ul>"},{text:'<ol start="4"><li><strong>AJAX and Asynchronous Operations</strong></li></ol>'},{text:"<ul>JavaScript, in combination with AJAX (Asynchronous JavaScript and XML) techniques, allows web applications to retrieve data from servers asynchronously without refreshing the entire page. This enables a smoother user experience, as content can be dynamically loaded and updated in the background, providing real-time updates and reducing server load.</ul>"},{text:'<ol start="5"><li><strong>Rich User Interfaces</strong></li></ol>'},{text:"<ul>JavaScript frameworks and libraries like React, Angular, and Vue.js have gained popularity for building complex user interfaces. These frameworks provide powerful tools for managing state, rendering components, and handling user interactions. They enable developers to create interactive, responsive, and dynamic web applications with reusable components and efficient rendering.</ul>"},{text:'<ol start="6"><li><strong>Browser APIs and Integration</strong></li></ol>'},{text:"<ul>JavaScript provides access to various browser APIs (Application Programming Interfaces) that expose additional functionalities and capabilities to web applications. These APIs include geolocation, local storage, web notifications, audio/video playback, canvas for graphics, and many more. JavaScript allows developers to leverage these APIs to create compelling and interactive experiences directly within the browser.</ul>"},{text:'<ol start="7"><li><strong>Web Application Frameworks</strong></li></ol>'},{text:"<ul>JavaScript is the language of choice for many web application frameworks. These frameworks, such as Express.js, Meteor, and Nest.js, enable developers to build server-side applications, APIs, and full-stack web applications using JavaScript. These frameworks provide structure, routing, database integration, and other essential components for developing scalable and robust web applications.</ul>"},{text:'<ol start="8"><li><strong>Cross-Browser Compatibility</strong></li></ol>'},{text:"<ul>JavaScript is supported by all modern web browsers, making it a reliable choice for developing cross-browser compatible web applications. While there may be some minor differences in browser implementations, JavaScript frameworks and libraries often abstract away these inconsistencies, allowing developers to write code that works across different browsers.</ul>"},{text:'<ol start="9"><li><strong>Continuous Development and Libraries</strong></li></ol>'},{text:"<ul>JavaScript has a vast ecosystem of libraries, frameworks, and tools that continuously evolve and enhance web development capabilities. Developers can leverage these libraries and tools to streamline development processes, enhance functionality, improve performance, and address common challenges.</ul>"},{text:"In summary, JavaScript is a fundamental technology in web development, enabling developers to create dynamic and interactive web applications. Its versatility, extensive browser support, and thriving ecosystem make it a powerful language for building engaging user experiences on the web."}]},{secid:4,subtitle:"Setting Up a JavaScript Development Environment",paragraphs:[{text:"Setting up a JavaScript development environment involves configuring the necessary tools and software to write, test, and run JavaScript code. Here's a general guide on how to set up a JavaScript development environment:"},{text:"<ol><li><strong>Install a Text Editor or Integrated Development Environment (IDE)</strong></li></ol>"},{text:"<ul><ul><li>Choose a text editor or IDE that suits your preferences and requirements. Popular options include Visual Studio Code, Sublime Text, Atom, and WebStorm. Download and install the editor or IDE of your choice.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Install Node.js</strong></li></ol>'},{text:"<ul><ul><li>Node.js allows you to run JavaScript code on the server-side and provides a package manager called npm (Node Package Manager) for managing JavaScript libraries and tools.</li></ul></ul>"},{text:'<ul><ul><li>Visit the official Node.js website (<a href="https://nodejs.org">https://nodejs.org</a>) and download the recommended version for your operating system.</li></ul></ul>'},{text:"<ul><ul><li>Run the installer and follow the instructions to complete the installation.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Set up a Package.json file</strong></li></ol>'},{text:"<ul><ul><li>Open a command prompt or terminal in your project's directory.</li></ul></ul>"},{text:"<ul><ul><li>Run the command `<code>npm init</code>` and follow the prompts to initialize a new package.json file.</li></ul></ul>"},{text:"<ul><ul><li>The package.json file keeps track of your project's dependencies and other important configuration details.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Install JavaScript Libraries and Tools</strong></li></ol>'},{text:"<ul><ul><li>Use npm to install any required JavaScript libraries or tools. For example, if you need a library like React, run the command npm `<code>install react</code>`.</li></ul></ul>"},{text:"<ul><ul><li>Add the necessary libraries and tools as dependencies in your package.json file.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Use a Module Bundler (optional)</strong></li></ol>'},{text:"<ul><ul><li>If you plan to use advanced JavaScript features or want to bundle your code for production, consider using a module bundler like Webpack or Parcel.</li></ul></ul>"},{text:"<ul><ul><li>Install the desired module bundler globally or locally as per their respective installation instructions.</li></ul></ul>"},{text:"<ul><ul><li>Configure the bundler to handle JavaScript files and any other necessary assets (CSS, images, etc.) in your project.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Testing and Debugging</strong></li></ol>'},{text:"<ul><ul><li>Set up a testing framework like Jest, Mocha, or Jasmine to write and run tests for your JavaScript code.</li></ul></ul>"},{text:"<ul><ul><li>Use browser developer tools (built into modern browsers) or additional tools like Chrome DevTools or Firefox Developer Tools for debugging JavaScript code.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Browser Live-Reload (optional)</strong></li></ol>'},{text:"<ul><ul><li>Consider using a live-reload tool like Browsersync or webpack-dev-server to automatically refresh the browser whenever you make changes to your JavaScript code.</li></ul></ul>"},{text:'<ol start="8"><li><strong>Version Control</strong></li></ol>'},{text:"<ul><ul><li>Initialize a version control system like Git in your project directory to track code changes and collaborate with others efficiently.</li></ul></ul>"},{text:"Once you have set up your JavaScript development environment, you can start creating JavaScript files, importing dependencies, running scripts, and testing your code. Remember to regularly update your dependencies, maintain good coding practices, and stay updated with the latest developments in the JavaScript ecosystem."},{text:"Note: The specific steps for setting up a JavaScript development environment may vary depending on your operating system, text editor or IDE, and specific project requirements. It's always a good idea to consult the official documentation and resources for the tools and libraries you choose to use."}]}]},{category:"js",chid:2,title:"Fundamentals of JavaScript",sections:[{secid:1,subtitle:"Syntax Overview",paragraphs:[{text:"A syntax overview of JavaScript involves understanding the basic rules and structures that define how JavaScript code is written and interpreted. Here's a concise guide to the fundamental aspects of JavaScript syntax:"},{text:"<ol><li><strong>Basic Structure</strong></li></ol>"},{text:"<ul><ul><li><strong>Statements</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript code is executed through statements, each performing a distinct action. For example, a statement can be a function call, a variable declaration, or a loop.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_1",exampleid:"js_2_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Semicolons</strong></li></ul></ul>"},{text:"<ul><ul>They are used to mark the end of a statement, although they are optional due to JavaScript's Automatic Semicolon Insertion (ASI) feature. However, for better readability and to avoid potential pitfalls, it's recommended to use semicolons.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Comments</strong></li></ol>'},{text:"<ul><ul><li><strong>Single-line Comments</strong></li></ul></ul>"},{text:"<ul><ul>Useful for short descriptions. They are ignored by the JavaScript engine.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Multi-line Comments</strong></li></ul></ul>"},{text:"<ul><ul>Ideal for longer descriptions or temporarily disabling blocks of code.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Variables and Constants</strong></li></ol>'},{text:"<ul><ul><li><strong>Variables</strong></li></ul></ul>"},{text:"<ul><ul>Used to store data values. `<code>let</code>` allows you to declare block-level variables that can be reassigned, while `<code>const</code>` is for variables whose values are not supposed to change.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Variable Naming Rules</strong></li></ul></ul>"},{text:"<ul><ul>A name must start with a letter, underscore (_), or dollar sign ($). Subsequent characters can also be digits (0-9).</ul></ul>"},{text:'<ol start="4"><li><strong>Data Types</strong></li></ol>'},{text:"<ul><ul><li><strong>Primitive Types</strong></li></ul></ul>"},{text:"<ul><ul>These include numbers, strings, booleans (`<code>true</code>` or `<code>false</code>`), `<code>undefined</code>` (a variable not yet defined), and `<code>null</code>` (a deliberate non-value).</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Objects and Arrays</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript allows complex data structures like objects for key-value pairs and arrays for ordered collections.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Operators</strong></li></ol>'},{text:"<ul><ul><li><strong>Arithmetic Operators</strong></li></ul></ul>"},{text:"<ul><ul>For performing mathematical calculations. For example `<code>+</code>`, `<code>-</code>`, `<code>*</code>`, `<code>/</code>`, `<code>%</code>`, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Assignment Operators</strong></li></ul></ul>"},{text:"<ul><ul>Assign values to variables. For example `<code>=</code>`, `<code>+=</code>`, `<code>-=</code>`, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Comparison Operators</strong></li></ul></ul>"},{text:"<ul><ul>Compare values and return a boolean. For example `<code>==</code>`, `<code>===</code>`, `<code>!=</code>`, `<code>!==</code>`, `<code><</code>`, `<code>></code>`, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Logical Operators</strong></li></ul></ul>"},{text:"<ul><ul>Used in conditional statements, return a boolean. For example `<code>&&</code>`, `<code>||</code>`, `<code>!</code>`.</ul></ul>"},{text:'<ol start="6"><li><strong>Control Structures</strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>if</code>`, `<code>else if</code>`, and `<code>else</code>` Statements</strong></li></ul></ul>"},{text:"<ul><ul>Allow conditional execution of code blocks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_8",exampleid:"js_2_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>for</code>`, `<code>while</code>`, and `<code>do-while</code>` Loops</strong></li></ul></ul>"},{text:"<ul><ul>Enable executing a block of code multiple times.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_9",exampleid:"js_2_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Functions</strong></li></ol>'},{text:"<ul><ul><li><strong>Declaration</strong></li></ul></ul>"},{text:"<ul><ul>A function is defined with the `<code>function</code>` keyword, followed by a name, and a set of parentheses that can contain parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invocation</strong></li></ul></ul>"},{text:"<ul><ul>Functions are invoked or called to execute the code they contain.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_11",exampleid:"js_2_1_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="8"><li><strong>Events</strong></li></ol>'},{text:"<ul><ul><li>Events in JavaScript allow interaction with the HTML document, such as responding to clicks or key presses.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_1_12",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="9"><li><strong>Case Sensitivity</strong></li></ol>'},{text:"<ul><ul><li>JavaScript treats uppercase and lowercase letters as distinct characters.</li></ul></ul>"},{text:'<ol start="10"><li><strong>Strict Mode</strong></li></ol>'},{text:'<ul><ul><li>Strict mode can be enabled by adding `<code>"use strict";</code>` at the beginning of a script or a function. It helps in catching common coding errors and "unsafe" actions (like accessing global objects).</li></ul></ul>'},{text:"",codeConfig:{codeid:"js_2_1_13",exampleid:"js_2_1_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Understanding these fundamental aspects of JavaScript syntax is crucial for writing correct and efficient JavaScript code. As you progress, you'll dive deeper into more complex features and best practices."}]},{secid:2,subtitle:"Variables and Data Types",paragraphs:[{text:"In JavaScript, variables are used to store data values that can be manipulated and accessed throughout your code. JavaScript has several data types that represent different kinds of values. Let's explore variables and data types in JavaScript:"},{text:"<ol><li><strong>Declaring Variables</strong></li></ol>"},{text:"<ul><ul><li>In JavaScript, variables are declared using the `<code>var</code>`, `<code>let</code>`, or `<code>const</code>` keywords.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>var</code>` keyword is used for declaring variables with function scope or global scope. However, it is recommended to use `<code>let</code>` or `<code>const</code>` instead of `<code>var</code>` for better scoping rules and avoiding potential issues.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>let</code>` keyword is used for declaring variables with block scope, which means they are only accessible within the block of code where they are defined.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>const</code>` keyword is used for declaring variables that hold constant values. Once assigned, a `<code>const</code>` variable cannot be reassigned a new value. It is also block-scoped.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Data Types</strong></li></ol>'},{text:"<ul>JavaScript has several built-in data types, including:</ul>"},{text:"<ul><ul><li><strong>Number</strong></li></ul></ul>"},{text:"<ul><ul>Represents numeric values, both integers and floating-point numbers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>String</strong></li></ul></ul>"},{text:"<ul><ul>Represents sequences of characters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Boolean</strong></li></ul></ul>"},{text:"<ul><ul>Represents logical values `<code>true</code>` or `<code>false</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Null</strong></li></ul></ul>"},{text:"<ul><ul>Represents the intentional absence of any object value.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Undefined</strong></li></ul></ul>"},{text:"<ul><ul>Represents the uninitialized value of a variable.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Symbol</strong> (Introduced in ECMAScript 2015)</li></ul></ul>"},{text:"<ul><ul>Represents unique and immutable values, often used as object property identifiers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Object</strong></li></ul></ul>"},{text:"<ul><ul>Represents a collection of key-value pairs. Objects are more complex data types that can hold properties and methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>BigInt</strong> (Introduced in ECMAScript 2020)</li></ul></ul>"},{text:"<ul><ul>Represents arbitrary-precision integers.</ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Dynamic Typing</strong></li></ol>'},{text:"<ul><ul><li>JavaScript is a dynamically-typed language, meaning variables can hold values of any data type without explicitly specifying the type.</li></ul></ul>"},{text:"<ul><ul><li>You can assign different data types to the same variable during the execution of your program.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Type Coercion</strong></li></ol>'},{text:"<ul><ul><li>JavaScript also performs type coercion, which is the automatic conversion of values between different types in certain situations.</li></ul></ul>"},{text:"<ul><ul><li>For example, JavaScript can convert a number to a string when performing string concatenation.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Checking Data Type</strong></li></ol>'},{text:"<ul><ul><li>You can use the `<code>typeof</code>` operator to check the data type of a value.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>The `<code>instanceof</code>` operator checks if an object is an instance of a specific class or constructor function.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_2_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Understanding variables and data types is essential for working with JavaScript effectively. By knowing how to declare variables and utilize the various data types, you can store and manipulate different kinds of values in your JavaScript code."}]},{secid:3,subtitle:"Operators and Expressions",paragraphs:[{text:"In JavaScript, operators and expressions are used to perform operations on values and produce results. They allow you to manipulate variables, compare values, perform arithmetic calculations, and more. Let's explore the various operators and expressions in JavaScript:"},{text:"<ol><li><strong>Assignment Operators</strong></li></ol>"},{text:"<ul><ul><li>The assignment operator (`<code>=</code>`) is used to assign a value to a variable.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_1",exampleid:"js_2_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Additional assignment operators include `<code>+=</code>`, `<code>-=</code>`, `<code>*=</code>`, `<code>/=</code>`, and `<code>%=</code>`. These operators perform the corresponding operation and assign the result to the variable.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_2",exampleid:"js_2_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Arithmetic Operators</strong></li></ol>'},{text:"<ul>JavaScript supports standard arithmetic operators.</ul>"},{text:"<ul><ul><li>Addition (`<code>+</code>`), subtraction (`<code>-</code>`), multiplication (`<code>*</code>`), and division (`<code>/</code>`).</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_3",exampleid:"js_2_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Modulo (`<code>%</code>`), which returns the remainder of a division operation.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_4",exampleid:"js_2_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Increment (`<code>++</code>`) and decrement (`<code>--</code>`) operators for increasing or decreasing a value by 1.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_5",exampleid:"js_2_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Comparison Operators</strong></li></ol>'},{text:"<ul>Comparison operators are used to compare values and return a Boolean (`<code>true</code>` or `<code>false</code>`) result.</ul>"},{text:"<ul><ul><li>Equal to (`<code>==</code>` or `<code>===</code>`), not equal to (`<code>!=</code>` or `<code>!==</code>`).</li></ul></ul>"},{text:'<ul><ul><li>The "equal to" operator (`<code>==</code>`) and the "not equal to" operator (`<code>!=</code>`) compare the values of two operands, performing type coercion if necessary before making the comparison. Type coercion means that JavaScript will try to convert the operands to the same data type before making the comparison.</li></ul></ul>'},{text:'<ul><ul><li>The "strict equal to" operator (`<code>===</code>`) and the "strict not equal to" operator (`<code>!==</code>`) compare both the values and the types of the operands. It does not perform any type coercion, so for the "strict equal to" operator to return true, both the values and the data types must be the same.</li></ul></ul>'},{text:"",codeConfig:{codeid:"js_2_3_6",exampleid:"js_2_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Greater than (`<code>></code>`), less than (`<code><</code>`), greater than or equal to (`<code>>=</code>`), less than or equal to (`<code><=</code>`).</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_7",exampleid:"js_2_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Logical Operators</strong></li></ol>'},{text:"<ul>Logical operators are used to combine or manipulate Boolean values.</ul>"},{text:"<ul><ul><li>Logical AND (`<code>&&</code>`), which returns `<code>true</code>` if both operands are `<code>true</code>`.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_8",exampleid:"js_2_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Logical OR (`<code>||</code>`), which returns `<code>true</code>` if at least one operand is `<code>true</code>`.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_9",exampleid:"js_2_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>Logical NOT (`<code>!</code>`), which negates a Boolean value.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_10",exampleid:"js_2_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Conditional (Ternary) Operator</strong></li></ol>'},{text:"<ul><ul><li>The conditional operator (`<code>condition ? expr1 : expr2</code>`) is a shorthand for an `<code>if-else</code>` statement.</li></ul></ul>"},{text:"<ul><ul><li>It evaluates the condition and returns `<code>expr1</code>` if the condition is `<code>true</code>`, or `<code>expr2</code>` if the condition is `<code>false</code>`.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_11",exampleid:"js_2_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="6"><li><strong>Grouping Operator</strong></li></ol>'},{text:"<ul><ul><li>The grouping operator (`<code>()</code>`) is used to group expressions and control the order of evaluation.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_12",exampleid:"js_2_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Bitwise Operators</strong></li></ol>'},{text:"<ul><ul><li>JavaScript also supports bitwise operators (`<code>&</code>`, `<code>|</code>`, `<code>^</code>`, `<code>~</code>`, `<code><<</code>`, `<code>>></code>`, `<code>>>></code>`) for manipulating binary representations of numbers. These operators are mainly used in advanced scenarios like low-level programming or working with binary data.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_2_3_13",exampleid:"js_2_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Operators and expressions allow you to perform a wide range of operations and calculations in JavaScript. By understanding and utilizing these operators effectively, you can manipulate values, make decisions, and control the flow of your code."}]}]},{category:"js",chid:3,title:"Control Structures and Loops",sections:[{secid:1,subtitle:"Conditional Statements",paragraphs:[{text:"JavaScript conditional statements are a fundamental part of the language, allowing you to execute different code blocks based on certain conditions. These conditions are typically boolean expressions (that evaluate to `<code>true</code>` or `<code>false</code>`). The primary conditional statements in JavaScript are `<code>if</code>`, `<code>else if</code>`, `<code>else</code>`, and `<code>switch</code>`."},{text:"<ol><li><strong>The `<code>if</code>` Statement</strong></li></ol>"},{text:"<ul>The `<code>if</code>` statement is the simplest form of conditional statement. It executes a block of code if a specified condition is `<code>true</code>`.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_2",exampleid:"js_3_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>The `<code>else</code>` Statement</strong></li></ol>'},{text:"<ul>An `<code>else</code>` statement can be used to execute a block of code when the `<code>if</code>` condition is `<code>false</code>`.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_4",exampleid:"js_3_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>The `<code>else if</code>` Statement</strong></li></ol>'},{text:"<ul>For multiple conditions, `<code>else if</code>` can be used. It allows you to check several conditions, not just one.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_6",exampleid:"js_3_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="4"><li><strong>The `<code>switch</code>` Statement</strong></li></ol>'},{text:"<ul>The `<code>switch</code>` statement is used for multiple case checks. It's an alternative to multiple `<code>if</code>` statements.</ul>"},{text:"",codeConfig:{codeid:"js_3_1_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_1_8",exampleid:"js_3_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>These conditional statements provide powerful ways to control the flow of your JavaScript program, allowing more dynamic and responsive coding based on different conditions.</ul>"}]},{secid:2,subtitle:"Ternary, Optional Chaining, and Nullish Coalescing Operators",paragraphs:[{text:"JavaScript includes several operators that can greatly simplify and improve the readability of your code. Three such operators are the ternary operator, optional chaining operator, and nullish coalescing operator. Here's an explanation of each:"},{text:"<ol><li><strong>Ternary Operator (`<code>condition ? exprIfTrue : exprIfFalse</code>`)</strong></li></ol>"},{text:"<ul>The ternary operator is a condensed form of an `<code>if-else</code>` statement. It takes three operands: a condition to evaluate, an expression to return if the condition is `<code>true</code>`, and an expression to return if the condition is `<code>false</code>`.</ul>"},{text:"",codeConfig:{codeid:"js_3_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_2_2",exampleid:"js_3_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>Optional Chaining Operator (`<code>?.</code>`)</strong></li></ol>'},{text:"<ul>Optional chaining allows you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid. It returns `<code>undefined</code>` if the reference is nullish (`<code>null</code>` or `<code>undefined</code>`).</ul>"},{text:"",codeConfig:{codeid:"js_3_2_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_2_4",exampleid:"js_3_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>Nullish Coalescing Operator (`<code>??</code>`)</strong></li></ol>'},{text:"<ul>The nullish coalescing operator returns the right-hand operand when the left-hand operand is nullish, and the left-hand operand otherwise. It's a way to provide a default value.</ul>"},{text:"",codeConfig:{codeid:"js_3_2_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_2_6",exampleid:"js_3_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"In summary, these operators offer more concise and readable alternatives to traditional conditional logic and null checks, allowing for cleaner and more efficient JavaScript code."}]},{secid:3,subtitle:"Looping Constructs",paragraphs:[{text:"JavaScript loops are fundamental constructs that enable you to execute a block of code repeatedly under specified conditions. They are particularly useful when you want to iterate over arrays, objects, or simply repeat tasks a certain number of times. The main types of loops in JavaScript include `<code>for</code>`, `<code>while</code>`, `<code>do-while</code>`, and `<code>for...in</code>`/`<code>for...of</code>`."},{text:"<ol><li><strong>The `<code>for</code>` Loop</strong></li></ol>"},{text:"<ul>The `<code>for</code>` loop is often used when you know in advance how many times you need to execute a block of code.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>`<code>initialization</code>` is typically used to initialize a counter variable.</ul>"},{text:"<ul>`<code>condition</code>` makes the loop running as long as this `<code>condition</code>` is `<code>true</code>`.</ul>"},{text:"<ul>`<code>increment</code>` updates the counter variable on each iteration.</ul>"},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_2",exampleid:"js_3_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="2"><li><strong>The `<code>while</code>` Loop</strong></li></ol>'},{text:"<ul>The `<code>while</code>` loop is used when you want to repeat a block of code as long as a specified condition is `<code>true</code>`, but you don't know in advance how many times you'll need to iterate.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_4",exampleid:"js_3_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="3"><li><strong>The `<code>do-while</code>` Loop</strong></li></ol>'},{text:"<ul>The `<code>do-while</code>` loop is similar to the `<code>while</code>` loop, but it executes the block of code once before checking the condition, ensuring that the block is executed at least once.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_6",exampleid:"js_3_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="4"><li><strong>The `<code>for...in</code>` Loop</strong></li></ol>'},{text:"<ul>The `<code>for...in</code>` loop is used to iterate over the keys of an object. It is a great way to inspect each property in an object.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_8",exampleid:"js_3_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:'<ol start="5"><li><strong>The `<code>for...of</code>` Loop</strong></li></ol>'},{text:"<ul>The `<code>for...of</code>` loop is used to iterate over iterable objects like arrays, strings, NodeLists, and more, directly accessing the value of each item.</ul>"},{text:"",codeConfig:{codeid:"js_3_3_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"2.5rem"}},{text:"<ul>Example</ul>"},{text:"",codeConfig:{codeid:"js_3_3_10",exampleid:"js_3_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"Using these loops effectively can significantly simplify your code, making it more readable and efficient, especially when dealing with repetitive tasks or iterating over data collections."}]}]},{category:"js",chid:4,title:"Functions and Their Usage",sections:[{secid:1,subtitle:"Defining and Invoking Functions",paragraphs:[{text:"In JavaScript, functions are one of the most fundamental building blocks. A function in JavaScript is similar to a procedure - a set of statements that perform a task or calculates a value, but for a procedure to qualify as a function, it should take some input and return an output."},{text:"<ol><li><strong>Defining Functions</strong></li></ol>"},{text:"<ul>There are several ways to define functions in JavaScript:</ul>"},{text:"<ul><ul><li><strong>Function Declaration</strong></li></ul></ul>"},{text:"<ul><ul>A function declaration is a classic way to define a function. The function keyword is used, followed by the name of the function, a list of parameters enclosed in parentheses, and the function body enclosed in curly braces.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Function Expression</strong></li></ul></ul>"},{text:"<ul><ul>A function expression is similar to a function declaration, but the function is assigned to a variable. Function expressions can be anonymous (without a name).</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Arrow Functions (ES6)</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions are a concise way to write functions in ES6 and later. They are especially useful for inline functions and callbacks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul>Arrow functions with a single expression can omit the curly braces and the `<code>return</code>` keyword.</ul></ul>"},{text:"<ul><ul><li><strong>Functions Using Rest Parameters</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript functions can be defined using rest parameters. Rest parameters allow you to represent an indefinite number of arguments as an array. This is useful when you don't know in advance how many arguments will be passed to the function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Functions Using Destructing Objects or Arrays as Paramenters</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript functions can be defined using destructuring objects or arrays as parameters to enhance their flexibility and readability. The approach allows unpacking values from arrays or properties from objects, into distinct variables.</ul></ul>"},{text:"<ul><ul>For an object:</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_5",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul>For an array:</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Invoking (Calling) Functions</strong></li></ol>'},{text:"<ul>Once defined, a function can be executed (called or invoked) by using its name followed by parameters inside parentheses.</ul>"},{text:"<ul><ul><li><strong>Invoking General Functions</strong></li></ul></ul>"},{text:"<ul><ul>Passes arguments that correspond to the function's parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_7",exampleid:"js_4_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invoking a Function Using Rest Parameters</strong></li></ul></ul>"},{text:"<ul><ul>Passes an indefinite number of arguments as an array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_8",exampleid:"js_4_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invoking a Function Using a Destructing Object as Paramenters</strong></li></ul></ul>"},{text:"<ul><ul>Passes an object that matches the structure expected by the function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_9",exampleid:"js_4_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Invoking a Function Using a Destructing Array as Paramenters</strong></li></ul></ul>"},{text:"<ul><ul>Passes an array with elements corresponding to the expected parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_10",exampleid:"js_4_1_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases of Functions</strong></li></ol>'},{text:"<ul>Functions are used for various purposes in JavaScript (Some use cases will be discussed in later chapters):</ul>"},{text:"<ul><ul><li><strong>Modularizing Code</strong></li></ul></ul>"},{text:"<ul><ul>Breaking a complex problem into smaller, reusable blocks.</ul></ul>"},{text:"<ul><ul><li><strong>Event Handling</strong></li></ul></ul>"},{text:"<ul><ul>Assigning functions to respond to events like clicks, key presses, etc.</ul></ul>"},{text:"<ul><ul><li><strong>Callbacks</strong></li></ul></ul>"},{text:"<ul><ul>Passing a function as an argument to another function to be executed later.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_11",exampleid:"js_4_1_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Immediately Invoked Function Expressions (IIFE)</strong></li></ul></ul>"},{text:"<ul><ul>Executing a function as soon as it is defined.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_1_12",exampleid:"js_4_1_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Asynchronous Operations</strong></li></ul></ul>"},{text:"<ul><ul>In modern JavaScript development, functions are used in asynchronous operations like Promises and async/await.</ul></ul>"},{text:"Understanding how to define and invoke functions is crucial in JavaScript as it allows you to write more reusable, maintainable, and organized code."}]},{secid:2,subtitle:"Scope and Closure",paragraphs:[{text:"In JavaScript, scope and closure are two fundamental concepts that deal with the visibility and lifetime of variables."},{text:"<ol><li><strong>Scope</strong></li></ol>"},{text:"<ul>Scope determines where variables and functions can be accessed in your code. There are two main types of scope in JavaScript:</ul>"},{text:"<ul><ul><li><strong>Global Scope</strong></li></ul></ul>"},{text:"<ul><ul>A variable declared outside of any function or block becomes a global variable, accessible from anywhere in the code.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_1",exampleid:"js_4_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Function Scope</strong></li></ul></ul>"},{text:"<ul><ul>Variables declared within a function using `<code>var</code>` are local to that function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_2",exampleid:"js_4_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Block Scope (ES6)</strong></li></ul></ul>"},{text:"<ul><ul>With ES6, `<code>let</code>` and `<code>const</code>` introduced block-level scope, which limits the variable to the block (loops, conditionals) in which it is declared.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_3",exampleid:"js_4_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Closure</strong></li></ol>'},{text:"<ul>A JavaScript closure is a feature where an inner function has access to the outer (enclosing) function's variables and parameters. This concept is crucial in JavaScript and enables powerful programming patterns.</ul>"},{text:"<ul><ul><li><strong>Access to Outer Variables</strong></li></ul></ul>"},{text:"<ul><ul>The inner function can access variables defined in its own scope, variables from the outer function's scope, and global variables.</ul></ul>"},{text:"<ul><ul><li><strong>Preserving Variables</strong></li></ul></ul>"},{text:"<ul><ul>One powerful aspect of closures is their ability to preserve the state of outer function variables even after the outer function has returned. This is because functions in JavaScript maintain a reference to the environments in which they were created.</ul></ul>"},{text:"<ul><ul><li><strong>Use Cases</strong></li></ul></ul>"},{text:"<ul><ul>Closures are widely used in JavaScript for things like data encapsulation and privacy, creating factory functions, and in callbacks and event handlers where they preserve the state of the environment for asynchronous execution.</ul></ul>"},{text:"<ul><ul><li><strong>Example of Closure</strong></li></ul></ul>"},{text:"",codeConfig:{codeid:"js_4_2_4",exampleid:"js_4_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Understanding scope and closure is crucial for effective JavaScript programming, as it affects variable access, memory management, and function behavior."}]},{secid:3,subtitle:"`this` Keyword and `arguments` Object",paragraphs:[{text:"In JavaScript, the `<code>this</code>` keyword and the `<code>arguments</code>` object are two important features associated with functions. Understanding their behavior and usage is crucial for writing effective JavaScript code."},{text:"<ol><li><strong>The `<code>this</code>` Keyword in JavaScript Functions</strong></li></ol>"},{text:"<ul>The `<code>this</code>` keyword in a JavaScript function refers to the object it belongs to. It has different values depending on where and how the function is called.</ul>"},{text:"<ul><ul><li><strong>Method Call (Object Context)</strong></li></ul></ul>"},{text:"<ul><ul>When a function is called as a method of an object, `<code>this</code>` refers to the object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_1",exampleid:"js_4_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Simple Function Call</strong></li></ul></ul>"},{text:"<ul><ul>In a regular function call, `<code>this</code>` refers to the global object (`<code>window</code>` in a browser, `<code>global</code>` in Node.js). In strict mode, this will be `<code>undefined</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_2",exampleid:"js_4_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Constructor Call</strong></li></ul></ul>"},{text:"<ul><ul>When a function is used as a constructor (with the `<code>new</code>` keyword), `<code>this</code>` refers to the newly created instance.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_3",exampleid:"js_4_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Explicit Binding</strong></li></ul></ul>"},{text:"<ul><ul>Using `<code>call</code>`, `<code>apply</code>`, or `<code>bind</code>` methods, you can set the value of `<code>this</code>` explicitly.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_4",exampleid:"js_4_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Arrow Functions</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions do not have their own `<code>this</code>` but inherit it from the parent scope. This is particularly useful in callbacks.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_5",exampleid:"js_4_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>The `<code>arguments</code>` Object</strong></li></ol>'},{text:"<ul>The `<code>arguments</code>` object is an array-like object accessible inside functions that contains the values of the arguments passed to that function.</ul>"},{text:"<ul><ul><li><strong>Accessing Function `<code>arguments</code>` Object</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>arguments</code>` object allows you to work with function parameters more flexibly, especially when you don't know the exact number of arguments in advance.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_3_6",exampleid:"js_4_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Non-Arrow Functions Only</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>arguments</code>` object is available only in standard function definitions, not in arrow functions. Arrow functions do not have their own `<code>arguments</code>` object.</ul></ul>"},{text:"Understanding these concepts is vital for mastering function behavior and scope in JavaScript, especially in more complex applications involving callbacks, event handlers, and object-oriented programming."}]},{secid:4,subtitle:"`call`, `apply`, and `bind` Methods",paragraphs:[{text:"In JavaScript, `<code>call</code>`, `<code>apply</code>`, and `<code>bind</code>` are methods used to control the invocation of functions. They are part of the function prototype, hence available to all functions. These methods are especially useful for setting the `<code>this</code>` value explicitly, enabling more flexible function invocation."},{text:"<ol><li><strong>The `<code>call</code>` Method</strong></li></ol>"},{text:"<ul>The `<code>call</code>` method calls a function with a given `<code>this</code>` value and individual arguments.</ul>"},{text:"<ul><ul><li><strong>Setting `<code>this</code>` Value</strong></li></ul></ul>"},{text:"<ul><ul>You can specify the value of `<code>this</code>` inside the called function.</ul></ul>"},{text:"<ul><ul><li><strong>Passing Arguments</strong></li></ul></ul>"},{text:"<ul><ul>Arguments are passed individually, not as an array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_4_1",exampleid:"js_4_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>The `<code>apply</code>` Method</strong></li></ol>'},{text:"<ul>The `<code>apply</code>` method is similar to `<code>call</code>`, but arguments are passed as an array, making it ideal for situations where the number of arguments is not known in advance.</ul>"},{text:"<ul><ul><li><strong>Setting `<code>this</code>` Value</strong></li></ul></ul>"},{text:"<ul><ul>Specify the `<code>this</code>` context.</ul></ul>"},{text:"<ul><ul><li><strong>Passing Arguments as an Array</strong></li></ul></ul>"},{text:"<ul><ul>Useful for variable-length argument lists.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_4_2",exampleid:"js_4_4_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>The `<code>bind</code>` Method</strong></li></ol>'},{text:"<ul>The `<code>bind</code>` method creates a new function with a specified `<code>this</code>` value and any number of preset leading arguments.</ul>"},{text:"<ul><ul><li><strong>Creating a Bound Function</strong></li></ul></ul>"},{text:"<ul><ul>Allows you to create a new function with `<code>this</code>` set to a specific object.</ul></ul>"},{text:"<ul><ul><li><strong>Partial Application</strong></li></ul></ul>"},{text:"<ul><ul>You can preset some arguments, which is known as partial function application.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_4_3",exampleid:"js_4_4_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"These methods are particularly useful in scenarios where you need to manipulate the `<code>this</code>` context, such as in event handling, callback functions, and object-oriented programming in JavaScript. Understanding and using these methods can significantly enhance the flexibility and reusability of your code."}]},{secid:5,subtitle:"Arrow Functions",paragraphs:[{text:"Arrow functions, introduced in ES6 (ECMAScript 2015), provide a more concise syntax for writing function expressions in JavaScript. They are particularly useful for short functions and where you need to preserve the lexical `<code>this</code>` context."},{text:"<ol><li><strong>Basic Syntax of Arrow Functions</strong></li></ol>"},{text:"<ul><ul><li><strong>General Definition</strong></li></ul></ul>"},{text:"<ul><ul>An arrow function is an anonymous function expression using `<code>=></code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>No Parameters</strong></li></ul></ul>"},{text:"<ul><ul>If the function has no parameters, you use an empty pair of parentheses.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_2",exampleid:"js_4_5_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Single Parameter</strong></li></ul></ul>"},{text:"<ul><ul>If there is only one parameter, parentheses are optional.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_3",exampleid:"js_4_5_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Multiple Parameters</strong></li></ul></ul>"},{text:"<ul><ul>Use parentheses for multiple parameters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_4",exampleid:"js_4_5_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Function Body</strong></li></ul></ul>"},{text:"<ul><ul>If the function body contains just a single statement, you can omit the curly braces `<code>{}</code>` and the `<code>return</code>` statement.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_5",exampleid:"js_4_5_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>For a more complex function body, use curly braces and an explicit `<code>return</code>` statement.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_6",exampleid:"js_4_5_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Advanced Usage and Characteristics</strong></li></ol>'},{text:"<ul><ul><li><strong>No `<code>this</code>` Binding</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions do not have their own `<code>this</code>` context. Instead, they inherit `<code>this</code>` from the parent scope at the time of definition. This is particularly useful in callbacks and methods where you want to access the parent context's `<code>this</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_7",exampleid:"js_4_5_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>No `<code>arguments</code>` Binding</strong></li></ul></ul>"},{text:"<ul><ul>Unlike regular functions, arrow functions do not have the `<code>arguments</code>` object. To access function's `<code>arguments</code>`, you must explicitly define parameters or use the rest parameters syntax.</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_8",exampleid:"js_4_5_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>No Constructor</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions cannot be used as constructors and will throw an error if used with the `<code>new</code>` keyword.</ul></ul>"},{text:"<ul><ul><li><strong>Implicit Returns</strong></li></ul></ul>"},{text:"<ul><ul>Arrow functions allow for implicit returns when there is no block `<code>{}</code>`. This makes them very concise for single-expression functions.</ul></ul>"},{text:"<ul><ul><li><strong>Use Cases</strong></li></ul></ul>"},{text:"<ul><ul>Due to their concise syntax and `<code>this</code>` behavior, arrow functions are often used for inline functions and callbacks, array methods (like `<code>map()</code>`, `<code>filter()</code>`, and `<code>reduce()</code>`), and methods in object literals (keeping in mind the lexical `<code>this</code>`).</ul></ul>"},{text:"",codeConfig:{codeid:"js_4_5_9",exampleid:"js_4_5_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Understanding when and how to use arrow functions is crucial for writing concise and readable JavaScript code, especially in scenarios involving callbacks and array transformations."}]}]},{category:"js",chid:5,title:"Working with Data Structures",sections:[{secid:1,subtitle:"Strings, Their Methods, and Manipulation",paragraphs:[{text:"JavaScript strings are a fundamental data type used to represent and manipulate text. Strings can be represented as either string primitives or string objects.  Here's an overview of strings, their methods, and manipulation:"},{text:"<ol><li><strong>Creating Strings</strong></li></ol>"},{text:"<ul><ul><li><strong>String Primitives</strong></li></ul></ul>"},{text:"<ul><ul>String primitives are the most common way to work with text in JavaScript. They are created by simply assigning a string literal to a variable. String literals can be enclosed in single quotes (`<code>'</code>`), double quotes (`<code>\"</code>`), or backticks (`<code>`</code>`) for template literals.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>String Objects</strong></li></ul></ul>"},{text:"<ul><ul>String objects in JavaScript are created using the `<code>String</code>` constructor with the `<code>new</code>` keyword. This is less common in everyday JavaScript programming because string primitives offer almost all the functionality needed for string manipulation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Key Differences</strong></li></ul></ul>"},{text:"<ul><ul>A string primitive is of type `<code>string</code>`, whereas a string object is of type `<code>object</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_3",exampleid:"js_5_1_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>String primitives are generally more efficient because they do not create a new object.</ul></ul>"},{text:"<ul><ul>Most string operations can be performed on both types, but it's important to know that they are not exactly the same. For example, comparing two string objects using `<code>==</code>` or `<code>===</code>` will compare object references, not the string values.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_4",exampleid:"js_5_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Basic Properties</strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>length</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Returns the length of the string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_5",exampleid:"js_5_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Common String Methods</strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>charAt(index)</code>`</strong></li></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_6",exampleid:"js_5_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Returns the character at the specified index.</ul></ul>"},{text:"<ul><ul><li><strong>`<code>concat(string2, string3, ..., stringN)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Concatenates two or more strings.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_7",exampleid:"js_5_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>includes(searchString, position)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Checks if the string contains the specified substring.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_8",exampleid:"js_5_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>indexOf(searchValue, fromIndex)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Returns the index of the first occurrence of the specified value.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_9",exampleid:"js_5_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>slice(startIndex, endIndex)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Extracts a section of a string and returns a new string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_10",exampleid:"js_5_1_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>split(separator, limit)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Splits a string into an array of substrings.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_11",exampleid:"js_5_1_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>toLowerCase()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Converts the string to lower case.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_12",exampleid:"js_5_1_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>toUpperCase()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Converts the string to upper case.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_13",exampleid:"js_5_1_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>trim()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Removes whitespace from both ends of a string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_14",exampleid:"js_5_1_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>String Concatenation with Operators and Interpolation</strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>+</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>+</code>` operator is used to concatenate two strings. When used between strings, it returns a new string that is the combination of the operands.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_15",exampleid:"js_5_1_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>+=</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>+=</code>` operator is used to append a string to an existing string variable. It adds the right operand to the left operand and assigns the result to the left operand. This is a shorthand for `<code>string1 = string1 + string2</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_16",exampleid:"js_5_1_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Interpolation</strong></li></ul></ul>"},{text:"<ul><ul>In JavaScript, template literals (using backticks) allow for string interpolation, which is a way to embed expressions within strings, such as the inclusion of variables, expressions, and even multi-line strings without the need for concatenation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_17",exampleid:"js_5_1_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Character Access of Strings</strong></li></ol>'},{text:"<ul><ul><li><strong>Using `<code>for...of</code>` Loop</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>for...of</code>` loop is a modern and efficient way to iterate over iterable objects like strings. It allows you to directly access each character in the string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_18",exampleid:"js_5_1_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using Destructuring</strong></li></ul></ul>"},{text:"<ul><ul>Destructuring in JavaScript allows you to unpack values from arrays or properties from objects. Since strings are iterable, they can be destructured similar to arrays, enabling access to individual characters.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_19",exampleid:"js_5_1_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Destructuring with Rest Operator</strong></li></ul></ul>"},{text:"<ul><ul>In JavaScript, destructuring along with the rest operator (`<code>...</code>`) can be used to break a string into parts, assigning some of its characters to variables and collecting the rest of them into an array. This is particularly useful when you want to separate a string into individual characters and also keep track of the remainder of the string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_1_20",exampleid:"js_5_1_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, JavaScript strings are a versatile and essential data type in web development, offering a wide range of functionalities for text manipulation and handling. Their ease of use and extensive method library make them a powerful tool in any JavaScript developer's toolkit."}]},{secid:2,subtitle:"Arrays, their Methods, and Manipulation",paragraphs:[{text:"JavaScript arrays are a versatile way to store and manage collections of data in JavaScript. They are an essential feature of the language, providing a flexible and efficient way to work with groups of values. Here are some of important features of JavaScript arrays."},{text:"<ol><li><strong>Creating Arrays</strong></li></ol>"},{text:"<ul>Arrays in JavaScript can be created using array literals or the `<code>Array</code>` constructor.</ul>"},{text:"<ul><ul><li><strong>Array Literals</strong></li></ul></ul>"},{text:"<ul><ul>The array literal is the simplest and most common way to create an array in JavaScript. It involves enclosing a comma-separated list of elements within square brackets (`<code>[]</code>`). This method is straightforward and is usually preferred for its readability and simplicity.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_1",exampleid:"js_5_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>Array</code>` Constructor</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>Array</code>` constructor is a more formal and versatile way of creating arrays. It can be used in a few different ways:</ul></ul>"},{text:"<ul><ul>By creating an array with specified elements, you can pass a list of elements to the `<code>Array</code>` constructor, and it will create an array containing those elements.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_2",exampleid:"js_5_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>To create an array with a specified length, you can pass a single numeric value to the `<code>Array</code>` constructor, it creates an array with that length. This array is filled with empty slots (technically `<code>undefined</code>` values).</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_3",exampleid:"js_5_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Mixed Data Types</strong></li></ul></ul>"},{text:"<ul><ul>Arrays can store elements of different data types, including numbers, strings, objects, and even other arrays.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_4",exampleid:"js_5_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Multidimensional Arrays</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript supports multidimensional arrays (arrays of arrays).</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_5",exampleid:"js_5_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Accessing Elements of an Array</strong></li></ol>'},{text:"<ul>Accessing elements is essential for retrieving and manipulating data stored in an array.</ul>"},{text:"<ul><ul><li><strong>Array Length</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>length</code>` property provides the number of elements in an array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_6",exampleid:"js_5_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using Indices</strong></li></ul></ul>"},{text:"<ul><ul>Elements in an array are stored at numeric indices, starting from 0. You can access them using square brackets `<code>[]</code>` with the index.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_7",exampleid:"js_5_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Iterating Over Arrays</strong></li></ul></ul>"},{text:"<ul><ul>Arrays can be iterated using loops like `<code>for</code>`, `<code>for...of</code>`, and `<code>forEach()</code>` method.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_8",exampleid:"js_5_2_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using Destructuring</strong></li></ul></ul>"},{text:"<ul><ul>Destructuring allows you to unpack values from an array directly into variables. This makes your code more readable and concise, especially when you need to access specific elements in an array.</ul></ul>"},{text:"<ul><ul>You can assign array elements to variables in a single line.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_9",exampleid:"js_5_2_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>If you're only interested in certain elements, you can skip over elements by leaving blanks in the destructuring assignment.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_10",exampleid:"js_5_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>If you want to capture the rest of the elements in an array, you can use the rest parameter (`<code>...</code>`).</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_11",exampleid:"js_5_2_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Destructuring also allows you to set default values for variables, in case the array is shorter than expected.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_12",exampleid:"js_5_2_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Manipulating Arrays</strong></li></ol>'},{text:"<ul>JavaScript provides a wide range of methods for manipulating arrays, making it easy to perform various operations such as adding, removing, transforming, and reordering elements.</ul>"},{text:"<ul><ul><li><strong>`<code>push()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Adds one or more elements to the end of an array and returns the new length of the array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_13",exampleid:"js_5_2_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>pop()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Removes the last element from an array and returns that element.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_14",exampleid:"js_5_2_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>unshift()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Adds one or more elements to the beginning of an array and returns the new length.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_15",exampleid:"js_5_2_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>shift()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Removes the first element from an array and returns that element.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_16",exampleid:"js_5_2_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>map()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Creates a new array with the results of calling a provided function on every element in the calling array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_17",exampleid:"js_5_2_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>filter()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Creates a new array with all elements that pass the test implemented by the provided function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_18",exampleid:"js_5_2_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>reduce()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Executes a reducer function on each element of the array, resulting in a single output value.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_19",exampleid:"js_5_2_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>find()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Returns the value of the first element in the provided array that satisfies the provided testing function.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_20",exampleid:"js_5_2_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>indexOf()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Returns the first index at which a given element can be found in the array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_21",exampleid:"js_5_2_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>reverse()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Reverses the order of the elements of an array in place.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_22",exampleid:"js_5_2_22_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>sort()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Sorts the elements of an array in place and returns the array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_23",exampleid:"js_5_2_23_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>You can use a compare function that references specific properties to customize sorting behaviors.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_24",exampleid:"js_5_2_24_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>slice()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Returns a shallow copy of a portion of an array into a new array object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_25",exampleid:"js_5_2_25_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>splice()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Changes the contents of an array by removing or replacing existing elements and/or adding new elements.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_26",exampleid:"js_5_2_26_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>join()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Joins all elements of an array into a string.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_27",exampleid:"js_5_2_27_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>concat()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Merges two or more arrays into one. This method does not change the existing arrays but instead returns a new array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_28",exampleid:"js_5_2_28_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Spread Operator `<code>...</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The spread operator `<code>...</code>` is a modern and versatile feature of JavaScript that can be used to expand elements of an iterable (such as an array) into individual elements. This is particularly useful for concatenating arrays.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_2_29",exampleid:"js_5_2_29_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"JavaScript arrays are a powerful tool for developers, capable of handling a wide variety of tasks in data manipulation and storage. These features, along with their ease of use, make arrays an indispensable part of JavaScript programming."}]},{secid:3,subtitle:"Objects and Properties",paragraphs:[{text:"JavaScript, as a flexible and dynamic language, heavily relies on objects as one of its core data types. Objects in JavaScript are versatile constructs that can be used to represent a wide range of real-world entities and data structures. Understanding JavaScript objects is fundamental for anyone looking to master the language."},{text:"<ol><li><strong>Basic Features</strong></li></ol>"},{text:"<ul><ul><li><strong>Key-Value Pairs</strong></li></ul></ul>"},{text:"<ul><ul>At their core, JavaScript objects are collections of key-value pairs. The keys (also known as properties) are usually strings or symbols, and the values can be any data type, including numbers, strings, functions, and even other objects.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_1",exampleid:"js_5_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Dynamic Nature</strong></li></ul></ul>"},{text:"<ul><ul>Objects in JavaScript are dynamic. This means you can add, modify, or delete properties after the object has been created.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_2",exampleid:"js_5_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Getters and Setters</strong></li></ul></ul>"},{text:"<ul><ul>Objects can have getter and setter functions. These are special methods that provide a way to get and set the values of properties indirectly.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_3",exampleid:"js_5_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Property Shorthands</strong></li></ul></ul>"},{text:"<ul><ul>Property shorthands allow you to quickly create objects when the property names are the same as the variable names that hold their values.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_4",exampleid:"js_5_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Computed Property Names</strong></li></ul></ul>"},{text:"<ul><ul>Computed property names allow you to set an object's property name using an expression, providing more dynamic object creation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_5",exampleid:"js_5_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Methods</strong></li></ul></ul>"},{text:'<ul><ul>Methods are functions that are stored as object properties. This allows objects to have "actions" they can perform.</ul></ul>'},{text:"",codeConfig:{codeid:"js_5_3_6",exampleid:"js_5_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>this</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Inside a method, `<code>this</code>` refers to the object the method belongs to. This provides a way to access other properties of the object within methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_7",exampleid:"js_5_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Creating Objects</strong></li></ol>'},{text:"<ul>There are several ways to create objects in JavaScript:</ul>"},{text:"<ul><ul><li><strong>Object Literals</strong></li></ul></ul>"},{text:"<ul><ul>The simplest and most common way to create objects.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_8",exampleid:"js_5_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the `<code>new Object()</code>` Syntax</strong></li></ul></ul>"},{text:"<ul><ul>This is more verbose and less common.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_9",exampleid:"js_5_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Constructor Functions</strong></li></ul></ul>"},{text:"<ul><ul>Useful for creating multiple objects with the same structure.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_10",exampleid:"js_5_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the `<code>Object.create()</code>` Method</strong></li></ul></ul>"},{text:"<ul><ul>This method can be used to create a new object with the specified prototype object and properties.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_11",exampleid:"js_5_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Class Syntax (ES6 and later)</strong></li></ul></ul>"},{text:"<ul><ul>This is a more modern approach using classes.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_12",exampleid:"js_5_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Accessing Object Keys and Properties</strong></li></ol>'},{text:"<ul>Once you have created an object, you can access its keys and properties in several ways:</ul>"},{text:"<ul><ul><li><strong>Dot Notation</strong></li></ul></ul>"},{text:"<ul><ul>The most common way to access properties.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_13",exampleid:"js_5_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Bracket Notation</strong></li></ul></ul>"},{text:"<ul><ul>Useful when the property name is dynamic or not a valid identifier.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_14",exampleid:"js_5_3_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Object Destructuring</strong></li></ul></ul>"},{text:"<ul><ul>Destructuring allows unpacking properties from objects into distinct variables.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_15",exampleid:"js_5_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>for...in</code>` Loop</strong></li></ul></ul>"},{text:"<ul><ul>Iterates over all enumerable properties of an object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_16",exampleid:"js_5_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>Object.keys()</code>` Method</strong></li></ul></ul>"},{text:"<ul><ul>Gets an array of all the property names (keys) of an object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_17",exampleid:"js_5_3_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>Object.values()</code>` Method (ES8 and later)</strong></li></ul></ul>"},{text:"<ul><ul>Gets an array of all the values of an object's own enumerable properties.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_18",exampleid:"js_5_3_18_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>Object.entries()</code>` Method (ES8 and later)</strong></li></ul></ul>"},{text:"<ul><ul>Gets an array of key-value pairs.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_19",exampleid:"js_5_3_19_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Property Attributes and Descriptors</strong></li></ol>'},{text:"<ul>Property attributes and descriptors in JavaScript provide a detailed level of control over the properties of objects. These attributes define characteristics of the properties, such as whether they can be written to, enumerated, or configured.</ul>"},{text:"<ul><ul><li><strong>Key Property Attributes</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>`<code>value</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The value associated with the property. This can be any valid JavaScript value (number, object, function, etc.).</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>`<code>writable</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>A Boolean indicating whether the property's value can be changed. If `<code>false</code>`, the property is read-only.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>`<code>enumerable</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>A Boolean indicating whether the property is enumerable. If true, the property shows up in `<code>for...in</code>` loops and methods like `<code>Object.keys()</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>`<code>configurable</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>A Boolean indicating if the property descriptor can be changed and if the property can be deleted from the object.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Using `<code>Object.defineProperty()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>Object.defineProperty()</code>` method is used to define a new property directly on an object or modify an existing property on an object and return the object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_20",exampleid:"js_5_3_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using `<code>Object.defineProperties()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>To define multiple properties at once, you can use `<code>Object.defineProperties()</code>`. This method allows setting multiple property descriptors.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_21",exampleid:"js_5_3_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Accessing Property Descriptors</strong></li></ul></ul>"},{text:"<ul><ul>You can use `<code>Object.getOwnPropertyDescriptor()</code>` to get the descriptor for a property of an object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_22",exampleid:"js_5_3_22_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Copying Objects</strong></li></ol>'},{text:"<ul>Copying objects in JavaScript requires understanding the difference between shallow and deep copying.</ul>"},{text:"<ul><ul><li><strong>Shallow Copy</strong></li></ul></ul>"},{text:"<ul><ul>A shallow copy of an object copies the top-level properties, but nested objects or arrays are still referenced. This means changes to nested objects in the copied object will affect the original object, and vice versa.</ul></ul>"},{text:"<ul><ul>Using Spread Syntax</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_23",exampleid:"js_5_3_23_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Using `<code>Object.assign()</code>`</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_24",exampleid:"js_5_3_24_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Deep Copy</strong></li></ul></ul>"},{text:"<ul><ul>A deep copy creates a new object and recursively copies every property of the original object, resulting in a completely independent object.</ul></ul>"},{text:"<ul><ul>Using `<code>JSON.stringify()</code>` and `<code>JSON.parse()</code>`</ul></ul>"},{text:"<ul><ul>This method is a simple way to deep copy objects that contain only JSON-serializable values. However, it does not work with functions, dates, or other non-serializable values.</ul></ul>"},{text:"",codeConfig:{codeid:"js_5_3_25",exampleid:"js_5_3_25_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Using the Third-Party Libraries</ul></ul>"},{text:'<ul><ul>Some third-party libraries, such as "Lodash", provide deep copy features for JavaScript objects.</ul></ul>'},{text:"JavaScript objects are a backbone of the language, providing a flexible and powerful way to structure and manipulate data. They combine data and functionality, are dynamically modifiable, and support inheritance, making them suitable for a wide range of programming paradigms and applications in JavaScript. Whether you're building simple scripts or complex applications, a thorough understanding of JavaScript objects is essential."}]},{secid:4,subtitle:"Maps and Sets",paragraphs:[{text:"JavaScript `<code>Map</code>`, `<code>Set</code>`, `<code>WeakMap</code>`, and `<code>WeakSet</code>` are data structures introduced in ES6 (ECMAScript 2015) that are used to store collections of data. `<code>Map</code>` and `<code>Set</code>` are suitable for scenarios where you need to store key-value pairs and unique values, respectively, with any data type. `<code>WeakMap</code>` and `<code>WeakSet</code>` are useful for memory-efficient storage, as they allow for the garbage collection of unused objects."},{text:"<ol><li><strong>`<code>Map</code>`</strong></li></ol>"},{text:"<ul>A `<code>Map</code>` in JavaScript is a collection of key-value pairs where both the keys and values can be of any type. This is a significant improvement over regular objects because in objects, the keys are always strings or symbols.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Key-Value Storage</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stores elements as key-value pairs.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Any Data Type as Key</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Allows keys of any data type (not limited to strings or symbols).</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Ordered</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Iterates elements in the order of their insertion.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Size Property</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can easily get the size of the map using the `<code>size</code>` property.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a `<code>Map</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To create a `<code>Map</code>`, you simply initialize it using the `<code>new</code>` keyword. This creates an empty `<code>Map</code>`.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can add elements to a `<code>Map</code>` using the `<code>set</code>` method. This method takes two arguments: the key and the value. You can add as many key-value pairs as needed.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Getting the Size</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The `<code>size</code>` property of a JavaScript `<code>Map</code>` object returns the number of key/value pairs in the `<code>Map</code>`.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_2a",exampleid:"js_5_4_2a_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Accessing Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To access the value associated with a specific key, use the `<code>get</code>` method with the key as its argument.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_3",exampleid:"js_5_4_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>If you try to access a value with a key that doesn't exist in the map, it will return `<code>undefined</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Iterating over a `<code>Map</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>There are several ways to iterate over a `<code>Map</code>`. Here are a few common methods:</ul></ul></ul>"},{text:"<ul><ul><ul>Using `<code>forEach()</code>`:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_4",exampleid:"js_5_4_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Using `<code>for...of</code>` loop with `<code>entries()</code>`:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_5",exampleid:"js_5_4_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Iterating over keys or values only:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_6",exampleid:"js_5_4_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:'<ol start="2"><li><strong>`<code>Set</code>`</strong></li></ol>'},{text:"<ul>A `<code>Set</code>` in JavaScript is a collection of unique values. Each value can only occur once in a Set, which makes it perfect for creating collections of non-repetitive elements.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Unique Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stores only unique elements.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Any Data Type</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Allows elements of any data type.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>No Key-Value Pairs</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Unlike maps, sets only store values, not key-value pairs.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>No Index-Based Access</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Elements are not accessed by their position.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Size Property</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To get the size of a `<code>Set</code>`, use the `<code>size</code>` property.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a `<code>Set</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To create a `<code>Set</code>`, you use the `<code>new</code>` keyword to initialize it. This will create an empty `<code>Set</code>`.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can add elements to a `<code>Set</code>` using the `<code>add</code>` method. Each element in a `<code>Set</code>` must be unique; duplicate values will be ignored.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Checking for a Value</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To check if a value exists in a `<code>Set</code>`, use the `<code>has</code>` method. This method returns `<code>true</code>` if the value is present in the `<code>Set</code>`, and `<code>false</code>` otherwise.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_9",exampleid:"js_5_4_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Removing Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To remove an element from a `<code>Set</code>`, use the `<code>delete</code>` method. This method removes the specified element.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_10",exampleid:"js_5_4_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Iterating over a `<code>Set</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>There are several ways to iterate over the elements of a `<code>Set</code>:</ul></ul></ul>"},{text:"<ul><ul><ul>Using `<code>forEach</code>` method:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_11",exampleid:"js_5_4_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Using `<code>for...of</code>` loop:</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_12",exampleid:"js_5_4_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Getting the Size</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>You can find out the number of elements in a `<code>Set</code>` using the `<code>size</code>` property.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_13",exampleid:"js_5_4_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:'<ol start="3"><li><strong>`<code>WeakMap</code>`</strong></li></ol>'},{text:"<ul>A `<code>WeakMap</code>` is similar to a `<code>Map</code>`, but with a few key differences. The keys of a WeakMap are objects and non-registered symbols (created by calling the `<code>Symbol()</code>` constructor), and they are weakly referenced. This means that if there is no other reference to the object or symbol, it can be garbage-collected. This behavior is useful for managing memory in large applications.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Object or Non-registered Symbol Keys</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Only objects or non-registered symbols can be keys.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Weak References</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Keys are weakly referenced.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Non-Enumerable</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Keys and values are not enumerable.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a `<code>WeakMap</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Creating a `<code>WeakMap</code>` is straightforward. You use the `<code>new</code>` keyword to initialize it.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_14",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To add elements to a `<code>WeakMap</code>`, you use the `<code>set</code>` method. This method takes two arguments: an object as a key and the value associated with that key.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_15",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Accessing Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To access values in a `<code>WeakMap</code>`, you use the `<code>get</code>` method with the object key as its argument.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_16",exampleid:"js_5_4_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>This will retrieve the value associated with `<code>objKey</code>`. If the key does not exist in the `<code>WeakMap</code>`, `<code>get</code>` will return `<code>undefined</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Deleting Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To remove a key-value pair from a `<code>WeakMap</code>`, use the `<code>delete</code>` method with the object key.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_17",exampleid:"js_5_4_17_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>This method removes the specified key and its associated value from the `<code>WeakMap</code>`.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Additional Notes</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Garbage Collection</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>One of the key characteristics of `<code>WeakMap</code>` is that it allows its keys to be garbage-collected. If there are no other references to the key, it can be garbage-collected, which in turn removes the key-value pair from the `<code>WeakMap</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Not Enumerable</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Unlike `<code>Map</code>`, `<code>WeakMap</code>` keys and values are not enumerable. There are no methods to get a list of keys, values, or entries. This is due to the way `<code>WeakMap</code>` is designed to allow for efficient garbage collection.</ul></ul></ul>"},{text:'<ol start="4"><li><strong>`<code>WeakSet</code>`</strong></li></ol>'},{text:"<ul>A `<code>WeakSet</code>` is a collection of objects and non-registered symbols, similar to a `<code>Set</code>`, but with weak references. This means that if an object or a non-registered symbol in a `<code>WeakSet</code>` has no other references, it can be garbage-collected.</ul>"},{text:"<ul><ul><li><strong>Features</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Object or Non-registered Symbol Values</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Only objects or non-registered symbols can be stored.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Weak References</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Stored objects or non-registered symbols are weakly referenced.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Not Enumerable</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The elements cannot be enumerated.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Basic Operations</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Creating a `<code>WeakSet</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To create a `<code>WeakSet</code>`, you initialize it using the `<code>new</code>` keyword. This creates an empty `<code>WeakSet</code>`.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_18",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Adding Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Elements are added to a `<code>WeakSet</code>` using the `<code>add</code>` method.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_19",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Checking for an Element</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To check if an object or a non-registered symbol is present in a `<code>WeakSet</code>`, use the `<code>has</code>` method. This method returns `<code>true</code>` if the object is in the `<code>WeakSet</code>`, and `<code>false</code>` otherwise.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_20",exampleid:"js_5_4_20_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul><li><strong>Deleting Elements</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>To remove an object from a `<code>WeakSet</code>`, use the `<code>delete</code>` method.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_4_21",exampleid:"js_5_4_21_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"In summary, `<code>Map</code>` and `<code>Set</code>` are robust for general-purpose use where order and uniqueness are important, respectively. `<code>WeakMap</code>` and `<code>WeakSet</code>` are specialized for cases where memory management is a concern, particularly in managing object references without impeding garbage collection."}]},{secid:5,subtitle:"JSON Format",paragraphs:[{text:"JSON (JavaScript Object Notation) is a text-based data format following JavaScript object syntax. While it's derived from JavaScript, JSON is a language-independent format and is widely used in various programming environments. Here are the key aspects of JSON syntax:"},{text:"<ol><li><strong>Quoted Keys and Values</strong></li></ol>"},{text:"<ul>In JSON, both keys and string values must be enclosed in double quotes. Single quotes are not valid in JSON.</ul>"},{text:"",codeConfig:{codeid:"js_5_5_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>Here, both the keys (`<code>name</code>`, `<code>occupation</code>`) and the string value (`<code>John</code>`, `<code>Engineer</code>`) are in double quotes.</ul>"},{text:'<ol start="2"><li><strong>No Trailing Commas</strong></li></ol>'},{text:"<ul>Unlike some JavaScript objects, JSON does not allow trailing commas. Every key-value pair must be separated by a comma, but the last pair must not be followed by a comma.</ul>"},{text:'<ol start="3"><li><strong>Data Types</strong></li></ol>'},{text:"<ul>JSON supports some data types, including:</ul>"},{text:"<ul><ul><li>Strings (must be in double quotes)</li></ul></ul>"},{text:"<ul><ul><li>Numbers (integers and floats)</li></ul></ul>"},{text:"<ul><ul><li>Booleans (`<code>true</code>` or `<code>false</code>`)</li></ul></ul>"},{text:"<ul><ul><li>Arrays (ordered lists)</li></ul></ul>"},{text:"<ul><ul><li>Objects (collections of key/value pairs)</li></ul></ul>"},{text:"<ul><ul><li>`<code>null</code>`</li></ul></ul>"},{text:'<ol start="4"><li><strong>Arrays in JSON</strong></li></ol>'},{text:"<ul>Arrays are ordered lists of values, enclosed in square brackets `<code>[]</code>`. The values can be of any JSON-supported data type.</ul>"},{text:"",codeConfig:{codeid:"js_5_5_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>Note that the string values in the array are also enclosed in double quotes.</ul>"},{text:'<ol start="5"><li><strong>Nested Objects and Arrays</strong></li></ol>'},{text:"<ul>JSON can have nested objects and arrays.</ul>"},{text:"",codeConfig:{codeid:"js_5_5_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JSON",exampleTitle:"",codeLangs:"json",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"2.5rem"}},{text:"<ul>In this example, the `<code>address</code>` is a nested object, and `<code>hobbies</code>` is an array of strings.</ul>"},{text:'<ol start="6"><li><strong>Stringification and Parsing</strong></li></ol>'},{text:"<ul><ul><li>`<code>JSON.stringify()</code>` in JavaScript converts an object to a JSON string.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_5_4",exampleid:"js_5_5_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li>`<code>JSON.parse()</code>` converts a JSON string back to a JavaScript object.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_5_5_5",exampleid:"js_5_5_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>These methods ensure that the data adheres to JSON syntax when converting between strings and objects.</ul></ul>"},{text:'<ol start="7"><li><strong>Comments</strong></li></ol>'},{text:"<ul>Standard JSON does not support comments. Adding comments to a JSON file would make it invalid.</ul>"},{text:'<ol start="8"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul>JSON is commonly used for data interchange in web applications, API responses, configuration files, and more.</ul>"},{text:'<ol start="9"><li><strong>Compatibility</strong></li></ol>'},{text:"<ul>Despite being derived from JavaScript, JSON is a universally accepted format and can be used in numerous programming languages.</ul>"},{text:"Understanding the precise syntax rules of JSON is crucial for effective data interchange in modern web development and many other applications. This adherence to a strict syntax ensures consistency across different systems and platforms."}]}]},{category:"js",chid:6,title:"Object-Oriented Programming (OOP)",sections:[{secid:1,subtitle:"Prototypes and Inheritance",paragraphs:[{text:"JavaScript's prototypes and inheritance are fundamental concepts that play a crucial role in the language's object-oriented programming model. Let's break them down."},{text:"<ol><li><strong>Prototypes</strong></li></ol>"},{text:"<ul><ul><li><strong>What's a Prototype</strong></li></ul></ul>"},{text:"<ul><ul>Every JavaScript object has a property called `<code>prototype</code>`. This is a reference to another object and contains shared attributes and methods. When an object is created (e.g., using object literals, constructors, or factory functions), JavaScript gives this object a prototype property that links to the prototype object of its constructor.</ul></ul>"},{text:"<ul><ul><li><strong>Use Cases of Prototypes</strong></li></ul></ul>"},{text:"<ul><ul>Prototypes are used for sharing functionality across objects. Instead of each object storing its own copy of a method or property, it can access these from its prototype. For example:</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_1",exampleid:"js_6_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul>Here, the `<code>greet</code>` method is on `<code>Person.prototype</code>`, so it's shared by all instances of `<code>Person</code>`.</ul></ul>"},{text:'<ol start="2"><li><strong>Inheritance</strong></li></ol>'},{text:"<ul><ul><li><strong>What's Inheritance</strong></li></ul></ul>"},{text:'<ul><ul>Inheritance in JavaScript allows an object to take on the properties and methods of another object, effectively "inheriting" them.</ul></ul>'},{text:"<ul><ul><li><strong>Prototypal Inheritance</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript uses prototypes for inheritance. When you try to access a property or method of an object, JavaScript first looks at the object itself, and if it doesn't find it, it looks at the object's prototype, and so on up the prototype chain until it finds the property or returns undefined.</ul></ul>"},{text:"<ul><ul><li><strong>Steps to Implement Prototypal Inheritance</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 1: Define the Base Constructor Function</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>First, we'll define a constructor function `<code>Vehicle</code>` that will serve as the base for our inheritance.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this example, `<code>Vehicle</code>` is a constructor function with a property `<code>type</code>`. It also has a method `<code>describe</code>` on its prototype.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 2: Define the Child Constructor Function</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Next, we'll define another constructor function `<code>Car</code>` that will inherit properties and methods from `<code>Vehicle</code>`.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Here, `<code>Car</code>` is intended to be a more specific type of `<code>Vehicle</code>`. It calls `<code>Vehicle</code>` constructor function to initialize the `<code>type</code>` property. It also sets its `<code>prototype</code>` to a new object created with `<code>Vehicle.prototype</code>` to inherit methods from `<code>Vehicle</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 3: Add or Override Methods in `<code>Car</code>`</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Now, we can add new methods to `<code>Car</code>` or override existing ones from `<code>Vehicle</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this example, we added a new method `<code>showDetails</code>` to `<code>Car</code>`, and we also override the `<code>describe</code>` method to provide more specific information about the `<code>Car</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 4: Create an Instance of `<code>Car</code>` and Use It</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Finally, we can create an instance of `<code>Car</code> and use the inherited and newly defined methods.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_1_5",exampleid:"js_6_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this example, `<code>myCar</code>` is an instance of `<code>Car</code>` that has access to both the methods defined in `<code>Car</code>` and inherited from `<code>Vehicle</code>`.</ul></ul></ul>"},{text:"Understanding these concepts is crucial for effective JavaScript programming, especially when dealing with complex object-oriented structures."}]},{secid:2,subtitle:"Classes and Inheritance",paragraphs:[{text:"JavaScript classes are a part of the ECMAScript 2015 (ES6) specification that provide a new, syntactic sugar over the existing prototype-based inheritance and offer a more convenient and familiar syntax for creating objects. Here's a breakdown of the key components and features of JavaScript classes:"},{text:"<ol><li><strong>Defining Classes</strong></li></ol>"},{text:"<ul><ul><li><strong>`<code>class</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>class</code>` keyword is used to define a class in JavaScript. It encapsulates data and methods that should be used across instances of this class.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>constructor</code>` Method</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>constructor</code>` method is a special method for creating and initializing objects created with a class. It's automatically called when a new instance of the class is created.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Public Fields</strong></li></ul></ul>"},{text:"<ul><ul>Public fields are variables that belong to a class. They are declared directly within the class body, outside of any methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_3",exampleid:"js_6_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Public Methods</strong></li></ul></ul>"},{text:"<ul><ul>Public methods are functions associated with a class. they are defined within the class body.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_4",exampleid:"js_6_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Static Fields and Methods</strong></li></ul></ul>"},{text:"<ul><ul>Static fields and methods are used or called on the class itself, not on instances of the class. they are defined within the class body.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_5",exampleid:"js_6_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Setters & Getters</strong></li></ul></ul>"},{text:"<ul><ul>Setters and getters are special methods to set and get the values of fields. They provide a way to get and set the fields of an object internally.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_6",exampleid:"js_6_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Private Fields and Methods with `<code>#</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Private class fields that cannot be accessed outside of the class's body. Marked with #, they are only accessible within the class. In addition, `<code>#</code>` can also apply to static fields, static methods, setters, and getters to make them private in a class.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_7",exampleid:"js_6_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Inheritance</strong></li></ol>'},{text:"<ul><ul><li><strong>What's Class Inheritance</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript's class inheritance is a key concept that allows objects to take on fields and methods from another class. Introduced in ES6, class syntax provides a more intuitive and easier-to-understand mechanism for creating object-oriented code compared to the traditional prototype-based approach.</ul></ul>"},{text:"<ul><ul><li><strong>`<code>extends</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>In JavaScript, the `<code>extends</code>` keyword is used in class declarations to create a class as a child of another class.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>super</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Inside a subclass, `<code>super</code>` refers to the constructor of the parent class. It's used to call the parent's constructor and methods.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Steps to Implement Class Inheritance</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 1: Define the Parent Class</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>First, we define a parent class. In this example, let's create a `<code>Vehicle</code>` class that will serve as our base class.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In this `<code>Vehicle</code>` class, we have a constructor that initializes the `<code>brand</code>` field and a method `<code>start</code>`.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 2: Define the Child Class using `<code>extends</code>` Keyword</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Now, let's create a child class `<code>Car</code>` that extends the `<code>Vehicle</code>` class. This is where we use the `<code>extends</code>` keyword.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In the `<code>Car</code>` class, the `<code>extends Vehicle</code>` syntax is used to create `<code>Car</code>` as a subclass of `<code>Vehicle</code>`. The `<code>super(brand)</code>` call inside the constructor is crucial. It calls the constructor of `<code>Vehicle</code>`, ensuring the `<code>brand</code> field is initialized.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 3: Overriding Methods</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Let's add an example of overriding a method in the child class.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_12",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>In the overridden `<code>start</code>` method of `<code>Car</code>`, we call `<code>super.start()</code>` to execute the `<code>start</code>` method from the `<code>Vehicle</code>` class.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Step 4: Creating Instances and Using the Inheritance</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Finally, let's create an instance of the `<code>Car</code>` class and see the inheritance in action.</ul></ul></ul>"},{text:"",codeConfig:{codeid:"js_6_2_13",exampleid:"js_6_2_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"7.5rem"}},{text:"<ul><ul><ul>Here, `<code>myCar</code>` is an instance of `<code>Car</code>`. The `<code>display</code>` method specific to `<code>Car</code>` displays the full information of the `myCar`.</ul></ul></ul>"},{text:"<ul><ul><li><strong>Key Features of Class Inheritance</strong></li></ul></ul>"},{text:"<ul><ul><ul><li><strong>Method Overriding</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Child classes can override methods of the parent class to provide specialized behavior.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Accessing Parent Class Methods</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>The `<code>super</code>` keyword can be used to access and call functions on an object's parent.</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Multi-level Inheritance</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>JavaScript supports multi-level inheritance (a chain of classes inheriting from one another).</ul></ul></ul>"},{text:"<ul><ul><ul><li><strong>Single Inheritance</strong></li></ul></ul></ul>"},{text:"<ul><ul><ul>Each class can only extend one other class (no multiple inheritance directly).</ul></ul></ul>"},{text:"JavaScript classes provide a more declarative and less verbose way to create objects and manage inheritance compared to the traditional prototype-based approach. The syntax introduced by ES6, including `<code>class</code>` keyword, constructor, fields, methods, static methods, setters & getters, and private class fields, offers a clearer and more powerful way to work with objects in JavaScript."}]},{secid:3,subtitle:"Built-in Constructors",paragraphs:[{text:"JavaScript provides several built-in constructors which allow for the creation of objects of predefined types. These constructors are part of the JavaScript language and are available in any JavaScript environment. Let's explore some of the most commonly used built-in constructors with examples:"},{text:"<ol><li><strong>Object Constructor</strong></li></ol>"},{text:"<ul><ul><li><strong>Creating Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>Object</code>` constructor is used to create a new object wrapper. It's the base constructor for all JavaScript objects. While you can create objects using `<code>new Object()</code>`, it's more common and convenient to use object literal syntax `<code>{}</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_1",exampleid:"js_6_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Object Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>When called as a function (`<code>Object()</code>`), it returns a new object, similar to using the `<code>new Object()</code>` constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_2",exampleid:"js_6_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Array Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Array Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>Array</code>` constructor creates array objects. It's less common to use `<code>new Array()</code>` due to potential confusion (single numeric argument defines array length). Array literals `<code>[]</code>` are preferred.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_3",exampleid:"js_6_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Array Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Calling `<code>Array()</code>` as a function behaves like using the `<code>new Array()</code>` constructor. It creates and returns a new array.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_4",exampleid:"js_6_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>String Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating String Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Creates a new string object. Rarely used because string literals provide the same functionality more simply.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_5",exampleid:"js_6_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the String Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>When `<code>String()</code>` is called as a function, it converts the given value to a string primitive, which is different from creating a String object using `<code>new String()</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_6",exampleid:"js_6_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Number Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Number Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Constructs a number object wrapper. Generally not recommended for use. Number literals provide cleaner syntax and better performance.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_7",exampleid:"js_6_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Number Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Similar to `<code>String()</code>`, calling `<code>Number()</code>` as a function converts the given value to a number primitive, rather than creating a new Number object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_8",exampleid:"js_6_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Boolean Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Boolean Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Creates a boolean object wrapper. Boolean literals are preferred for simplicity. Boolean objects can be counterintuitive (all Boolean objects are truthy, even `<code>new Boolean(false)</code>`).</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_9",exampleid:"js_6_3_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Boolean Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>`<code>Boolean()</code>` as a function converts the given value to its boolean primitive equivalent, which is not the same as creating a new Boolean object with `<code>new Boolean()</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_10",exampleid:"js_6_3_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="6"><li><strong>Function Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Function Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>Function</code>` constructor creates new function objects. It allows defining functions dynamically, but is less common due to readability concerns and scoping differences.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_11",exampleid:"js_6_3_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Function Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Calling `<code>Function()</code>` as a function still creates a new function object, similar to using the `<code>new Function()</code>` constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_12",exampleid:"js_6_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Date Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating Date Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>The `<code>Date</code>` constructor creates date objects representing dates and times. Commonly used as there's no literal syntax for dates.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_13",exampleid:"js_6_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the Date Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>When `<code>Date()</code>` is called as a function, it returns a string representing the current date and time, rather than creating a new Date object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_14",exampleid:"js_6_3_14_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="8"><li><strong>RegExp Constructor</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating RegExp Objects Using `<code>new</code>` Keyword</strong></li></ul></ul>"},{text:"<ul><ul>Constructs a RegExp object for matching text with a pattern. While useful for dynamically creating regular expressions, literal syntax is often clearer and more concise.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_15",exampleid:"js_6_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Using the RegExp Constructor as a Fucntion</strong></li></ul></ul>"},{text:"<ul><ul>Calling `<code>RegExp()</code>` as a function creates a new regular expression object, similar to using the `<code>new RegExp()</code>` constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_6_3_16",exampleid:"js_6_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"Built-in constructors in JavaScript offer flexibility in creating various types of objects, but understanding when and how to use them, especially considering the alternatives, is crucial for effective JavaScript programming."}]}]},{category:"js",chid:7,title:"Asynchronous Programming",sections:[{secid:1,subtitle:"Introduction to Asynchronous Programming",paragraphs:[{text:"Asynchronous programming is a programming paradigm that allows tasks to run independently and concurrently without blocking the execution of the main program. It enables the efficient execution of time-consuming operations such as fetching data from a server, reading and writing files, or waiting for user input. Instead of waiting for these operations to complete before moving on, asynchronous programming allows the program to continue executing other tasks while waiting for the asynchronous operations to finish. Here's an introduction to asynchronous programming:"},{text:"<ol><li><strong>Synchronous vs. Asynchronous Execution</strong></li></ol>"},{text:"<ul><ul><li>In synchronous programming, tasks are executed one after the other, and each task must complete before the next one starts. This can lead to blocking, where the program waits for a task to finish, causing a delay in the overall execution.</li></ul></ul>"},{text:"<ul><ul><li>In asynchronous programming, tasks can be initiated and continue running independently while other tasks are in progress. Asynchronous tasks run in the background, and the program can move on to execute other tasks without waiting for the completion of the asynchronous operations.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Callbacks</strong></li></ol>'},{text:"<ul><ul><li>Callbacks are a common pattern used in asynchronous programming.</li></ul></ul>"},{text:"<ul><ul><li>A callback is a function that is passed as an argument to another function and gets invoked once an asynchronous operation completes.</li></ul></ul>"},{text:"<ul><ul><li>Callbacks allow you to specify the code that should run after the completion of an asynchronous task.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Promises</strong></li></ol>'},{text:"<ul><ul><li>Promises are a more modern approach to asynchronous programming and provide a cleaner and more structured way to handle asynchronous operations.</li></ul></ul>"},{text:"<ul><ul><li>A promise represents the eventual completion or failure of an asynchronous operation and provides a mechanism to handle the result or error once available.</li></ul></ul>"},{text:"<ul><ul><li>Promises have methods like `<code>.then()</code>` and `<code>.catch()</code>` that allow you to chain operations and handle the success or failure of a promise.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Async/Await</strong></li></ol>'},{text:"<ul><ul><li>Async/await is a syntax introduced in newer versions of JavaScript (ES2017) that simplifies working with promises.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>async</code>` keyword is used to define an asynchronous function, and the `<code>await</code>` keyword is used to pause the execution of the function until a promise is resolved.</li></ul></ul>"},{text:"<ul><ul><li>Async/await allows you to write asynchronous code in a more synchronous and readable manner, making it easier to handle asynchronous operations and their results.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Event-driven Programming</strong></li></ol>'},{text:"<ul><ul><li>Asynchronous programming often revolves around event-driven programming.</li></ul></ul>"},{text:"<ul><ul><li>Events are triggered when certain actions occur, such as user input, network responses, or timers.</li></ul></ul>"},{text:"<ul><ul><li>Asynchronous operations are usually initiated and respond to events, and the program executes code in response to these events.</li></ul></ul>"},{text:"Asynchronous programming is essential for building responsive and efficient applications, particularly in scenarios where operations involve network requests, file I/O, or other time-consuming tasks. By utilizing callbacks, promises, or async/await syntax, you can handle asynchronous operations in a structured and manageable way, ensuring that your program remains responsive and performs well."}]},{secid:2,subtitle:"Callback Functions",paragraphs:[{text:"Callback functions are a fundamental concept in JavaScript that allows you to pass a function as an argument to another function. The primary purpose of using callback functions is to execute code asynchronously or to handle the result of an asynchronous operation. Here's an overview of callback functions:"},{text:"<ol><li><strong>Definition</strong></li></ol>"},{text:"<ul><ul><li>A callback function is a function that is passed as an argument to another function and gets invoked at a later point in time, typically after the completion of a certain task.</li></ul></ul>"},{text:"<ul><ul><li>The function receiving the callback is responsible for calling it, usually passing some data or result to the callback.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Callback Syntax</strong></li></ol>'},{text:"<ul><ul><li>Callback functions can be declared using regular function syntax or as anonymous functions.<br/><br/>Here is an example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_7_2_1",exampleid:"js_7_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Asynchronous Operations</strong></li></ol>'},{text:"<ul><ul><li>Callback functions are commonly used in asynchronous programming to handle the completion of time-consuming tasks, such as making API requests, reading files, or database operations.</li></ul></ul>"},{text:"<ul><ul><li>Instead of blocking the program's execution while waiting for these tasks to finish, the program continues executing other tasks, and the callback function is invoked once the asynchronous operation completes.<br/><br/>Here is an example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_7_2_2",exampleid:"js_7_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Customizing Callbacks</strong></li></ol>'},{text:"<ul><ul><li>Callback functions can be customized to accept additional arguments based on the specific requirements of the operation or task being performed.</li></ul></ul>"},{text:"<ul><ul><li>The function that invokes the callback can pass any necessary data as arguments when invoking the callback.</li></ul></ul>"},{text:"Callback functions are a powerful mechanism in JavaScript that allows you to control the flow of execution in asynchronous scenarios. By passing callback functions to other functions, you can define custom behavior that executes at a specific point in time, such as after the completion of an asynchronous task. However, as the complexity of asynchronous code grows, alternative approaches like promises or async/await may be more suitable for handling asynchronous operations in a more maintainable and readable manner."}]},{secid:3,subtitle:"Promises",paragraphs:[{text:"Promises are an essential part of JavaScript and provide a more structured and cleaner way to handle asynchronous operations compared to using callback functions. A promise represents the eventual completion or failure of an asynchronous operation and allows you to handle the result or error once it's available. Here's an overview of promises:"},{text:"<ol><li><strong>Promise States</strong></li></ol>"},{text:"<ul><ul><li>A promise can be in one of three states: pending, fulfilled, or rejected.</li></ul></ul>"},{text:"<ul><ul><li>When a promise is pending, it means that the asynchronous operation is still ongoing and the result is not available yet.</li></ul></ul>"},{text:"<ul><ul><li>A fulfilled promise means that the operation completed successfully, and the promise holds the resulting value.</li></ul></ul>"},{text:"<ul><ul><li>A rejected promise means that an error occurred during the operation, and the promise holds the reason for the error.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Creating Promises</strong></li></ol>'},{text:'<ul><ul><li>Promises can be created using the `<code>Promise</code>` constructor. The constructor takes a function as an argument, commonly referred to as the "executor function".</li></ul></ul>'},{text:"<ul><ul><li>The executor function takes two parameters: `<code>resolve</code>` and `<code>reject</code>`. `<code>resolve</code>` is used to fulfill the promise, and `<code>reject</code>` is used to reject the promise.</li></ul></ul>"},{text:"<ul><ul><li>Inside the executor function, you perform the asynchronous operation, and once it's complete, you call `<code>resolve</code>` with the result or `<code>reject</code>` with an error.</li></ul></ul>"},{text:"<ul><ul>Here's an example of creating a promise:</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_1",exampleid:"js_7_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Promise Chaining</strong></li></ol>'},{text:"<ul><ul><li>Promises can be chained together using the `<code>then()</code>` method, which allows you to specify what should happen after the promise is fulfilled.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>then()</code>` method takes a callback function as an argument, which will be executed with the resolved value of the promise.</li></ul></ul>"},{text:"<ul><ul><li>Promise chaining allows you to perform sequential operations or transformations on the result of the previous promise.</li></ul></ul>"},{text:"<ul><ul>Here's an example of promise chaining:</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_3_2",exampleid:"js_7_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Handling Promise Rejections</strong></li></ol>'},{text:"<ul><ul><li>Promise rejections can be handled using the `<code>catch()</code>` method, which takes a callback function that will be executed when the promise is rejected.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>catch()</code>` method allows you to handle any errors that occur during the asynchronous operation or in any of the preceding `<code>then()</code>` callbacks.</li></ul></ul>"},{text:"<ul><ul><li>It's generally recommended to have a `<code>catch()</code>` at the end of the promise chain to handle any unhandled rejections. Refer to two examples above.</li></ul></ul>"},{text:"Promises provide a more organized and readable way to handle asynchronous operations and their results. They allow you to chain operations, handle errors, and ensure the flow of execution is maintained. Promises have become a standard part of JavaScript, and many modern APIs and libraries use promises for handling asynchronous tasks."}]},{secid:4,subtitle:"Async/Await",paragraphs:[{text:"Async/await is a syntax introduced in newer versions of JavaScript (ES2017) that provides a more concise and synchronous-like way to write asynchronous code. It is built on top of promises and offers a simpler and more readable approach to handle asynchronous operations. Here's an overview of async/await:"},{text:"<ol><li><strong>Async Function</strong></li></ol>"},{text:"<ul><ul><li>An async function is a special type of function that allows you to use the `<code>await</code>` keyword inside it.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>async</code>` keyword is used to define a function as asynchronous. It can be used in function declarations or function expressions.</li></ul></ul>"},{text:"<ul><ul><li>An async function always returns a promise, and the value returned by the function is wrapped in a resolved promise or any error thrown is wrapped in a rejected promise.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Await Keyword</strong></li></ol>'},{text:"<ul><ul><li>The `<code>await</code>` keyword can only be used inside an async function.</li></ul></ul>"},{text:"<ul><ul><li>It pauses the execution of the async function until the promise is resolved or rejected.</li></ul></ul>"},{text:"<ul><ul><li>When `<code>await</code>` is used on a promise, it waits for the promise to settle and returns the resolved value.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Writing Async Functions</strong></li></ol>'},{text:"<ul><ul><li>Async functions can contain multiple await expressions, allowing you to `<code>wait</code>` for promises to resolve in a sequential manner.</li></ul></ul>"},{text:"<ul><ul><li>The execution of the async function is paused at each `<code>await</code>` expression, allowing other code to run in the meantime.</li></ul></ul>"},{text:"<ul><ul><li>Here's an example of an async function using `<code>await</code>`:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_7_4_1",exampleid:"js_7_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Error Handling</strong></li></ol>'},{text:"<ul><ul><li>If an error occurs during the execution of the `<code>await</code>` expression, the error can be caught by `<code>catch</code>` method.</li></ul></ul>"},{text:"<ul><ul><li>You can handle the error gracefully, log it, or take appropriate actions.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_7_4_2",exampleid:"js_7_4_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"",codeid:"create sample code"},{text:"Async/await offers a more intuitive and synchronous-like way to write asynchronous code, making it easier to read, write, and reason about. It simplifies error handling and allows for sequential execution of asynchronous operations. However, it's important to note that async/await can only be used within async functions and requires promises to be present for it to work. It has become a widely adopted pattern in modern JavaScript development and is commonly used in conjunction with promises or libraries and frameworks that use promises as their underlying mechanism for handling asynchronous tasks."}]},{secid:5,subtitle:"Event-Driven Programming",paragraphs:[{text:"JavaScript is a language well-suited for event-driven programming. Event-driven programming is a paradigm where the flow of a program is primarily determined by events, such as user actions, system events, or messages from other parts of the program. Instead of following a linear sequence of execution, event-driven programs react to these events by executing specific event handlers or callbacks."},{text:"In the context of web development, event-driven programming is especially prominent due to the nature of the browser environment, where user interactions (clicks, keypresses, etc.) trigger events that developers can listen to and respond to accordingly."},{text:"Here's an overview of how event-driven programming works in JavaScript:"},{text:"<ol><li><strong>Event Listeners</strong></li></ol>"},{text:'<ul><ul><li>In event-driven programming, you attach event listeners to specific elements or objects that are likely to generate events. These event listeners "listen" for events to occur. When the event is triggered, the associated callback function, also known as an event handler, is executed.</li></ul></ul>'},{text:'<ol start="2"><li><strong>Event Handling</strong></li></ol>'},{text:"<ul><ul><li>The event handler is a function that contains the logic to be executed when the event occurs. It could be anything from updating the user interface, processing data, making an AJAX request, or changing the application's state.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Asynchronous Execution</strong></li></ol>'},{text:"<ul><ul><li>Event-driven programming is inherently asynchronous. When you register an event listener, the program continues executing without waiting for the event to occur. Once the event happens, the event handler is invoked asynchronously, allowing the rest of the program to continue its normal flow.</li></ul></ul>"},{text:"<ul><ul>Here's an example of event-driven programming in JavaScript:</ul></ul>"},{text:"",codeConfig:{codeid:"js_7_5_1",exampleid:"js_7_5_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"JavaScript's event-driven nature allows for interactive and responsive web applications. It is widely used in various contexts, including web development, desktop applications, and server-side programming with Node.js. Event-driven architecture plays a crucial role in enabling non-blocking behavior and efficient resource utilization, making it a fundamental concept in modern programming paradigms."}]}]},{category:"js",chid:8,title:"Browser Object Model (BOM)",sections:[{secid:1,subtitle:"Window Object",paragraphs:[{text:"The JavaScript `<code>window</code>` object is a global object representing the browser window that contains the DOM document. It acts as the root level of the Browser Object Model (BOM) and provides functionalities beyond the document content, such as methods to control the browser window and variables that give information about the environment."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong>`<code>document</code>`</strong></li></ul></ul>"},{text:"<ul><ul>This property refers to the Document Object Model (DOM) of the page, allowing access to the content of the page and various methods to manipulate it.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_1",exampleid:"js_8_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>innerWidth</code>` and `<code>innerHeight</code>`</strong></li></ul></ul>"},{text:"<ul><ul>These properties return the width and height of the window's layout viewport, excluding any scrollbars.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_2",exampleid:"js_8_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>frames</code>`</strong></li></ul></ul>"},{text:"<ul><ul>An array-like object representing all the `<code>&lt;iframe&gt;</code>` elements in the current window.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_3",exampleid:"js_8_1_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Key Methods </strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>open()</code>` and `<code>close()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>`<code>open()</code>` opens a new browser window or tab.</ul></ul>"},{text:"<ul><ul>`<code>close()</code>` closes the current window. This method is only allowed to close windows that were opened by JavaScript using the open method.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_4",exampleid:"js_8_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>scrollTo()</code>`, `<code>scrollBy()</code>`, and `<code>scroll()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>These methods control the scrolling of the window.</ul></ul>"},{text:"<ul><ul>`<code>scrollTo()</code>` scrolls to a particular set of coordinates in the document. It's used to jump to a specific position either in the entire window or within a scrollable element.</ul></ul>"},{text:"<ul><ul>`<code>scrollBy()</code>` scrolls the document in the window or a particular element by the specified number of pixels. It's used for scrolling relative to the current position.</ul></ul>"},{text:"<ul><ul>`<code>scroll()</code>` is an alias for `<code>scrollTo()</code>`. It performs the same function as `<code>scrollTo()</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_5",exampleid:"js_8_1_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>alert()</code>`, `<code>prompt()</code>`, and `<code>confirm()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript provides these types of dialog boxes that can be used for interaction with users.</ul></ul>"},{text:"<ul><ul>`<code>alert()</code>` displays an alert dialog with a specified message and an OK button. It's primarily used to inform users.</ul></ul>"},{text:"<ul><ul>`<code>prompt()</code>` displays a modal dialog with a specified message, along with OK and Cancel buttons. It's used to confirm a user's decision.</ul></ul>"},{text:"<ul><ul>`<code>confirm()</code>` displays a dialog box that prompts the user for input. It provides a text box for the user's response.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_6",exampleid:"js_8_1_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>setTimeout()</code>` and `<code>setInterval()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>These are two fundamental timing functions in JavaScript, They are used to schedule the execution of code at a later time.</ul></ul>"},{text:"<ul><ul>`<code>setTimeout()</code>` executes a function or specified piece of code once after a defined delay.</ul></ul>"},{text:"<ul><ul>`<code>clearTimeout()</code>` is used to cancel a timeout set with `<code>setTimeout()</code>`.</ul></ul>"},{text:"<ul><ul>`<code>setInterval()</code>` executes a function or specified piece of code repeatedly at set intervals.</ul></ul>"},{text:"<ul><ul>`<code>clearInterval()</code>` is used to cancel a timer set with `<code>setInterval()</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_7",exampleid:"js_8_1_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Global Variables and Functions</strong></li></ul></ul>"},{text:"<ul><ul>Any global variable or function is automatically a property of the `<code>window</code>` object.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_8",exampleid:"js_8_1_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Fundamental Timing</strong></li></ul></ul>"},{text:"<ul><ul>in JavaScript, `<code>setTimeout()</code>` and `<code>setInterval()</code>` of the `<code>window</code>` object are used to schedule the execution of code at a later time - either once after a delay, or repeatedly at regular intervals.</ul></ul>"},{text:"<ul><ul><li><strong>Dialogs</strong></li></ul></ul>"},{text:"<ul><ul>JavaScript provides several types of dialogs that can be used for interaction with users. These are part of the window object and can be used to display alerts, confirm actions, or prompt for input by calling `<code>alert()</code>, `<code>confirm()</code>`, and `<code>prompt()</code>`.</ul></ul>"},{text:"<ul><ul><li><strong>Handling Browser Resize Events</strong></li></ul></ul>"},{text:"<ul><ul>Detect changes in the browser window size, useful for responsive designs and dynamic layouts.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_1_9",exampleid:"js_8_1_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"The `<code>window</code>` object provides a wide array of functionalities to interact with the browser window and is fundamental in web development. Understanding its properties and methods is essential for manipulating the web environment and enhancing user interaction."}]},{secid:2,subtitle:"Screen Object",paragraphs:[{text:"The `<code>screen</code>` object provides information about the user's screen, such as its resolution, color depth, and available space. This object is particularly useful for understanding the display characteristics of the user's device and can be used to enhance the user experience by tailoring the layout and content accordingly. Here are some key properties the `<code>screen</code>` object:"},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong>`<code>screen.width</code>` and `<code>screen.height</code>`</strong></li></ul></ul>"},{text:"<ul><ul>These properties return the width and height of the user's screen in pixels.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_1",exampleid:"js_8_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>screen.availWidth</code>` and `<code>screen.availHeight</code>`</strong></li></ul></ul>"},{text:"<ul><ul>These provide the width and height of the screen's available space in pixels, excluding interfaces like the Windows Taskbar or the Mac Dock.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_2",exampleid:"js_8_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>screen.colorDepth</code>`</strong></li></ul></ul>"},{text:"<ul><ul>This returns the number of bits used to display one color. Higher color depth means the screen can display more colors.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_3",exampleid:"js_8_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>screen.pixelDepth</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Similar to colorDepth, this property returns the color resolution (in bits per pixel) of the screen.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_4",exampleid:"js_8_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Tailoring Content to Screen Size</strong></li></ul></ul>"},{text:"<ul><ul>A website can use `<code>screen.width</code>` and `<code>screen.height</code>` to determine if it's being viewed on a mobile device or a desktop, and adjust its content accordingly.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_5",exampleid:"js_8_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Optimizing Graphics for Color Depth</strong></li></ul></ul>"},{text:"<ul><ul>A graphic-intensive application or game might check `<code>screen.colorDepth</code>` to decide whether to use high-quality images or simpler graphics.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_6",exampleid:"js_8_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Screen Availability for New Windows</strong></li></ul></ul>"},{text:"<ul><ul>When opening a new window, `<code>screen.availWidth</code>` and `<code>screen.availHeight</code>` can be used to position it optimally without overlapping system interfaces.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_2_7",exampleid:"js_8_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, the `<code>screen</code>` object is a valuable tool in JavaScript for tailoring user experiences based on the physical characteristics of the user's display device. However, its usage should be balanced with considerations for privacy, browser compatibility, and dynamic screen environments."}]},{secid:3,subtitle:"Location Object",paragraphs:[{text:"The `<code>location</code>` object represents the current URL of the webpage being displayed in that window. It offers various properties and methods that allow you to analyze and manipulate the browser's URL. Understanding and using the location object is crucial for tasks such as page redirection, URL parsing, and retrieving query string parameters."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong>`<code>href</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The entire URL. If you change this property, the browser will load the new URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_1",exampleid:"js_8_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>protocol</code>`</strong></li></ul></ul>"},{text:"<ul><ul> The protocol scheme of the URL (e.g., `<code>http:</code>`, `<code>https:</code>`).</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_2",exampleid:"js_8_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>host</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The hostname and port of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_3",exampleid:"js_8_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>hostname</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The domain of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_4",exampleid:"js_8_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>port</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The port number of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_5",exampleid:"js_8_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>pathname</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The path or segment of the URL.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_6",exampleid:"js_8_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>search</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The query string part of the URL, starting with the question mark.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_7",exampleid:"js_8_3_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>hash</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The anchor part of the URL, including the hash symbol (`<code>#</code>`).</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_8",exampleid:"js_8_3_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Key Methods</strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>reload()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Reloads the current page.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>replace(url)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Replaces the current URL with the new one. Unlike setting `<code>href</code>`, `<code>replace(url)</code>` does not create a new record in the browser history.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_10",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>assign(url)</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Loads the new webpage at the provided URL. It's similar to setting `<code>href<?code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_11",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Redirecting to a Different Webpage</strong></li></ul></ul>"},{text:"<ul><ul>Redirect the user to another page by setting `<code>location.href</code>` and `<code>location.assign(url)</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_12",exampleid:"js_8_3_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Reloading the Page</strong></li></ul></ul>"},{text:"<ul><ul>Reload the current page by using `<code>location.reload()</code>`.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_13",exampleid:"js_8_3_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Getting URL Components</strong></li></ul></ul>"},{text:"<ul><ul>Analyze different parts of the URL for routing logic, authentication, etc.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_14",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>Working with Query Strings</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Parse query strings for parameters by using `<code>location.search</code>` and `<code>URLSearchParams</code>` constructor.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_15",exampleid:"js_8_3_15_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Handling Hash Changes</strong></li></ul></ul>"},{text:"<ul><ul>React to changes in the hash for single-page applications or anchor navigation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_3_16",exampleid:"js_8_3_16_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",hideExample:!1,marginLeft:"5rem"}},{text:"In summary, the `<code>location</code>` object is a powerful and essential part of JavaScript, used for navigating and retrieving information about the current browser URL. Its proper use enables effective control over the user's browsing experience."}]},{secid:4,subtitle:"History Object",paragraphs:[{text:"The `<code>history</code>` object is used to interact with the browser's session history, which is the list of pages visited in the tab or frame in which the current page is loaded. This object enables manipulation of the browser's history in terms of navigation and tracking the number of pages in the history stack. It's important to note that for security and privacy reasons, the history object does not provide direct access to the URLs in the history."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong>`<code>length</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Returns the number of pages in the session history, including the currently loaded page.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_1",exampleid:"js_8_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Key Methods</strong></li></ol>'},{text:"<ul><ul><li><strong>`<code>back()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Loads the previous URL in the history list. Equivalent to clicking the back button in the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_2",exampleid:"js_8_4_2_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>forward()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Loads the next URL in the history list, if there is one. Equivalent to clicking the forward button in the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_3",exampleid:"js_8_4_3_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>go()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Loads a specific URL from the session history. You can pass a positive or negative integer as a parameter, which indicates how many steps forward or backward to move in the history.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_4",exampleid:"js_8_4_4_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>pushState()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Adds an entry to the history stack, changing the current URL being viewed without reloading the page. Useful for single-page applications.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_5",exampleid:"js_8_4_5_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>replaceState()</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Similar to `<code>pushState()</code>`, but modifies the current history entry instead of creating a new one.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_6",exampleid:"js_8_4_6_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Navigation in Single-Page Applications (SPAs)</strong></li></ul></ul>"},{text:"<ul><ul>SPAs can use `<code>pushState()</code>` and `<code>replaceState()</code>` to change the URL without reloading the page, enabling bookmarkable URLs and browser navigation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_7",exampleid:"js_8_4_7_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Handling Back Button</strong></li></ul></ul>"},{text:"<ul><ul>Use `<code>history.pushState()</code>` to add history entries, and listen for the `<code>popstate</code>` event to handle back button navigation.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_8",exampleid:"js_8_4_8_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Redirecting to a Different Webpage Without Adding to History</strong></li></ul></ul>"},{text:"<ul><ul>`<code>replaceState()</code>` can be used to redirect the user to a new URL without adding an entry to the history stack.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_4_9",exampleid:"js_8_4_9_1",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, the `<code>history</code>` object provides powerful capabilities for managing the browser's session history, crucial for creating dynamic, user-friendly web applications. However, it should be used responsibly to ensure a coherent and intuitive user navigation experience."}]},{secid:5,subtitle:"Navigator Object",paragraphs:[{text:"The JavaScript `<code>navigator</code>` object provides information about the browser and the environment in which it's running. This object is used for obtaining information about the user's browser, such as the name, version, language, and other details related to the operating system and platform. It's important to note that the `<code>navigator</code>` object is read-only."},{text:"<ol><li><strong>Key Properties</strong></li></ol>"},{text:"<ul><ul><li><strong>`<code>appName</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The name of the browser application. However, this is largely deprecated and unreliable for modern browser detection.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_1",exampleid:"js_8_5_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>appVersion</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Information about the version of the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_2",exampleid:"js_8_5_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>userAgent</code>`</strong></li></ul></ul>"},{text:"<ul><ul>A string representing the user agent information for the browser, including details about the name, version, and operating system.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_3",exampleid:"js_8_5_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>platform</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The platform on which the browser is running (e.g., 'Win32', 'Linux', 'MacIntel').</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_4",exampleid:"js_8_5_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>language</code>`</strong></li></ul></ul>"},{text:"<ul><ul>The current language of the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_5",exampleid:"js_8_5_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>languages</code>`</strong></li></ul></ul>"},{text:"<ul><ul>An array of the user's preferred languages.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_6",exampleid:"js_8_5_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>onLine</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Indicates whether the browser is online.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_7",exampleid:"js_8_5_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>cookieEnabled</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Indicates whether cookies are enabled in the browser.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_8",exampleid:"js_8_5_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>`<code>geolocation</code>`</strong></li></ul></ul>"},{text:"<ul><ul>Provides access to geographical location information.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_9",exampleid:"js_8_5_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Use Cases</strong></li></ol>'},{text:"<ul><ul><li><strong>Detecting Browser Online Status</strong></li></ul></ul>"},{text:"<ul><ul>You can check if the browser is currently online or offline.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_10",exampleid:"js_8_5_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Getting User's Preferred Languages</strong></li></ul></ul>"},{text:"<ul><ul>Useful for loading content in the user's preferred language.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_11",exampleid:"js_8_5_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Determining Mobile/Desktop Environment</strong></li></ul></ul>"},{text:"<ul><ul>While not foolproof, checking the `<code>platform</code>` or `<code>userAgent</code>` can give you an idea if the user is on a mobile device or a desktop.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_12",exampleid:"js_8_5_12_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Accessing Geolocation Data</strong></li></ul></ul>"},{text:"<ul><ul>With the user's permission, you can get their geographical location.</ul></ul>"},{text:"",codeConfig:{codeid:"js_8_5_13",exampleid:"js_8_5_13_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",hideExample:!0,marginLeft:"5rem"}},{text:"In summary, the `<code>navigator</code>` object offers a way to glean information about the user's browser and operating system, which can be useful for adapting your web application to different environments or user preferences. However, it should be used judiciously and with consideration for user privacy and the variability of the data it provides."}]}]},{category:"js",chid:9,title:"Document Object Model (DOM)",sections:[{secid:1,subtitle:"Understanding the DOM",paragraphs:[{text:"The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree-like structure, where each node in the tree represents a part of the document. The DOM provides methods and properties to interact with and manipulate the document's content, structure, and styling. Understanding the DOM is essential for web development using JavaScript. Here are some key points about the DOM:"},{text:"<ol><li><strong>Tree Structure</strong></li></ol>"},{text:"<ul><ul><li>The DOM represents an HTML or XML document as a hierarchical tree structure.</li></ul></ul>"},{text:"<ul><ul><li>The top-level node in the tree is called the document node, which represents the entire document.</li></ul></ul>"},{text:"<ul><ul><li>Other nodes represent elements, text, comments, attributes, and more.</li></ul></ul>"},{text:"<ul><ul><li>Elements are represented as element nodes, and they can have child nodes, such as text nodes or other element nodes.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Document Object</strong></li></ol>'},{text:"<ul><ul><li>The `<code>document</code>` object represents the entire HTML document.</li></ul></ul>"},{text:"<ul><ul><li>It provides properties and methods to access and manipulate various aspects of the document, such as elements, attributes, styles, and events.</li></ul></ul>"},{text:"<ul><ul><li>Common properties and methods of the `<code>document</code>` object include `<code>getElementById()</code>`, `<code>querySelector()</code>`, `<code>createElement()</code>`, `<code>appendChild()</code>`, `<code>removeChild()</code>`, and many more.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Node Objects</strong></li></ol>'},{text:"<ul><ul><li>Each part of an HTML or XML document is represented by a node object in the DOM.</li></ul></ul>"},{text:"<ul><ul><li>Common node types include element nodes, text nodes, comment nodes, and attribute nodes.</li></ul></ul>"},{text:"<ul><ul><li>Node objects have properties and methods to access and manipulate their content, attributes, and relationships with other nodes.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Selecting Elements</strong></li></ol>'},{text:"<ul><ul><li>You can select elements in the DOM using various methods, such as `<code>getElementById()</code>`, `<code>getElementsByClassName()</code>`, `<code>getElementsByTagName()</code>`, and `<code>querySelector()</code>`.</li></ul></ul>"},{text:"<ul><ul><li>These methods allow you to retrieve specific elements based on their IDs, classes, tags, or CSS selectors.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Manipulating Elements</strong></li></ol>'},{text:"<ul><ul><li>Once you have selected an element, you can manipulate it by accessing its properties and methods.</li></ul></ul>"},{text:"<ul><ul><li>You can modify an element's content, attributes, and styles, as well as add or remove elements and apply event handlers.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Event Handling</strong></li></ol>'},{text:"<ul><ul><li>The DOM provides mechanisms for handling events, such as clicks, mouse movements, and keyboard interactions.</li></ul></ul>"},{text:"<ul><ul><li>You can register event handlers on elements to respond to specific events.</li></ul></ul>"},{text:"<ul><ul><li>Event handling methods include `<code>addEventListener()</code>`, `<code>removeEventListener()</code>`, and properties like `<code>onclick</code>`, `<code>onload</code>`, and more.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Dynamic Updates</strong></li></ol>'},{text:"<ul><ul><li>One of the key advantages of the DOM is its ability to dynamically update the web page without reloading.</li></ul></ul>"},{text:"<ul><ul><li>You can create, modify, or remove elements and their content based on user interactions or other events.</li></ul></ul>"},{text:"<ul><ul><li>This enables dynamic and interactive web applications.</li></ul></ul>"},{text:"Understanding the DOM allows you to manipulate web pages dynamically and create interactive user experiences. By accessing and modifying the structure and content of the DOM, you can update web pages in response to user actions, modify styles, handle events, and more. JavaScript is commonly used to interact with the DOM, making it an essential aspect of web development."}]},{secid:2,subtitle:"Accessing and Manipulating DOM Elements",paragraphs:[{text:"Accessing and manipulating DOM elements is a fundamental part of web development using JavaScript. The Document Object Model (DOM) provides various methods and properties to interact with elements in the HTML document. Here's an overview of how to access and manipulate DOM elements:"},{text:"<ol><li><strong>Accessing Elements</strong></li></ol>"},{text:"<ul><ul><li>By ID: Use the `<code>getElementById()</code>` method to select an element based on its unique ID attribute.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_1",exampleid:"js_9_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>By Class: Use the `<code>getElementsByClassName()</code>` method to select elements based on their class names. It returns a collection of elements.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_2",exampleid:"js_9_2_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>By Tag Name: Use the `<code>getElementsByTagName()</code>` method to select elements based on their tag names. It also returns a collection of elements.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_3",exampleid:"js_9_2_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>By CSS Selector: Use the `<code>querySelector()</code>` or `<code>querySelectorAll()</code>` method to select elements using CSS selectors. `<code>querySelector()</code>` returns the first matching element, while `<code>querySelectorAll()</code>` returns a collection of all matching elements.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_4",exampleid:"js_9_2_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Manipulating Elements</strong></li></ol>'},{text:"<ul><ul><li>Changing Content: You can modify the content of an element using the `<code>innerHTML</code>` property or the `<code>textContent</code>` property.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_5",exampleid:"js_9_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Modifying Attributes: Use the `<code>getAttribute()</code>` and `<code>setAttribute()</code>` methods to get and set attribute values of an element.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_6",exampleid:"js_9_2_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Changing Styles: Use the `<code>style</code>` property to modify the CSS styles of an element.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_7",exampleid:"js_9_2_7_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Adding and Removing Classes: Use the `<code>classList</code>` property to add or remove CSS classes from an element.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_8",exampleid:"js_9_2_8_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Creating Elements: Use the `<code>createElement()</code>` method to create a new element, and `<code>createTextNode()</code>` to create a text node.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_9",exampleid:"js_9_2_9_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Appending and Removing Elements: Use the `<code>appendChild()</code>` method to append an element as a child of another element. Use the `<code>removeChild()</code>` method to remove an element.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_2_10",exampleid:"js_9_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"These are just some of the basic techniques for accessing and manipulating DOM elements. The DOM provides many more methods and properties that allow you to traverse the document, handle events, modify styles, and interact with elements in various ways. By leveraging the DOM API, you can create dynamic and interactive web applications."}]},{secid:3,subtitle:"Handling Events",paragraphs:[{text:"Handling events is a crucial aspect of web development that allows you to respond to user interactions or other occurrences on a web page. JavaScript provides various methods and techniques to handle events effectively. Here's an overview of how to handle events in JavaScript:"},{text:"<ol><li><strong>Event Listeners</strong></li></ol>"},{text:"<ul><ul><li>An event listener is a function that is executed when a specific event occurs on an element.</li></ul></ul>"},{text:"<ul><ul><li>You can attach an event listener to an element using the `<code>addEventListener()</code>` method.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Event Handler Function</strong></li></ol>'},{text:"<ul><ul><li>An event handler function is the function that gets executed when an event occurs.</li></ul></ul>"},{text:"<ul><ul><li>It receives an `<code>event</code>` object as a parameter, which provides information about the event and its target element.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_2",exampleid:"js_9_3_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Common Event Types</strong></li></ul>'},{text:"<ul><ul><li>Mouse Events: `<code>click</code>`, `<code>mouseover</code>`, `<code>mouseout</code>`, `<code>mousemove</code>`, `<code>mousedown</code>`, `<code>mouseup</code>`, etc.</li></ul></ul>"},{text:"<ul><ul><li>Keyboard Events: `<code>keydown</code>`, `<code>keyup</code>`, `<code>keypress</code>`.</li></ul></ul>"},{text:"<ul><ul><li>Form Events: `<code>submit</code>`, `<code>input</code>`, `<code>change</code>`, `<code>focus</code>`, `<code>blur</code>`.</li></ul></ul>"},{text:"<ul><ul><li>Window Events: `<code>load</code>`, `<code>resize</code>`, `<code>scroll</code>`.</li></ul></ul>"},{text:'<ul><ul><li>And many more. Refer to the MDN documentation for a complete list of events: <a href="https://developer.mozilla.org/en-US/docs/Web/Events">https://developer.mozilla.org/en-US/docs/Web/Events</a></li></ul></ul>'},{text:'<ol start="4"><li><strong>Event Bubbling and Event Capturing</strong></li></ul>'},{text:"<ul><ul><li>Events in the DOM follow a bubbling or capturing phase, which determines the order in which event handlers are triggered.</li></ul></ul>"},{text:"<ul><ul><li>By default, events bubble up from the target element to its parent elements. You can use the `<code>event.stopPropagation()</code>` method to stop the event from further propagation.</li></ul></ul>"},{text:"<ul><ul><li>Capturing phase allows you to handle the event on the parent elements before reaching the target element. You can enable capturing by passing a third argument `<code>true</code>` to the `<code>addEventListener()</code>` method.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_3",exampleid:"js_9_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="5"><li><strong>Event Delegation</strong></li></ul>'},{text:"<ul><ul><li>Event delegation is a technique where you attach a single event listener to a parent element to handle events for its child elements.</li></ul></ul>"},{text:"<ul><ul><li>This approach is useful when you have a large number of dynamically created elements or when elements are added/removed dynamically from the DOM.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_4",exampleid:"js_9_3_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="6"><li><strong>Removing Event Listeners</strong></li></ul>'},{text:"<ul><ul><li>To remove an event listener, you can use the `<code>removeEventListener()</code>` method.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_5",exampleid:"js_9_3_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="7"><li><strong>Inline Event Handlers</strong></li></ul>'},{text:"<ul><ul><li>Alternatively, you can use inline event handlers directly in HTML tags, but this approach is generally considered less maintainable and less flexible.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_9_3_6",exampleid:"js_9_3_6_1",codeOutput:!1,exampleOutput:!0,codeTitle:"HTML",exampleTitle:"Example",codeLangs:"xml",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Event handling allows you to respond to user interactions, validate user input, trigger actions based on specific events, and create interactive web applications. By attaching event listeners to elements and writing appropriate event handler functions, you can control the behavior and functionality of your web page."}]},{secid:4,subtitle:"Dynamic HTML with JavaScript",paragraphs:[{text:"Dynamic HTML refers to the ability to create, modify, and update the content and structure of a web page dynamically using JavaScript. It allows you to change elements, update styles, manipulate data, and respond to user interactions in real-time. Here are some key techniques for working with dynamic HTML using JavaScript:"},{text:"<ol><li><strong>Maniplating Elements</strong></li></ol>"},{text:"<ul><ul><li>Use the `<code>createElement()</code>` method to create new HTML elements programmatically.</li></ul></ul>"},{text:"<ul><ul><li>To modify the content of an element, you can use the `<code>innerHTML</code>` property or the `<code>textContent</code>` property.</li></ul></ul>"},{text:"<ul><ul><li>Use the `<code>getAttribute()</code>` and `<code>setAttribute()</code>` methods to get and set attribute values of an element.</li></ul></ul>"},{text:"<ul><ul><li>To add a newly created element as a child of another element, use the `<code>appendChild()</code>` method.</li></ul></ul>"},{text:"<ul><ul><li>Use the `<code>removeChild()</code>` method to remove an element from its parent.</li></ul></ul>"},{text:"<ul><ul><li>Use the `<code>style</code>` property to modify the CSS styles of an element.</li></ul></ul>"},{text:"<ul><ul><li>Attach event listeners to elements using the `<code>addEventListener()</code>` method to respond to user interactions.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Dynamic Data</strong></li></ol>'},{text:"<ul><ul><li>JavaScript allows you to fetch data from external sources, such as APIs, and update the content of your web page dynamically.</li></ul></ul>"},{text:"<ul><ul><li>You can use AJAX or fetch API to make asynchronous HTTP requests and retrieve data.</li></ul></ul>"},{text:"<ul><ul><li>Once the data is retrieved, you can modify the DOM to display the data in the desired format.</li></ul></ul>"},{text:"<ul><ul>Here is an example:</ul></ul>"},{text:"",codeConfig:{codeid:"js_9_4_1",exampleid:"js_9_4_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Template Engines</strong></li></ol>'},{text:"<ul><ul><li>Template engines like Handlebars, Mustache, or Underscore.js can be used to generate dynamic HTML by combining data and templates.</li></ul></ul>"},{text:"<ul><ul><li>These engines provide syntax and functionality to create reusable templates with placeholders that get replaced with actual data at runtime.</li></ul></ul>"},{text:"By utilizing these techniques, you can create dynamic and interactive web applications that can update content, respond to user actions, fetch and display data dynamically, and provide a more engaging user experience. JavaScript's ability to manipulate the HTML DOM empowers you to build dynamic web pages that adapt and respond to changing requirements and user interactions."}]}]},{category:"js",chid:10,title:"Browser APIs",sections:[{secid:1,subtitle:"Working with Browser APIs",paragraphs:[{text:"Working with browser APIs allows you to access various features and functionalities provided by the web browser. Here are some commonly used browser APIs and how to work with them:"},{text:"<ol><li><strong>Geolocation API</strong></li></ol>"},{text:"<ul><ul><li>The Geolocation API allows you to retrieve the user's current geographical location.</li></ul></ul>"},{text:"<ul><ul><li>To use this API, you can call the `<code>navigator.geolocation.getCurrentPosition()</code>` method, which takes a success callback and an error callback as arguments.</li></ul></ul>"},{text:"<ul><ul><li>The success callback is invoked with a `<code>Position</code>` object containing the user's coordinates.<br/><br/>Here's an example of using the Geolocation API:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_1",exampleid:"js_10_1_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Browser Storage API</strong></li></ol>'},{text:"<ul><ul><li>The Browser Storage API provides a way to store key-value pairs locally in the browser.</li></ul></ul>"},{text:"<ul><ul><li>There are two types of browser storage available: `<code>localStorage</code>` and `<code>sessionStorage</code>`.</li></ul></ul>"},{text:"<ul><ul><li>`<code>localStorage</code>` allows you to store data persistently across browser sessions, while `<code>sessionStorage</code>` stores data for the duration of the session.</li></ul></ul>"},{text:"<ul><ul><li>You can use the `<code>setItem()</code>`, `<code>getItem()</code>`, and `<code>removeItem()</code>` methods to interact with browser storage.<br/><br/>Here's an example of using `<code>localStorage</code>`:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_2",exampleid:"js_10_1_2_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Browser Clipboard API</strong></li></ol>'},{text:"<ul><ul><li>The Browser Clipboard API allows web applications to interact with the user's clipboard, enabling copying, cutting, and pasting content programmatically. This API provides methods and events to read data from the clipboard as well as to write data to it.</li></ul></ul>"},{text:"<ul><ul><li>Please note that clipboard access may have certain security and privacy implications, and browsers may have specific permissions or restrictions to ensure a safe user experience. Therefore, clipboard-related operations are generally only allowed in response to user interactions, such as clicks or keypresses.</li></ul></ul>"},{text:"<ul><ul><li>Copying Text to Clipboard: To copy text to the clipboard, you can use the `<code>navigator.clipboard.writeText()</code>` method. This method returns a Promise that resolves when the text is successfully copied to the clipboard.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li>Reading Text from Clipboard: To read text from the clipboard, you can use the `<code>navigator.clipboard.readText()</code>` method. This method returns a Promise that resolves with the text read from the clipboard. After copying, you can also use `<code>CTR+C</code>` in Windows or use `<code>CMD+C</code>` to pasts clipboard content to other applications.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_1_4",exampleid:"js_10_1_4_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"Here are just a few examples of browser APIs, but there are many more available, such as the Fetch API for making HTTP requests, the Canvas API for drawing graphics, the Audio and Video APIs for working with multimedia, and many others. Each API has its own set of methods and properties, so it's important to refer to the specific documentation for each API to understand how to use them effectively in your applications."}]},{secid:2,subtitle:"Making HTTP Requests with AJAX",paragraphs:[{text:"AJAX (Asynchronous JavaScript and XML) is a technique used in web development to send and receive data from a server asynchronously without reloading the entire web page. It allows for dynamic and interactive web applications by enabling the retrieval and updating of data in the background. Here's an introduction to AJAX:"},{text:"<ol><li><strong>Asynchronous Requests</strong></li></pl>"},{text:"<ul><ul><li>AJAX enables making asynchronous requests to a server, which means that the browser can send a request to the server and continue working with other parts of the web page without waiting for a response.</li></ul></ul>"},{text:"<ul><ul><li>This allows for a smoother user experience as the web page remains responsive while data is being fetched or updated.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Creating and Using XMLHttpRequest Objects</strong></li></ol>'},{text:"<ul><ul><li><strong>Creating an instance</strong>: To create a new `<code>XMLHttpRequest</code>` object, you can use the `<code>new XMLHttpRequest()</code>` constructor.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_1",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Configuring the request</strong>: After creating the object, you configure the request by specifying the HTTP method, URL, and other optional parameters.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Setting Headers (Optional)</strong>: If your request requires custom headers, you can set them using the `<code>setRequestHeader</code>` method.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_3_3",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Handling the Response</strong>: You need to set up a function to handle the response when the server responds. This function is assigned to the `<code>onreadystatechange</code>` event, and it will be called whenever the `<code>readyState</code>` of the request changes.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_4",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Sending the Request</strong>: After setting up the request and response handling, you send the request to the server.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_5",exampleid:"js_10_2_5_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Handling Errors</strong></li></ol>'},{text:"<ul><ul><li><strong>Creation and Initialization</strong>: When creating a new `<code>XMLHttpRequest</code>` object, it's essential to handle any potential errors during initialization. The initialization can fail due to security restrictions or if the browser does not support the `<code>XMLHttpRequest</code>` object. To handle this, you can use a `<code>try-catch</code>` block when creating the `<code>XMLHttpRequest</code>` instance.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_6",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Network Errors</strong>: During the request's execution, various network-related errors can occur, such as the server being unreachable, a timeout, or a failed connection. You can listen for the `<code>onerror</code>` event to catch these types of errors.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_7",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>HTTP Errors</strong>: After the request is sent and the server responds, there might be HTTP errors like 404 Not Found or 500 Internal Server Error. These errors are considered successful requests but unsuccessful responses. You can handle these errors by checking the status code of the response.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_8",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul><li><strong>Timeout Handling</strong>: To avoid infinite waiting for a response, you can set a timeout for the request. If the timeout is exceeded, you can handle it as an error.<br/><br/>Example:</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_9",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"<ul><ul>Here is a complete example of error handling:</ul></ul>"},{text:"",codeConfig:{codeid:"",exampleid:"js_10_2_10_1",codeOutput:!1,exampleOutput:!0,codeTitle:"",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="4"><li><strong>Updating Web Page Content</strong></li></pl>'},{text:"<ul><ul><li>AJAX enables you to update specific parts of a web page without reloading the entire page.</li></ul></ul>"},{text:"<ul><ul><li>You can use JavaScript to manipulate the DOM and update the content based on the received data.</li></ul></ul>"},{text:"<ul><ul><li>This allows for dynamic and interactive user interfaces, such as updating a list of items, live search suggestions, or real-time chat messages.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_2_11",exampleid:"js_10_2_11_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"xml",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"AJAX has revolutionized web development by providing a way to create more interactive and responsive web applications. It allows for data retrieval and updates in the background, reducing the need for full page reloads. The XMLHttpRequest object and Fetch API are commonly used to implement AJAX functionality in JavaScript applications."}]},{secid:3,subtitle:"Making HTTP Requests with the Fetch API",paragraphs:[{text:"The Fetch API is a modern JavaScript API that provides a built-in mechanism for making HTTP requests in the browser. It offers a more flexible and powerful alternative to traditional methods like XMLHttpRequest. Here's an overview of how to make HTTP requests using the Fetch API:"},{text:"<ol><li><strong>Basic Fetch Request</strong></li></ol>"},{text:"<ul><ul><li>To make a simple GET request, you can use the `<code>fetch()</code>` function and pass the URL as an argument.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>fetch()</code>` function returns a promise that resolves to the `<code>Response</code>` object representing the server's response.</li></ul></ul>"},{text:"<ul><ul><li>You can then use the `<code>Response</code>` object to process the response data.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_3_1",exampleid:"js_10_3_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="2"><li><strong>Fetch Request Options</strong></li></ol>'},{text:"<ul><ul><li>The `<code>fetch()</code>` function accepts a second parameter for additional request options, such as the HTTP method, headers, and request body.</li></ul></ul>"},{text:"<ul><ul><li>You can pass an object with these options to customize the request.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_3_2",exampleid:"",codeOutput:!1,exampleOutput:!1,codeTitle:"JS",exampleTitle:"",codeLangs:"ts",exampleLangs:"",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:'<ol start="3"><li><strong>Handling the Response</strong></li></ol>'},{text:"<ul><ul><li>The `<code>Response</code>` object provides several methods to access and process the response data.</li></ul></ul>"},{text:"<ul><ul><li>You can use methods like `<code>json()</code>` to parse the response as JSON, `<code>text()</code>` to get the response as plain text, and `<code>blob()</code>` to retrieve the response as a Blob object.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Handling Errors</strong></li></ol>'},{text:"<ul><ul><li>If the server responds with an error status code (e.g., 404, 500), the `<code>fetch()</code>` promise will still resolve successfully.</li></ul></ul>"},{text:"<ul><ul><li>You can check the `<code>ok</code>` property of the `<code>Response</code>` object to determine if the request was successful.</li></ul></ul>"},{text:"<ul><ul><li>If the request was not successful, you can throw an error or handle it as needed.</li></ul></ul>"},{text:"",codeConfig:{codeid:"js_10_3_3",exampleid:"js_10_3_3_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"The Fetch API provides a powerful and flexible way to make HTTP requests in JavaScript. It supports a variety of request options, handles responses in different formats, and allows for error handling. It is widely supported in modern browsers and is a recommended approach for performing HTTP requests in client-side JavaScript applications."}]}]},{category:"js",chid:11,title:"Debugging and Error Handling",sections:[{secid:1,subtitle:"Debugging Techniques and Tools",paragraphs:[{text:"Debugging is an essential skill in software development, including JavaScript. It involves identifying and resolving issues or bugs in your code. Here are some common debugging techniques and tools that can help you in the process:"},{text:"<ol><li><strong>Console Logging</strong></li></ol>"},{text:"<ul><ul><li>Console logging is a basic but effective debugging technique.</li></ul></ul>"},{text:"<ul><ul><li>Use `<code>console.log()</code>` to output values or messages to the browser's console.</li></ul></ul>"},{text:"<ul><ul><li>You can log variables, function outputs, or any other relevant information to track the flow of your code and identify potential issues.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Debugging with breakpoints</strong></li></ol>'},{text:"<ul><ul><li>Most modern web browsers come with built-in developer tools that include debugging capabilities.</li></ul></ul>"},{text:"<ul><ul><li>You can set breakpoints directly in your code, which pauses the execution when reached, allowing you to inspect variables, step through code, and analyze the program state.</li></ul></ul>"},{text:"<ul><ul><li>By using breakpoints, you can narrow down the problematic sections of your code and understand how it executes.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Step-by-step Execution</strong></li></ol>'},{text:"<ul><ul><li>Debugging tools provide options to step through your code line by line.</li></ul></ul>"},{text:'<ul><ul><li>You can use features like "step over" to move to the next line of code, "step into" to enter a function call and debug its execution, and "step out" to complete the current function and return to its caller.</li></ul></ul>'},{text:"<ul><ul><li>Stepping through the code can help you understand the flow and identify any unexpected behavior or errors.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Inspecting Variables and Objects</strong></li></ol>'},{text:"<ul><ul><li>Debugging tools allow you to inspect the values of variables and objects at any given point during program execution.</li></ul></ul>"},{text:"<ul><ul><li>You can add variables to the watch list to track their values as you step through the code.</li></ul></ul>"},{text:"<ul><ul><li>Inspecting variables can help you identify incorrect values, unexpected changes, or null/undefined values that might be causing issues.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Error Messages and Stack Traces</strong></li></ol>'},{text:"<ul><ul><li>When an error occurs, JavaScript throws an error object with a descriptive message and a stack trace.</li></ul></ul>"},{text:"<ul><ul><li>Pay attention to error messages as they often provide valuable information about the cause of the problem.</li></ul></ul>"},{text:"<ul><ul><li>The stack trace shows the sequence of function calls that led to the error, allowing you to trace back the issue to its origin.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Debugging Tools</strong></li></ol>'},{text:"<ul><ul><li>Modern web browsers, such as Chrome, Firefox, and Safari, provide developer tools that include comprehensive debugging capabilities.</li></ul></ul>"},{text:"<ul><ul><li>These tools offer a range of features, including breakpoints, step-by-step execution, console logging, network monitoring, and DOM inspection.</li></ul></ul>"},{text:"<ul><ul><li>Familiarize yourself with the debugging features available in your preferred browser's developer tools.</li></ul></ul>"},{text:"<ul><ul><li>You can also put the `<code>debugger</code>` statement before the code to be checked. It works as setting a breakpoint and triggers any available debugging functionality. The statement has no effect if debugging functionality is unavailable.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Linting and Code Analysis</strong></li></ol>'},{text:"<ul><ul><li>Utilize linting tools and code analysis tools like ESLint, JSLint, or JSHint.</li></ul></ul>"},{text:"<ul><ul><li>These tools can help identify potential issues in your code, such as syntax errors, unused variables, or code style violations, before even running the code.</li></ul></ul>"},{text:'<ol start="8"><li><strong>Logging and Error Handling</strong></li></ol>'},{text:"<ul><ul><li>Implement proper logging and error handling mechanisms in your code.</li></ul></ul>"},{text:"<ul><ul><li>Use try-catch blocks to catch and handle errors gracefully.</li></ul></ul>"},{text:"<ul><ul><li>Log errors and relevant information to aid in troubleshooting and debugging in production environments.</li></ul></ul>"},{text:"Remember that debugging is a skill that improves with practice. By utilizing these techniques and tools effectively, you can efficiently identify and fix issues in your JavaScript code, leading to more robust and reliable applications."}]},{secid:2,subtitle:"Common JavaScript Errors and How to Handle Them",paragraphs:[{text:"JavaScript code can encounter various errors during execution. Here are some common JavaScript errors and how to handle them:"},{text:"<ol><li><strong>Syntax Errors</strong></li></ol>"},{text:"<ul><ul><li>Syntax errors occur when there is a mistake in the syntax of your code.</li></ul></ul>"},{text:"<ul><ul><li>JavaScript engines will throw a syntax error and halt the execution of the code.</li></ul></ul>"},{text:"<ul><ul><li>To handle syntax errors, carefully review your code for typos, missing brackets, semicolons, or incorrect function parameters.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Reference Errors</strong></li></ol>'},{text:"<ul><ul><li>Reference errors occur when you try to access a variable or function that is not defined.</li></ul></ul>"},{text:"<ul><ul><li>To handle reference errors, ensure that all variables and functions are properly declared and in scope.</li></ul></ul>"},{text:"<ul><ul><li>You can use conditional statements or try-catch blocks to handle cases where certain variables may be undefined or null.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Type Errors</strong></li></ol>'},{text:"<ul><ul><li>Type errors occur when you perform an operation on a value of an incorrect type.</li></ul></ul>"},{text:"<ul><ul><li>Common type errors include trying to call a non-function, accessing a property of an undefined or null value, or using an operator on incompatible types.</li></ul></ul>"},{text:"<ul><ul><li>To handle type errors, check the types of values before performing operations and use conditional statements or try-catch blocks to handle exceptions.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Range Errors</strong></li></ol>'},{text:"<ul><ul><li>Range errors occur when you use an invalid value within an acceptable range.</li></ul></ul>"},{text:"<ul><ul><li>For example, using an invalid index to access an array element or providing an invalid argument to a function.</li></ul></ul>"},{text:"<ul><ul><li>To handle range errors, validate input values and use conditional statements or try-catch blocks to handle out-of-range cases.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Network Errors</strong></li></ol>'},{text:"<ul><ul><li>Network errors occur when there is a problem with network connectivity or when making HTTP requests.</li></ul></ul>"},{text:"<ul><ul><li>These errors can include failed requests, timeouts, or CORS (Cross-Origin Resource Sharing) issues.</li></ul></ul>"},{text:'<ul><ul><li>To handle network errors, please refer to Sections "Making HTTP requests with AJAX" and "Making HTTP requests with the Fetch API" in Chapter 6.</li></ul></ul>'},{text:'<ol start="6"><li><strong>Error Objects</strong></li></ol>'},{text:"<ul><ul><li>JavaScript provides built-in error objects like `<code>Error</code>`, `<code>TypeError</code>`, `<code>ReferenceError</code>`, etc., that can be used to catch and handle specific types of errors.</li></ul></ul>"},{text:"<ul><ul><li>You can use the `<code>try-catch-finally</code>` statement to catch errors and handle them gracefully.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>catch</code>` block can include code to handle the error, log error messages, or display user-friendly error messages.</li></ul></ul>"},{text:"<ul><ul><li>The `<code>finally</code>` block is executed regardless whether an exception is thrown or caught. This block is optional.</li></ul></ul>"},{text:"<ul><ul>Example of handling errors using `<code>try-catch-finally</code>`:</ul></ul>"},{text:"",codeConfig:{codeid:"js_11_2_1",exampleid:"js_11_2_1_1",codeOutput:!1,exampleOutput:!0,codeTitle:"JS",exampleTitle:"Example",codeLangs:"ts",exampleLangs:"xml",codeSource:"",exampleSource:"",marginLeft:"5rem"}},{text:"It's important to handle errors gracefully in your JavaScript code to prevent application crashes and provide a better user experience. Proper error handling includes logging errors for debugging purposes, displaying meaningful error messages to users, and implementing fallback mechanisms when necessary. By understanding and effectively handling common JavaScript errors, you can improve the robustness and reliability of your code."}]}]},{category:"js",chid:12,title:"JavaScript Best Practices",sections:[{secid:1,subtitle:"Code Organization and Modularization",paragraphs:[{text:"Code organization and modularization are crucial for writing maintainable, scalable, and reusable JavaScript applications. They help improve code readability, reduce complexity, and facilitate collaboration among team members. Here are some guidelines for code organization and modularization:"},{text:"<ol><li><strong>File and Directory Structure</strong></li></ol>"},{text:"<ul><ul><li>Start by organizing your code into logical directories and files based on functionality or modules.</li></ul></ul>"},{text:"<ul><ul><li>Separate different concerns, such as UI components, data models, utility functions, or API interactions, into separate files or directories.</li></ul></ul>"},{text:"<ul><ul><li>Consider using a consistent naming convention, such as lowercase filenames or kebab-case, to make it easier to navigate and find files.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Modular JavaScript</strong></li></ol>'},{text:"<ul><ul><li>Break your code into modules, which are self-contained units that encapsulate related functionality.</li></ul></ul>"},{text:"<ul><ul><li>Each module should have a clear purpose and responsibility.</li></ul></ul>"},{text:"<ul><ul><li>Encapsulate related variables, functions, and classes within a module and export only the necessary interface.</li></ul></ul>"},{text:"<ul><ul><li>Use the module pattern (e.g., using functions or classes) to encapsulate code and prevent polluting the global namespace.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Dependency Management</strong></li></ol>'},{text:"<ul><ul><li>Use a dependency management system or module bundler, such as npm (Node Package Manager) or webpack, to manage external dependencies and package your code.</li></ul></ul>"},{text:"<ul><ul><li>Define dependencies in a separate file (e.g., `<code>package.json</code>`) and use tools to install and manage them automatically.</li></ul></ul>"},{text:"<ul><ul><li>This allows you to easily add, update, and remove dependencies without manually managing files.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Separation of Concerns</strong></li></ol>'},{text:"<ul><ul><li>Follow the principle of separation of concerns, which promotes dividing your code into distinct sections that handle different aspects of your application.</li></ul></ul>"},{text:"<ul><ul><li>Keep your UI, business logic, and data management separate.</li></ul></ul>"},{text:"<ul><ul><li>For example, separate HTML, CSS, and JavaScript code into their respective files or directories.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Use Modules or Module Systems</strong></li></ol>'},{text:"<ul><ul><li>Utilize JavaScript module systems like CommonJS or ES modules (import/export) to encapsulate and organize your code into reusable modules.</li></ul></ul>"},{text:"<ul><ul><li>Modules allow you to declare dependencies and import/export specific parts of the code.</li></ul></ul>"},{text:"<ul><ul><li>This promotes code reuse, maintainability, and testability.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Modular Development Frameworks</strong></li></ol>'},{text:"<ul><ul><li>Consider using modular development frameworks/libraries like React, Vue.js, or Angular, which provide built-in mechanisms for organizing and modularizing code.</li></ul></ul>"},{text:"<ul><ul><li>These frameworks typically encourage component-based development, where UI components encapsulate their own logic and can be easily reused.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Documentation and Comments</strong></li></ol>'},{text:"<ul><ul><li>Document your code to provide clear explanations of its purpose, usage, and any dependencies.</li></ul></ul>"},{text:"<ul><ul><li>Use meaningful variable and function names to improve code readability.</li></ul></ul>"},{text:"<ul><ul><li>Include comments where necessary to provide additional context or explanations for complex code sections.</li></ul></ul>"},{text:'<ol start="8"><li><strong>Code Linting</strong></li></ol>'},{text:"<ul><ul><li>Use a code linter like ESLint to enforce consistent code style and catch potential errors or anti-patterns.</li></ul></ul>"},{text:"<ul><ul><li>Linting rules can help maintain a clean and standardized codebase, improving readability and reducing the chance of bugs.</li></ul></ul>"},{text:"Remember, the specific organization and modularization techniques may vary depending on the project's size, complexity, and development environment. Adapt and adopt best practices based on the specific requirements and guidelines of your project or development team. Consistency and readability should be key considerations when organizing and modularizing your JavaScript code."}]},{secid:2,subtitle:"Naming Conventions and Coding Style",paragraphs:[{text:"Naming conventions and coding style are important aspects of writing clean, readable, and maintainable JavaScript code. Consistent naming and coding style make it easier for developers to understand and collaborate on a project. While different teams or projects may have their specific conventions, here are some common guidelines:"},{text:"<ol><li><strong>Variable and Function Names</strong></li></ol>"},{text:"<ul><ul><li>Use descriptive and meaningful names that accurately represent the purpose or content of the variable or function.</li></ul></ul>"},{text:"<ul><ul><li>Favor readability over brevity. Avoid overly abbreviated or cryptic names that can be confusing.</li></ul></ul>"},{text:"<ul><ul><li>Use camelCase for variables and functions (e.g., `<code>myVariable</code>`, `<code>calculateSum</code>`).</li></ul></ul>"},{text:"<ul><ul><li>Be consistent with naming conventions throughout your codebase.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Constants</strong></li></ol>'},{text:"<ul><ul><li>Use uppercase letters and underscores for constants (e.g., `<code>MAX_COUNT</code>`, `<code>API_URL</code>`).</li></ul></ul>"},{text:"<ul><ul><li>Constants should represent values that are not intended to be changed.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Classes and Constructor Functions</strong></li></ol>'},{text:"<ul><ul><li>Use PascalCase (also known as UpperCamelCase) for class names (e.g., `<code>Person</code>`, `<code>Car</code>`).</li></ul></ul>"},{text:"<ul><ul><li>Use descriptive names that accurately represent the class's purpose or functionality.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Functions and Methods</strong></li></ol>'},{text:"<ul><ul><li>Use camelCase for function and method names.</li></ul></ul>"},{text:"<ul><ul><li>Choose verbs or verb phrases that describe the action performed by the function or method (e.g., `<code>getUser</code>`, `<code>calculateTotal</code>`).</li></ul></ul>"},{text:'<ol start="5"><li><strong>Comments</strong></li></ol>'},{text:"<ul><ul><li>Use comments to provide explanations, clarify complex code sections, or document the purpose and usage of functions or classes.</li></ul></ul>"},{text:"<ul><ul><li>Write comments that add value and improve code understanding, avoiding redundant or obvious comments.</li></ul></ul>"},{text:"<ul><ul><li>Use consistent formatting for comments across your codebase.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Indentation and Formatting</strong></li></ol>'},{text:"<ul><ul><li>Use consistent indentation (e.g., two spaces or four spaces) for blocks of code within functions, loops, conditionals, etc.</li></ul></ul>"},{text:"<ul><ul><li>Choose a consistent code formatting style for elements like curly braces, line breaks, and spacing.</li></ul></ul>"},{text:"<ul><ul><li>Consistent formatting helps improve code readability and maintainability.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Line Length and Wrapping</strong></li></ol>'},{text:"<ul><ul><li>Limit lines to a reasonable length (e.g., 80-120 characters) for improved readability.</li></ul></ul>"},{text:"<ul><ul><li>Wrap long lines by breaking them into multiple lines.</li></ul></ul>"},{text:"<ul><ul><li>Break lines at logical points (e.g., after a comma or operator) to maintain readability.</li></ul></ul>"},{text:'<ol start="8"><li><strong>Parentheses and Brackets</strong></li></ol>'},{text:"<ul><ul><li>Use parentheses and brackets consistently and place them in a readable manner.</li></ul></ul>"},{text:"<ul><ul><li>Avoid unnecessary or redundant parentheses or brackets.</li></ul></ul>"},{text:'<ol start="9"><li><strong>Operator Spacing</strong></li></ol>'},{text:"<ul><ul><li>Add spaces around operators to improve readability (e.g., `<code>x = 5 + 2;</code>`, `<code>if (condition) { ... }</code>`).</li></ul></ul>"},{text:"<ul><ul><li>However, don't overuse spaces to the extent that it hampers readability.</li></ul></ul>"},{text:'<ol start="10"><li><strong>Consistency and Team Guidelines</strong></li></ol>'},{text:"<ul><ul><li>Consistency is key. Follow the established coding conventions and style guidelines of your project or team.</li></ul></ul>"},{text:"<ul><ul><li>If working with a team, agree on a set of coding style guidelines and adhere to them for consistent code across the project.</li></ul></ul>"},{text:"Remember, these guidelines are not set in stone, and different projects or teams may have their own preferences. The most important aspect is to be consistent within your codebase and collaborate with your team to establish and follow agreed-upon conventions."}]},{secid:3,subtitle:"Performance Optimization Tips",paragraphs:[{text:"When it comes to performance optimization in JavaScript, there are several techniques and best practices that can help improve the speed and efficiency of your code. Here are some performance optimization tips:"},{text:"<ol><li><strong>Minimize and Bundle Code</strong></li></ol>"},{text:"<ul><ul><li>Minify and bundle your JavaScript code using tools like UglifyJS or Webpack.</li></ul></ul>"},{text:"<ul><ul><li>Minification removes unnecessary characters (whitespace, comments) to reduce file size.</li></ul></ul>"},{text:"<ul><ul><li>Bundling combines multiple files into a single file, reducing the number of HTTP requests required.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Avoid Global Variables</strong></li></ol>'},{text:"<ul><ul><li>Minimize the use of global variables as they can lead to naming conflicts and hinder performance.</li></ul></ul>"},{text:"<ul><ul><li>Declare variables with appropriate scope (e.g., local to functions or modules) to reduce global namespace pollution.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Optimize Loops</strong></li></ol>'},{text:"<ul><ul><li>Optimize loops by reducing the number of iterations and avoiding unnecessary operations within the loop.</li></ul></ul>"},{text:"<ul><ul><li>Consider using techniques like loop unrolling or loop inversion to optimize specific scenarios.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Use Efficient Data Structures and Algorithms</strong></li></ol>'},{text:"<ul><ul><li>Choose appropriate data structures and algorithms for your specific use case.</li></ul></ul>"},{text:"<ul><ul><li>Use efficient data structures like arrays or maps for fast element access or lookup.</li></ul></ul>"},{text:"<ul><ul><li>Employ algorithms with optimal time complexity to ensure efficient processing.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Cache DOM Queries</strong></li></ol>'},{text:"<ul><ul><li>Minimize the number of DOM queries, as they can be expensive operations.</li></ul></ul>"},{text:"<ul><ul><li>Cache repeated DOM queries in variables to avoid redundant lookups.</li></ul></ul>"},{text:"<ul><ul><li>Use techniques like event delegation to reduce the number of event listeners attached to individual elements.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Debouncing and Throttling</strong></li></ol>'},{text:"<ul><ul><li>Implement debouncing and throttling techniques to optimize event handling and reduce unnecessary function calls.</li></ul></ul>"},{text:"<ul><ul><li>Debouncing limits the frequency of a function call to improve performance in scenarios like resizing or scrolling events.</li></ul></ul>"},{text:"<ul><ul><li>Throttling limits the number of function invocations within a specific time frame, especially for events like mouse movement or keyboard input.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Use Efficient Selectors</strong></li></ol>'},{text:"<ul><ul><li>When selecting elements using JavaScript libraries like jQuery, use efficient selectors to minimize the search time.</li></ul></ul>"},{text:"<ul><ul><li>Prefer ID selectors (`<code>#id</code>`) or class selectors (`<code>.class</code>`) over complex CSS selectors.</li></ul></ul>"},{text:'<ol start="8"><li><strong>Asynchronous Operations</strong></li></ol>'},{text:"<ul><ul><li>Offload time-consuming tasks or operations to asynchronous functions or workers.</li></ul></ul>"},{text:"<ul><ul><li>Use asynchronous techniques like Promises, async/await, or Web Workers to prevent blocking the main thread and improve responsiveness.</li></ul></ul>"},{text:'<ol start="9"><li><strong>Optimize Network Requests</strong></li></ol>'},{text:"<ul><ul><li>Minimize the number of network requests by combining resources, using caching techniques, or lazy loading.</li></ul></ul>"},{text:"<ul><ul><li>Optimize the size of transferred data by compressing files (e.g., using Gzip) and optimizing images.</li></ul></ul>"},{text:'<ol start="10"><li><strong>Profiling and Benchmarking</strong></li></ol>'},{text:"<ul><ul><li>Use profiling and benchmarking tools to identify performance bottlenecks in your code.</li></ul></ul>"},{text:"<ul><ul><li>Tools like Chrome DevTools, Lighthouse, or performance profiling libraries can help pinpoint areas that require optimization.</li></ul></ul>"},{text:'<ol start="11"><li><strong>Memory Management</strong></li></ol>'},{text:"<ul><ul><li>Be mindful of memory usage and manage memory efficiently.</li></ul></ul>"},{text:"<ul><ul><li>Avoid memory leaks by properly releasing resources, removing event listeners to deallocate memory when no longer needed.</li></ul></ul>"},{text:"<ul><ul><li>Use techniques like object pooling or memory reuse for performance-critical scenarios.</li></ul></ul>"},{text:'<ol start="12"><li><strong>Use Web Workers</strong></li></ol>'},{text:"<ul><ul><li>Utilize Web Workers to offload heavy computations or operations to separate threads, allowing the main thread to remain responsive.</li></ul></ul>"},{text:"Remember, before optimizing code for performance, it's important to identify the specific areas that require optimization through profiling and testing. Optimize where it matters most and focus on improving the critical parts of your application rather than prematurely optimizing every line of code."}]},{secid:4,subtitle:"Security Considerations",paragraphs:[{text:"When developing JavaScript applications, it's essential to consider security aspects to protect user data, prevent vulnerabilities, and ensure a secure user experience. Here are some important security considerations for JavaScript development:"},{text:"<ol><li><strong>Input Validation and Sanitization</strong></li></ol>"},{text:"<ul><ul><li>Validate and sanitize all user input to prevent injection attacks and other security vulnerabilities.</li></ul></ul>"},{text:"<ul><ul><li>Use server-side validation in addition to client-side validation to ensure data integrity.</li></ul></ul>"},{text:'<ol start="2"><li><strong>Cross-Site Scripting (XSS) Prevention</strong></li></ol>'},{text:"<ul><ul><li>Guard against XSS attacks by properly encoding and escaping user-generated content before rendering it in HTML templates or dynamically updating the DOM.</li></ul></ul>"},{text:"<ul><ul><li>Avoid using innerHTML or similar methods when injecting user-generated content.</li></ul></ul>"},{text:'<ol start="3"><li><strong>Cross-Site Request Forgery (CSRF) Protection</strong></li></ol>'},{text:"<ul><ul><li>Implement measures to prevent CSRF attacks by adding CSRF tokens to forms and validating them on the server-side.</li></ul></ul>"},{text:"<ul><ul><li>Ensure that sensitive operations, such as modifying user data or performing financial transactions, require additional authentication and authorization.</li></ul></ul>"},{text:'<ol start="4"><li><strong>Secure Communication</strong></li></ol>'},{text:"<ul><ul><li>Use secure communication protocols (HTTPS) to encrypt data transmitted between the client and server, preventing eavesdropping and tampering.</li></ul></ul>"},{text:"<ul><ul><li>Avoid transmitting sensitive information, such as passwords or authentication tokens, over insecure channels.</li></ul></ul>"},{text:'<ol start="5"><li><strong>Secure Authentication and Authorization</strong></li></ol>'},{text:"<ul><ul><li>Implement secure authentication mechanisms, such as using industry-standard hashing algorithms (e.g., bcrypt) to store and verify user passwords.</li></ul></ul>"},{text:"<ul><ul><li>Use strong session management practices, including securely storing session tokens and implementing session expiration.</li></ul></ul>"},{text:"<ul><ul><li>Apply appropriate authorization checks to ensure that users can access only the resources they are authorized to access.</li></ul></ul>"},{text:'<ol start="6"><li><strong>Secure Storage and Data Handling</strong></li></ol>'},{text:"<ul><ul><li>Handle sensitive data carefully, using encryption and secure storage mechanisms to protect user information, such as passwords or personal data.</li></ul></ul>"},{text:"<ul><ul><li>Avoid storing sensitive information in client-side storage mechanisms, such as cookies or local storage, unless necessary.</li></ul></ul>"},{text:"<ul><ul><li>Follow best practices for data protection and adhere to relevant data protection regulations, such as GDPR.</li></ul></ul>"},{text:'<ol start="7"><li><strong>Secure Third-Party Libraries and APIs</strong></li></ol>'},{text:"<ul><ul><li>Check and regularly update third-party libraries and APIs used in your application to address security vulnerabilities.</li></ul></ul>"},{text:"<ul><ul><li>Only use trusted and well-maintained libraries from reputable sources.</li></ul></ul>"},{text:'<ol start="8"><li><strong>Regular Security Updates and Patches</strong></li></ol>'},{text:"<ul><ul><li>Stay informed about security vulnerabilities and updates related to JavaScript libraries, frameworks, and tools used in your project.</li></ul></ul>"},{text:"<ul><ul><li>Regularly update your dependencies and apply security patches to protect against known vulnerabilities.</li></ul></ul>"},{text:'<ol start="9"><li><strong>Error Handling and Logging</strong></li></ol>'},{text:"<ul><ul><li>Implement proper error handling and logging mechanisms to monitor and identify potential security issues.</li></ul></ul>"},{text:"<ul><ul><li>Be cautious about exposing sensitive error information to prevent information leakage.</li></ul></ul>"},{text:'<ol start="10"><li><strong>Access Control and Privilege Escalation</strong></li></ol>'},{text:"<ul><ul><li>Implement appropriate access controls and permissions to restrict user actions and prevent unauthorized access to resources.</li></ul></ul>"},{text:"<ul><ul><li>Be mindful of privilege escalation vulnerabilities, where an attacker gains higher privileges than intended.</li></ul></ul>"},{text:'<ol start="11"><li><strong>Security Auditing and Penetration Testing</strong></li></ol>'},{text:"<ul><ul><li>Conduct security audits and penetration testing to identify vulnerabilities and weaknesses in your application.</li></ul></ul>"},{text:"<ul><ul><li>Regularly review and assess the security of your codebase and infrastructure.</li></ul></ul>"},{text:'<ol start="12"><li><strong>User Education and Security Best Practices</strong></li></ol>'},{text:"<ul><ul><li>Educate your users about security best practices, such as using strong passwords, avoiding sharing sensitive information, and being cautious of phishing attacks.</li></ul></ul>"},{text:"<ul><ul><li>Implement security features like two-factor authentication (2FA) to enhance user account security.</li></ul></ul>"},{text:"Remember, security is an ongoing process, and it's crucial to stay updated on the latest security practices, vulnerabilities, and mitigation techniques. Follow secure coding practices, regularly review and test your application's security, and seek professional guidance when necessary."}]}]}]},2252:(ll,a,s)=>{function e(Nu){return`<!DOCTYPE html>\n  <html>\n  <head>\n    <style>\n      html { font-size: 16px; }\n      a { text-decoration: none; }\n    </style>\n    <script src="assets/js/utils.js"><\/script>\n  </head>\n  <body>\n    <script>\n      ${Nu}\n    <\/script>\n  </body>\n  </html>`}s.r(a),s.d(a,{js_10_1_1:()=>du,js_10_1_1_1:()=>pu,js_10_1_2:()=>mu,js_10_1_2_1:()=>gu,js_10_1_3:()=>_u,js_10_1_4:()=>hu,js_10_1_4_1:()=>xu,js_10_2_1:()=>fu,js_10_2_10_1:()=>Cu,js_10_2_11:()=>Eu,js_10_2_11_1:()=>ku,js_10_2_2:()=>yu,js_10_2_3:()=>bu,js_10_2_4:()=>ju,js_10_2_5:()=>vu,js_10_2_5_1:()=>wu,js_10_2_6:()=>Su,js_10_2_7:()=>Lu,js_10_2_8:()=>Tu,js_10_2_9:()=>Ou,js_10_3_1:()=>Ju,js_10_3_1_1:()=>Au,js_10_3_2:()=>Iu,js_10_3_3:()=>Du,js_10_3_3_1:()=>Pu,js_11_2_1:()=>Mu,js_11_2_1_1:()=>Hu,js_2_1_1:()=>p,js_2_1_10:()=>_,js_2_1_11:()=>h,js_2_1_11_1:()=>ml,js_2_1_12:()=>gl,js_2_1_13:()=>x,js_2_1_13_1:()=>_l,js_2_1_1_1:()=>nl,js_2_1_2:()=>al,js_2_1_3:()=>sl,js_2_1_4:()=>il,js_2_1_5:()=>rl,js_2_1_6:()=>ul,js_2_1_7:()=>cl,js_2_1_8:()=>m,js_2_1_8_1:()=>dl,js_2_1_9:()=>g,js_2_1_9_1:()=>pl,js_2_2_1:()=>hl,js_2_2_10:()=>Ll,js_2_2_11:()=>Tl,js_2_2_2:()=>xl,js_2_2_3:()=>fl,js_2_2_4:()=>yl,js_2_2_5:()=>bl,js_2_2_6:()=>jl,js_2_2_7:()=>vl,js_2_2_8:()=>wl,js_2_2_9:()=>Sl,js_2_3_1:()=>f,js_2_3_10:()=>O,js_2_3_10_1:()=>Ml,js_2_3_11:()=>C,js_2_3_11_1:()=>Hl,js_2_3_12:()=>E,js_2_3_12_1:()=>Nl,js_2_3_13:()=>k,js_2_3_13_1:()=>Rl,js_2_3_1_1:()=>Ol,js_2_3_2:()=>y,js_2_3_2_1:()=>Cl,js_2_3_3:()=>b,js_2_3_3_1:()=>El,js_2_3_4:()=>j,js_2_3_4_1:()=>kl,js_2_3_5:()=>v,js_2_3_5_1:()=>Jl,js_2_3_6:()=>w,js_2_3_6_1:()=>Al,js_2_3_7:()=>S,js_2_3_7_1:()=>Il,js_2_3_8:()=>L,js_2_3_8_1:()=>Dl,js_2_3_9:()=>T,js_2_3_9_1:()=>Pl,js_3_1_1:()=>Ul,js_3_1_2:()=>J,js_3_1_2_1:()=>ql,js_3_1_3:()=>zl,js_3_1_4:()=>A,js_3_1_4_1:()=>Bl,js_3_1_5:()=>Fl,js_3_1_6:()=>I,js_3_1_6_1:()=>Wl,js_3_1_7:()=>Vl,js_3_1_8:()=>D,js_3_1_8_1:()=>$l,js_3_2_1:()=>Yl,js_3_2_2:()=>P,js_3_2_2_1:()=>Gl,js_3_2_3:()=>Xl,js_3_2_4:()=>M,js_3_2_4_1:()=>Kl,js_3_2_5:()=>Ql,js_3_2_6:()=>H,js_3_2_6_1:()=>Zl,js_3_3_1:()=>en,js_3_3_10:()=>z,js_3_3_10_1:()=>cn,js_3_3_2:()=>N,js_3_3_2_1:()=>tn,js_3_3_3:()=>on,js_3_3_4:()=>R,js_3_3_4_1:()=>ln,js_3_3_5:()=>nn,js_3_3_6:()=>U,js_3_3_6_1:()=>an,js_3_3_7:()=>sn,js_3_3_8:()=>q,js_3_3_8_1:()=>rn,js_3_3_9:()=>un,js_4_1_1:()=>i,js_4_1_10:()=>K,js_4_1_10_1:()=>gn,js_4_1_11:()=>Q,js_4_1_11_1:()=>_n,js_4_1_12:()=>Z,js_4_1_12_1:()=>hn,js_4_1_2:()=>B,js_4_1_3:()=>F,js_4_1_4:()=>W,js_4_1_5:()=>V,js_4_1_6:()=>$,js_4_1_7:()=>Y,js_4_1_7_1:()=>dn,js_4_1_8:()=>G,js_4_1_8_1:()=>pn,js_4_1_9:()=>X,js_4_1_9_1:()=>mn,js_4_2_1:()=>ee,js_4_2_1_1:()=>xn,js_4_2_2:()=>te,js_4_2_2_1:()=>fn,js_4_2_3:()=>oe,js_4_2_3_1:()=>yn,js_4_2_4:()=>le,js_4_2_4_1:()=>bn,js_4_3_1:()=>ne,js_4_3_1_1:()=>jn,js_4_3_2:()=>ae,js_4_3_2_1:()=>vn,js_4_3_3:()=>se,js_4_3_3_1:()=>wn,js_4_3_4:()=>ie,js_4_3_4_1:()=>Sn,js_4_3_5:()=>re,js_4_3_5_1:()=>Ln,js_4_3_6:()=>ue,js_4_3_6_1:()=>Tn,js_4_4_1:()=>ce,js_4_4_1_1:()=>On,js_4_4_2:()=>de,js_4_4_2_1:()=>Cn,js_4_4_3:()=>pe,js_4_4_3_1:()=>En,js_4_5_1:()=>kn,js_4_5_2:()=>me,js_4_5_2_1:()=>Jn,js_4_5_3:()=>ge,js_4_5_3_1:()=>An,js_4_5_4:()=>_e,js_4_5_4_1:()=>In,js_4_5_5:()=>he,js_4_5_5_1:()=>Dn,js_4_5_6:()=>xe,js_4_5_6_1:()=>Pn,js_4_5_7:()=>fe,js_4_5_7_1:()=>Mn,js_4_5_8:()=>ye,js_4_5_8_1:()=>Hn,js_4_5_9:()=>be,js_4_5_9_1:()=>Nn,js_5_1_1:()=>je,js_5_1_10:()=>ke,js_5_1_10_1:()=>Vn,js_5_1_11:()=>Je,js_5_1_11_1:()=>$n,js_5_1_12:()=>Ae,js_5_1_12_1:()=>Yn,js_5_1_13:()=>Ie,js_5_1_13_1:()=>Gn,js_5_1_14:()=>De,js_5_1_14_1:()=>Xn,js_5_1_15:()=>Pe,js_5_1_15_1:()=>Kn,js_5_1_16:()=>Me,js_5_1_16_1:()=>Qn,js_5_1_17:()=>He,js_5_1_17_1:()=>Zn,js_5_1_18:()=>Ne,js_5_1_18_1:()=>ea,js_5_1_19:()=>Re,js_5_1_19_1:()=>ta,js_5_1_2:()=>ve,js_5_1_20:()=>Ue,js_5_1_20_1:()=>oa,js_5_1_3:()=>we,js_5_1_3_1:()=>Rn,js_5_1_4:()=>Se,js_5_1_4_1:()=>Un,js_5_1_5:()=>Le,js_5_1_5_1:()=>qn,js_5_1_6:()=>Te,js_5_1_6_1:()=>zn,js_5_1_7:()=>Oe,js_5_1_7_1:()=>Bn,js_5_1_8:()=>Ce,js_5_1_8_1:()=>Fn,js_5_1_9:()=>Ee,js_5_1_9_1:()=>Wn,js_5_2_1:()=>qe,js_5_2_10:()=>Xe,js_5_2_10_1:()=>pa,js_5_2_11:()=>Ke,js_5_2_11_1:()=>ma,js_5_2_12:()=>Qe,js_5_2_12_1:()=>ga,js_5_2_13:()=>Ze,js_5_2_13_1:()=>_a,js_5_2_14:()=>et,js_5_2_14_1:()=>ha,js_5_2_15:()=>tt,js_5_2_15_1:()=>xa,js_5_2_16:()=>ot,js_5_2_16_1:()=>fa,js_5_2_17:()=>lt,js_5_2_17_1:()=>ya,js_5_2_18:()=>nt,js_5_2_18_1:()=>ba,js_5_2_19:()=>at,js_5_2_19_1:()=>ja,js_5_2_1_1:()=>la,js_5_2_2:()=>ze,js_5_2_20:()=>st,js_5_2_20_1:()=>va,js_5_2_21:()=>it,js_5_2_21_1:()=>wa,js_5_2_22:()=>rt,js_5_2_22_1:()=>Sa,js_5_2_23:()=>ut,js_5_2_23_1:()=>La,js_5_2_24:()=>ct,js_5_2_24_1:()=>Ta,js_5_2_25:()=>dt,js_5_2_25_1:()=>Oa,js_5_2_26:()=>pt,js_5_2_26_1:()=>Ca,js_5_2_27:()=>mt,js_5_2_27_1:()=>Ea,js_5_2_28:()=>gt,js_5_2_28_1:()=>ka,js_5_2_29:()=>_t,js_5_2_29_1:()=>Ja,js_5_2_2_1:()=>na,js_5_2_3:()=>Be,js_5_2_3_1:()=>aa,js_5_2_4:()=>Fe,js_5_2_4_1:()=>sa,js_5_2_5:()=>We,js_5_2_5_1:()=>ia,js_5_2_6:()=>Ve,js_5_2_6_1:()=>ra,js_5_2_7:()=>$e,js_5_2_7_1:()=>ua,js_5_2_8:()=>Ye,js_5_2_8_1:()=>ca,js_5_2_9:()=>Ge,js_5_2_9_1:()=>da,js_5_3_1:()=>ht,js_5_3_10:()=>Lt,js_5_3_10_1:()=>qa,js_5_3_11:()=>Tt,js_5_3_11_1:()=>za,js_5_3_12:()=>Ot,js_5_3_12_1:()=>Ba,js_5_3_13:()=>Ct,js_5_3_13_1:()=>Fa,js_5_3_14:()=>Et,js_5_3_14_1:()=>Wa,js_5_3_15:()=>kt,js_5_3_15_1:()=>Va,js_5_3_16:()=>Jt,js_5_3_16_1:()=>$a,js_5_3_17:()=>At,js_5_3_17_1:()=>Ya,js_5_3_18:()=>It,js_5_3_18_1:()=>Ga,js_5_3_19:()=>Dt,js_5_3_19_1:()=>Xa,js_5_3_1_1:()=>Aa,js_5_3_2:()=>xt,js_5_3_20:()=>Pt,js_5_3_20_1:()=>Ka,js_5_3_21:()=>Mt,js_5_3_21_1:()=>Qa,js_5_3_22:()=>Ht,js_5_3_22_1:()=>Za,js_5_3_23:()=>Nt,js_5_3_23_1:()=>es,js_5_3_24:()=>Rt,js_5_3_24_1:()=>ts,js_5_3_25:()=>Ut,js_5_3_25_1:()=>os,js_5_3_2_1:()=>Ia,js_5_3_3:()=>ft,js_5_3_3_1:()=>Da,js_5_3_4:()=>yt,js_5_3_4_1:()=>Pa,js_5_3_5:()=>bt,js_5_3_5_1:()=>Ma,js_5_3_6:()=>jt,js_5_3_6_1:()=>Ha,js_5_3_7:()=>vt,js_5_3_7_1:()=>Na,js_5_3_8:()=>wt,js_5_3_8_1:()=>Ra,js_5_3_9:()=>St,js_5_3_9_1:()=>Ua,js_5_4_1:()=>t,js_5_4_10:()=>$t,js_5_4_10_1:()=>us,js_5_4_11:()=>Yt,js_5_4_11_1:()=>cs,js_5_4_12:()=>Gt,js_5_4_12_1:()=>ds,js_5_4_13:()=>Xt,js_5_4_13_1:()=>ps,js_5_4_14:()=>r,js_5_4_15:()=>u,js_5_4_16:()=>Kt,js_5_4_16_1:()=>ms,js_5_4_17:()=>Qt,js_5_4_17_1:()=>gs,js_5_4_18:()=>c,js_5_4_19:()=>d,js_5_4_2:()=>o,js_5_4_20:()=>Zt,js_5_4_20_1:()=>_s,js_5_4_21:()=>eo,js_5_4_21_1:()=>hs,js_5_4_2a:()=>qt,js_5_4_2a_1:()=>ls,js_5_4_3:()=>zt,js_5_4_3_1:()=>ns,js_5_4_4:()=>Bt,js_5_4_4_1:()=>as,js_5_4_5:()=>Ft,js_5_4_5_1:()=>ss,js_5_4_6:()=>Wt,js_5_4_6_1:()=>is,js_5_4_7:()=>l,js_5_4_8:()=>n,js_5_4_9:()=>Vt,js_5_4_9_1:()=>rs,js_5_5_1:()=>xs,js_5_5_2:()=>fs,js_5_5_3:()=>ys,js_5_5_4:()=>to,js_5_5_4_1:()=>bs,js_5_5_5:()=>oo,js_5_5_5_1:()=>js,js_6_1_1:()=>lo,js_6_1_1_1:()=>vs,js_6_1_2:()=>no,js_6_1_3:()=>ao,js_6_1_4:()=>so,js_6_1_5:()=>io,js_6_1_5_1:()=>ws,js_6_2_1:()=>Ss,js_6_2_10:()=>go,js_6_2_11:()=>Is,js_6_2_12:()=>_o,js_6_2_13:()=>ho,js_6_2_13_1:()=>Ds,js_6_2_2:()=>Ls,js_6_2_3:()=>ro,js_6_2_3_1:()=>Ts,js_6_2_4:()=>uo,js_6_2_4_1:()=>Os,js_6_2_5:()=>co,js_6_2_5_1:()=>Cs,js_6_2_6:()=>po,js_6_2_6_1:()=>Es,js_6_2_7:()=>mo,js_6_2_7_1:()=>ks,js_6_2_8:()=>Js,js_6_2_9:()=>As,js_6_3_1:()=>xo,js_6_3_10:()=>To,js_6_3_10_1:()=>Fs,js_6_3_11:()=>Oo,js_6_3_11_1:()=>Ws,js_6_3_12:()=>Co,js_6_3_12_1:()=>Vs,js_6_3_13:()=>Eo,js_6_3_13_1:()=>$s,js_6_3_14:()=>ko,js_6_3_14_1:()=>Ys,js_6_3_15:()=>Jo,js_6_3_15_1:()=>Gs,js_6_3_16:()=>Ao,js_6_3_16_1:()=>Xs,js_6_3_1_1:()=>Ps,js_6_3_2:()=>fo,js_6_3_2_1:()=>Ms,js_6_3_3:()=>yo,js_6_3_3_1:()=>Hs,js_6_3_4:()=>bo,js_6_3_4_1:()=>Ns,js_6_3_5:()=>jo,js_6_3_5_1:()=>Rs,js_6_3_6:()=>vo,js_6_3_6_1:()=>Us,js_6_3_7:()=>wo,js_6_3_7_1:()=>qs,js_6_3_8:()=>So,js_6_3_8_1:()=>zs,js_6_3_9:()=>Lo,js_6_3_9_1:()=>Bs,js_7_2_1:()=>ki,js_7_2_1_1:()=>Ji,js_7_2_2:()=>Ai,js_7_2_2_1:()=>Ii,js_7_3_1:()=>Di,js_7_3_1_1:()=>Pi,js_7_3_2:()=>Mi,js_7_3_2_1:()=>Hi,js_7_4_1:()=>Ni,js_7_4_1_1:()=>Ri,js_7_4_2:()=>Ui,js_7_4_2_1:()=>qi,js_7_5_1:()=>zi,js_7_5_1_1:()=>Bi,js_8_1_1:()=>Fi,js_8_1_1_1:()=>Wi,js_8_1_2:()=>Io,js_8_1_2_1:()=>Vi,js_8_1_3:()=>$i,js_8_1_3_1:()=>Yi,js_8_1_4:()=>Gi,js_8_1_4_1:()=>Xi,js_8_1_5:()=>Ki,js_8_1_5_1:()=>Qi,js_8_1_6:()=>Zi,js_8_1_6_1:()=>er,js_8_1_7:()=>tr,js_8_1_7_1:()=>or,js_8_1_8:()=>Do,js_8_1_8_1:()=>lr,js_8_1_9:()=>Po,js_8_1_9_1:()=>nr,js_8_2_1:()=>Mo,js_8_2_1_1:()=>ar,js_8_2_2:()=>Ho,js_8_2_2_1:()=>sr,js_8_2_3:()=>No,js_8_2_3_1:()=>ir,js_8_2_4:()=>Ro,js_8_2_4_1:()=>rr,js_8_2_5:()=>Uo,js_8_2_5_1:()=>ur,js_8_2_6:()=>qo,js_8_2_6_1:()=>cr,js_8_2_7:()=>zo,js_8_2_7_1:()=>dr,js_8_3_1:()=>pr,js_8_3_10:()=>Er,js_8_3_11:()=>kr,js_8_3_12:()=>Jr,js_8_3_12_1:()=>Ar,js_8_3_13:()=>Ir,js_8_3_13_1:()=>Dr,js_8_3_14:()=>Pr,js_8_3_15:()=>Mr,js_8_3_15_1:()=>Hr,js_8_3_16:()=>Nr,js_8_3_16_1:()=>Rr,js_8_3_1_1:()=>mr,js_8_3_2:()=>gr,js_8_3_2_1:()=>_r,js_8_3_3:()=>hr,js_8_3_3_1:()=>xr,js_8_3_4:()=>fr,js_8_3_4_1:()=>yr,js_8_3_5:()=>br,js_8_3_5_1:()=>jr,js_8_3_6:()=>vr,js_8_3_6_1:()=>wr,js_8_3_7:()=>Sr,js_8_3_7_1:()=>Lr,js_8_3_8:()=>Tr,js_8_3_8_1:()=>Or,js_8_3_9:()=>Cr,js_8_4_1:()=>Bo,js_8_4_1_1:()=>Ur,js_8_4_2:()=>qr,js_8_4_3:()=>zr,js_8_4_4:()=>Br,js_8_4_5:()=>Fr,js_8_4_6:()=>Wr,js_8_4_7:()=>Vr,js_8_4_8:()=>$r,js_8_4_9:()=>Yr,js_8_5_1:()=>Fo,js_8_5_10:()=>Zo,js_8_5_10_1:()=>nu,js_8_5_11:()=>el,js_8_5_11_1:()=>au,js_8_5_12:()=>tl,js_8_5_12_1:()=>su,js_8_5_13:()=>ol,js_8_5_13_1:()=>iu,js_8_5_1_1:()=>Gr,js_8_5_2:()=>Wo,js_8_5_2_1:()=>Xr,js_8_5_3:()=>Vo,js_8_5_3_1:()=>Kr,js_8_5_4:()=>$o,js_8_5_4_1:()=>Qr,js_8_5_5:()=>Yo,js_8_5_5_1:()=>Zr,js_8_5_6:()=>Go,js_8_5_6_1:()=>eu,js_8_5_7:()=>Xo,js_8_5_7_1:()=>tu,js_8_5_8:()=>Ko,js_8_5_8_1:()=>ou,js_8_5_9:()=>Qo,js_8_5_9_1:()=>lu,js_8_6_1:()=>ru,js_8_7_1:()=>uu,js_8_8_1:()=>cu,js_9_2_1:()=>Ks,js_9_2_10:()=>_i,js_9_2_10_1:()=>hi,js_9_2_1_1:()=>Qs,js_9_2_2:()=>Zs,js_9_2_2_1:()=>ei,js_9_2_3:()=>ti,js_9_2_3_1:()=>oi,js_9_2_4:()=>li,js_9_2_4_1:()=>ni,js_9_2_5:()=>ai,js_9_2_5_1:()=>si,js_9_2_6:()=>ii,js_9_2_6_1:()=>ri,js_9_2_7:()=>ui,js_9_2_7_1:()=>ci,js_9_2_8:()=>di,js_9_2_8_1:()=>pi,js_9_2_9:()=>mi,js_9_2_9_1:()=>gi,js_9_3_1:()=>xi,js_9_3_2:()=>fi,js_9_3_2_1:()=>yi,js_9_3_3:()=>bi,js_9_3_3_1:()=>ji,js_9_3_4:()=>vi,js_9_3_4_1:()=>wi,js_9_3_5:()=>Si,js_9_3_5_1:()=>Li,js_9_3_6:()=>Ti,js_9_3_6_1:()=>Oi,js_9_4_1:()=>Ci,js_9_4_1_1:()=>Ei});const p="// Log a greeting message\nconsole.log('Hello, world!');",nl=e(p),al="// Declare a variable named 'x' and initialize it with the value 5\nlet x = 5;",sl="// This is a single-line comment",il="/* This is a\nmulti-line comment */",rl="// Declare a variable `message` and initialize it with the string 'Hello' \nlet message = 'Hello'; \n\n// Declare a constant `PI` and initialize it with the numeric value 3.14 \nconst PI = 3.14;",ul="// Declare a variable `number` and initialize it with the numeric value 10 \nlet number = 10;        // Number \n\n// Declare a variable `name` and initialize it with the string value 'Jane' \nlet name = 'Jane';      // String \n\n// Declare a variable `isActive` and initialize it with the boolean value true \nlet isActive = true;    // Boolean \n\n// Declare a variable `x` without initializing it, resulting in an undefined value \nlet x;                  // Undefined \n\n// Declare a variable `y` and initialize it with the null value to represent the absence of any object value \nlet y = null;           // Null",cl="// Declare an object `obj` with two properties: `name` with the value 'John' and `age` with the value 30 \nlet obj = {name: 'John', age: 30};  // Object \n\n// Declare an array `array` containing three numeric elements: 1, 2, and 3 \nlet array = [1, 2, 3];              // Array",m="// Declare a constant `userAge` and initialize it with the numeric value 25 \nconst userAge = 25; \n\n// Check if `userAge` is greater than or equal to 18 \nif (userAge >= 18) { \n  // If the condition is true, log 'User is an adult.' \n  console.log('User is an adult.'); \n} else { \n  // If the condition is false, log 'User is a minor.' \n  console.log('User is a minor.'); \n}",dl=e(m),g="// Start a for loop with the initialization of a variable `i` set to 0 \nfor (let i = 0; i < 5; i++) { \n  // For each iteration, check if `i` is less than 5; if true, execute the loop body \n  console.log(i); // Log the current value of `i` \n  // After each iteration, increment `i` by 1 using `i++` \n}",pl=e(g),_="// Define a function named `greet` that takes one parameter `name` \nfunction greet(name) { \n  // Return a greeting string concatenated with the `name` parameter \n  return 'Hello ' + name; \n}",h="console.log(greet('Alice'));  // Output: Hello Alice",ml=e(`${_} ${h}`),gl="document.getElementById('myBtn').onclick = function() {\n  // Action to perform on button click\n};",x="// Define a function named `func` \nfunction func() { \n  'use strict'; // Enable strict mode for this function scope \n  \n  // Attempt to assign a value to `x` without declaring it first \n  x = 3.14;  // This will cause an error because `x` is not declared \n} \n\n// Call the function `func`, which will attempt to execute its body \nfunc();",_l=e(`try {\n  ${x}\n} catch (err) {\n  console.error(err)\n}`),hl="// Declare a variable `age` and initialize it with the numeric value 35 \nlet age = 35;",xl="// Declare a variable `name` and initialize it with the string value 'John' \nlet name = 'John';",fl="// Declare a variable `isActive` and initialize it with the boolean value `true` \nlet isActive = true;",yl="// Declare a variable `car` and initialize it with the `null` value \nlet car = null;",bl="// Declare a variable `address` and initialize it with the `undefined` value \nlet address = undefined;",jl="// Declare a variable `id` and initialize it with a unique symbol \nlet id = Symbol();",vl="// Declare an object `person` with properties `name` set to 'John' and `age` set to 25 \nlet person = { name: 'John', age: 25 };",wl="// Declare a variable `bigNumber` and initialize it with a BigInt representation of 123456789 \nlet bigNumber = BigInt(123456789);",Sl="// Declare a variable `age` and initialize it with the numeric value 25 \nlet age = 25; \n\n// Declare a variable `str` and initialize it with a concatenated string that includes the `age` variable \nlet str = 'John is ' + age + ' years old.' // returns 'John is 25 years old.'",Ll="// Declare a variable `age` and initialize it with the numeric value 25 \nlet age = 25;  \n\n// Declare a variable `typeOfAge` and use the `typeof` operator to get the data type of the `age` variable \nlet typeOfAge = typeof age; // returns 'number'",Tl="// Declare an object `person` with properties `name` set to 'John' and `age` set to 25 \nlet person = { name: 'John', age: 25 }; \n\n// Declare a variable `isInstance` and use the `instanceof` operator to check if `person` is an instance of `Object` \nlet isInstance = person instanceof Object; // returns true",f="// Using the assignment operator (`=`) to assign a value to the variable `x` \nlet x = 5; \n\n// Log the initial value of `x` \nconsole.log('Initial value of x:', x); // Output: 5",Ol=e(f),y="// Using the assignment operator (`=`) to assign the value 5 to the variable `x` \nlet x = 5; \n\n// Additional assignment operators: `+=`, `-=`, `*=`, `/=`, and `%=` \n\n// Adds 3 to `x` and updates `x` with the new value \nx += 3; // `x` is now `x` + 3 \nconsole.log('x += 3:', x); // Output: 8 \n\n// Subtracts 2 from `x` and updates `x` with the new value \nx -= 2; // `x` is now `x` - 2 \nconsole.log('x -= 2:', x); // Output: 6 \n\n// Multiplies `x` by 4 and updates `x` with the new value \nx *= 4; // `x` is now `x` * 4 \nconsole.log('x *= 4:', x); // Output: 24 \n\n// Divides `x` by 3 and updates `x` with the new value \nx /= 3; // `x` is now `x` / 3 \nconsole.log('x /= 3:', x); // Output: 8 \n\n// Calculates `x` modulo 5 (remainder of `x` divided by 5) and updates `x` with the new value \nx %= 5; // `x` is now `x` % 5 \nconsole.log('x %= 5:', x); // Output: 3",Cl=e(y),b="// Initialize two variables `a` and `b` with numeric values 10 and 4, respectively \nlet a = 10; \nlet b = 4; \n\n// Addition: Calculate the sum of `a` and `b` \nlet sum = a + b; \nconsole.log('Addition:', sum); // Output: 14 \n\n// Subtraction: Calculate the difference between `a` and `b` \nlet difference = a - b; \nconsole.log('Subtraction:', difference); // Output: 6 \n\n// Multiplication: Calculate the product of `a` and `b` \nlet product = a * b; \nconsole.log('Multiplication:', product); // Output: 40 \n\n// Division: Calculate the quotient of `a` divided by `b` \nlet quotient = a / b; \nconsole.log('Division:', quotient); // Output: 2.5",El=e(b),j="// Initialize two variables `a` and `b` with numeric values 10 and 4, respectively \nlet a = 10; \nlet b = 4; \n\n// Modulo: Calculate the remainder of `a` divided by `b` \nlet remainder = a % b; \nconsole.log('Modulo:', remainder); // Output: 2",kl=e(j),v="// Increment operation \n// Initialize a variable `x` with the numeric value 5 \nlet x = 5; \nx++; // Increment the value of `x` by 1 \nconsole.log('Increment:', x); // Output: 6 \n\n// Decrement operation \n// Initialize a variable `y` with the numeric value 8 \nlet y = 8; \ny--; // Decrement the value of `y` by 1 \nconsole.log('Decrement:', y); // Output: 7",Jl=e(v),w="// Equal to (`==`) comparison \n// Initialize variables `a` with 5 and `b` with '5' (string) \nlet a = 5; \nlet b = '5'; \n// Check if `a` is equal to `b` (type conversion allowed) \nlet isEqual = a == b; \nconsole.log('Equal to (`==`):', isEqual); // Output: true \n\n// Not equal to (`!=`) comparison \n// Initialize variables `c` with 10 and `d` with 7 \nlet c = 10; \nlet d = 7; \n// Check if `c` is not equal to `d` \nlet notEqual = c != d; \nconsole.log('Not equal to (`!=`):', notEqual); // Output: true \n\n// Strict equal to (`===`) comparison \n// Initialize variables `e` and `f` both with the numeric value 5 \nlet e = 5; \nlet f = 5; \n// Check if `e` is strictly equal to `f` (no type conversion) \nlet isStrictEqual = e === f; \nconsole.log('Strict equal to (`===`):', isStrictEqual); // Output: true \n\n// Strict not equal to (`!==`) comparison \n// Initialize variables `g` with 10 and `h` with '10' (string) \nlet g = 10; \nlet h = '10'; \n// Check if `g` is strictly not equal to `h` (considering type) \nlet isStrictNotEqual = g !== h; \nconsole.log('Strict not equal to (`!==`):', isStrictNotEqual); // Output: true",Al=e(w),S="// Greater than (`>`) comparison \n// Initialize variables `i` with 8 and `j` with 5 \nlet i = 8; \nlet j = 5; \n// Check if `i` is greater than `j` \nlet isGreater = i > j; \nconsole.log('Greater than (`>`):', isGreater); // Output: true \n\n// Less than (`<`) comparison \n// Initialize variables `k` with 3 and `l` with 6 \nlet k = 3; \nlet l = 6; \n// Check if `k` is less than `l` \nlet isLess = k < l; \nconsole.log('Less than (`<`):', isLess); // Output: true \n\n// Greater than or equal to (`>=`) comparison \n// Initialize variables `m` and `n` both with the numeric value 7 \nlet m = 7; \nlet n = 7; \n// Check if `m` is greater than or equal to `n` \nlet isGreaterOrEqual = m >= n; \nconsole.log('Greater than or equal to (`>=`):', isGreaterOrEqual); // Output: true \n\n// Less than or equal to (`<=`) comparison \n// Initialize variables `o` with 9 and `p` with 12 \nlet o = 9; \nlet p = 12; \n// Check if `o` is less than or equal to `p` \nlet isLessOrEqual = o <= p; \nconsole.log('Less than or equal to (`<=`):', isLessOrEqual); // Output: true",Il=e(S),L="// Logical AND (`&&`) operation \n// Initialize variables `a` and `b` both with the boolean value true \nlet a = true; \nlet b = true; \n// Use the logical AND operator to determine the conjunction of `a` and `b` \nlet resultAND = a && b; \nconsole.log('Logical AND (`&&`):', resultAND); // Output: true",Dl=e(L),T="// Logical OR (`||`) operation \n// Initialize variables `c` with the boolean value true and `d` with false \nlet c = true; \nlet d = false; \n// Use the logical OR operator to determine the disjunction of `c` and `d` \nlet resultOR = c || d; \nconsole.log('Logical OR (`||`):', resultOR); // Output: true",Pl=e(T),O="// Logical NOT (`!`) operation \n// Initialize variable `e` with the boolean value true \nlet e = true; \n// Use the logical NOT operator to negate the value of `e` \nlet resultNOT = !e; \nconsole.log('Logical NOT (`!`):', resultNOT); // Output: false",Ml=e(O),C="// Initialize a variable `num` with the numeric value 10 \nlet num = 10; \n\n// Use the ternary operator to check if `num` is even. If `num` % 2 equals 0, return 'Even'; otherwise, return 'Odd' \nlet result = num % 2 === 0 ? 'Even' : 'Odd'; \n\n// Log the result of the ternary operation \nconsole.log(result); // Output: 'Even'",Hl=e(C),E="// Without using the grouping operator \nlet result1 = 10 + 5 * 2; // 10 + (5 * 2) due to operator precedence, multiplication before addition \nconsole.log('Result 1:', result1); // Output: 20 \n\n// Using the grouping operator \nlet result2 = (10 + 5) * 2; // (10 + 5) * 2, addition inside parentheses performed first, then multiplication \nconsole.log('Result 2:', result2); // Output: 30",Nl=e(E),k="// Bitwise AND (`&`) \nlet a = 5; // Binary: 0101 \nlet b = 3; // Binary: 0011 \nlet resultAND = a & b; // Performs bitwise AND on a and b, result in binary: 0001 (Decimal: 1) \nconsole.log('Bitwise AND (`&`):', resultAND); // Output: 1 \n\n// Bitwise OR (`|`) \nlet c = 5; // Binary: 0101 \nlet d = 3; // Binary: 0011 \nlet resultOR = c | d; // Performs bitwise OR on c and d, result in binary: 0111 (Decimal: 7) \nconsole.log('Bitwise OR (`|`):', resultOR); // Output: 7 \n\n// Bitwise XOR (`^`) \nlet e = 5; // Binary: 0101 \nlet f = 3; // Binary: 0011 \nlet resultXOR = e ^ f; // Performs bitwise XOR on e and f, result in binary: 0110 (Decimal: 6) \nconsole.log('Bitwise XOR (`^`):', resultXOR); // Output: 6 \n\n// Bitwise NOT (`~`) \nlet g = 5; // Binary: 0101 \nlet resultNOT = ~g; // Performs bitwise NOT on g, result in binary: 1010 (Decimal: -6) \nconsole.log('Bitwise NOT (`~`):', resultNOT); // Output: -6 \n\n// Bitwise left shift (`<<`) \nlet h = 5; // Binary: 0101 \nlet resultLeftShift = h << 2; // Shifts h left by 2, result in binary: 010100 (Decimal: 20) \nconsole.log('Bitwise left shift (`<<`):', resultLeftShift); // Output: 20 \n\n// Bitwise right shift (`>>`) \nlet i = 16; // Binary: 0001 0000 \nlet resultRightShift = i >> 2; // Shifts i right by 2, preserving sign, result in binary: 0000 0100 (Decimal: 4) \nconsole.log('Bitwise right shift (`>>`):', resultRightShift); // Output: 4 \n\n// Bitwise unsigned right shift (`>>>`) \nlet j = -16; // Two's complement binary: 1111 1111 1111 1111 1111 1111 1111 0000 \nlet resultUnsignedRightShift = j >>> 2; // Shifts j right by 2, filling with zeros, result in binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820) \nconsole.log('Bitwise unsigned right shift (`>>>`):', resultUnsignedRightShift); // Output: 1073741820",Rl=e(k),Ul="if (condition) {\n  // Code to execute if condition is true\n}",J="// Initialize a variable `score` with the numeric value 75 \nlet score = 75; \n\n// Check if `score` is greater than 70 \nif (score > 70) { \n  // If the condition is true, log 'Pass' \n  console.log('Pass'); \n}",ql=e(J),zl="if (condition) {\n  // Code to execute if condition is true\n} else {\n  // Code to execute if condition is false\n}",A="// Initialize a variable `score` with the numeric value 65 \nlet score = 65; \n\n// Check if `score` is greater than 70 \nif (score > 70) { \n  // If the condition is true, log 'Pass' \n  console.log('Pass'); \n} else { \n  // If the condition is false, log 'Fail' \n  console.log('Fail'); \n}",Bl=e(A),Fl="if (condition1) {\n  // Code to execute if condition1 is true\n} else if (condition2) {\n  // Code to execute if condition2 is true\n} else {\n  // Code to execute if both condition1 and condition2 are false\n}",I="// Initialize a variable `score` with the numeric value 85 \nlet score = 85; \n\n// Check if `score` is greater than or equal to 90 \nif (score >= 90) { \n  // If the condition is true, log 'Grade A' \n  console.log('Grade A'); \n} else if (score >= 80) { \n  // If `score` is less than 90 but greater than or equal to 80, log 'Grade B' \n  console.log('Grade B'); \n} else { \n  // If `score` is less than 80, log 'Grade below C' \n  console.log('Grade below C'); \n}",Wl=e(I),Vl="switch(expression) {\n  case x:\n    // Code to execute if expression equals x\n    break;\n  case y:\n    // Code to execute if expression equals y\n    break;\n  default:\n    // Code to execute if expression doesn't match any case\n}",D="// Initialize a variable `fruit` with the string value 'Apple' \nlet fruit = 'Apple'; \n\n// Use a switch statement to perform different actions based on the value of `fruit` \nswitch(fruit) { \n  case 'Banana': // If `fruit` is 'Banana' \n    console.log('Yellow fruit'); // Output: 'Yellow fruit' \n    break; // Exit the switch statement \n  case 'Apple': // If `fruit` is 'Apple' \n    console.log('Red or green fruit'); // Output: 'Red or green fruit' \n    break; // Exit the switch statement \n  default: // If `fruit` does not match any case \n    console.log('Unknown fruit'); // Output: 'Unknown fruit' \n} \n\n// Since `fruit` is 'Apple', will log 'Red or green fruit'.",$l=e(D),Yl="condition ? expressionIfTrue : expressionIfFalse;",P="// Initialize a variable `age` with the numeric value 20 \nlet age = 20; \n\n// Use the ternary operator to assign 'Adult' to `role` if `age` is 18 or older, otherwise 'Child' \nlet role = age >= 18 ? 'Adult' : 'Child'; \n\n// Log the value of `role` \nconsole.log(role); // Output: 'Adult'",Gl=e(P),Xl="obj?.prop;       // Accessing property\nobj?.[expr];     // Accessing property with expression\nfunc?.(...args); // Calling a function (if it exists)",M="// Initialize an object `user` with a `name` property set to 'Alice' and an `address` property set to null \nlet user = { \n  name: 'Alice', \n  address: null \n}; \n\n// Use optional chaining to safely access `street` property of `address` within `user` \n// If `user` or `address` is nullish (`null` or `undefined`), `streetName` will be `undefined` without causing an error \nlet streetName = user?.address?.street; // No error, returns undefined \n\n// Log the value of `streetName`, which is `undefined` \nconsole.log(streetName); // Output: undefined",Kl=e(M),Ql="leftExpr ?? rightExpr;",H="// Initialize a variable `inputName` with the value null \nlet inputName = null; \n\n// Use the nullish coalescing operator to assign `inputName` to `userName` if `inputName` is not null or undefined, \n// otherwise assign 'Anonymous' \nlet userName = inputName ?? 'Anonymous'; // Since `inputName` is null, `userName` will be 'Anonymous' \n\n// Log the value of `userName`, which is 'Anonymous' \nconsole.log(userName); // Output: 'Anonymous'",Zl=e(H),en="for (initialization; condition; increment) {\n  // Code to be executed\n}",N="// Initialize a `for` loop with a variable `i` starting at 0 \nfor (let i = 0; i < 5; i++) { \n  // For each iteration, check if `i` is less than 5 \n  // Log the current value of `i` \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment `i` by 1 after each iteration \n}",tn=e(N),on="while (condition) {\n  // Code to be executed\n}",R="// Initialize a variable `i` with the value 0 \nlet i = 0; \n\n// Start a `while` loop that continues as long as `i` is less than 5 \nwhile (i < 5) { \n  // Log the current value of `i` \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment `i` by 1 after each iteration to avoid an infinite loop \n  i++; \n}",ln=e(R),nn="do {\n  // Code to be executed\n} while (condition);",U="// Initialize a variable `i` with the value 0 \nlet i = 0; \n\n// Start a `do-while` loop \ndo { \n  // Log the current value of `i` \n  console.log(i); // This will log 0, 1, 2, 3, 4 on separate lines \n  // Increment `i` by 1 after logging \n  i++; \n} while (i < 5); // Continue the loop as long as `i` is less than 5",an=e(U),sn="for (key in object) {\n  // Code to be executed\n}",q="// Define a constant object `person` with properties `firstName` and `lastName` \nconst person = {firstName: 'John', lastName: 'Doe'}; \n\n// Start a `for...in` loop to iterate over each property (key) in the `person` object \nfor (let key in person) { \n  // Concatenate the key and its corresponding value from the `person` object and log it \n  console.log(key + ': ' + person[key]); // This will log 'firstName: John' and 'lastName: Doe' on separate lines \n}",rn=e(q),un="for (value of iterable) {\n  // Code to be executed\n}",z="// Define an array `colors` with the elements 'Red', 'Green', and 'Blue' \nlet colors = ['Red', 'Green', 'Blue']; \n\n// Start a `for...of` loop to iterate over each element in the `colors` array \nfor (let color of colors) { \n  // Log the current element (`color`) \n  console.log(color); // This will log 'Red', 'Green', and 'Blue' on separate lines \n}",cn=e(z),i="// Define a function named `greet` that takes one parameter `name` \nfunction greet(name) { \n  // Return a greeting string concatenated with the `name` parameter \n  return 'Hello ' + name; \n}",B="// Define a constant `square` assigned to an anonymous function that takes one parameter `number` \nconst square = function(number) { \n  // Return the square of `number` by multiplying it by itself \n  return number * number; \n};",F="// Define a constant `sum` assigned to an arrow function that takes two parameters `a` and `b` \nconst sum = (a, b) => a + b;",W="// Define `sum` to accumulate total of any number of arguments \nfunction sum(...numbers) { \n  // Sum up numbers using `reduce` method \n  return numbers.reduce((total, num) => total + num, 0); \n}",V="// Define `greet` function with object destructuring for `name` and `age` from the parameter object \nfunction greet({ name, age }) { \n  // Use template literals to return a personalized greeting message \n  return `Hello, my name is ${name} and I am ${age} years old.`; \n}",$="// Define `setCoordinates` function with array destructuring for `x` and `y` from the parameter array \nfunction setCoordinates([x, y]) { \n  // Use template literals to return formatted coordinates \n  return `X: ${x}, Y: ${y}`; \n}",Y="// Calls the `greet` function with 'Alice' as an argument and logs the greeting message \nconsole.log(greet('Alice')); // Calls the greet function with 'Alice' as an argument \n\n// Calls the `square` function with 4 as an argument and logs the squared result \nconsole.log(square(4)); // Calls the square function with 4 as an argument \n\n// Calls the `sum` function with 5 and 10 as arguments and logs the sum of the two numbers \nconsole.log(sum(5, 10)); // Calls the sum function with 5 and 10 as arguments",dn=e(`${i} ${B} ${F} ${Y}`),G="// Calls the `sum` function with 1, 2, 3, and 4 as arguments and logs the sum of these numbers \nconsole.log(sum(1, 2, 3, 4)); // Output: 10",pn=e(`${W} ${G}`),X="// Call the `greet` function with an object containing `name` and `age` properties and log the greeting message \nconsole.log(greet({ name: 'Alice', age: 30 })); // Output: Hello, my name is Alice and I am 30 years old.",mn=e(`${V} ${X}`),K="// Calls the `setCoordinates` function with an array containing two elements (10, 20) and logs the formatted coordinates \nconsole.log(setCoordinates([10, 20])); // Output: X: 10, Y: 20",gn=e(`${$} ${K}`),Q="// Define `processUserInput` with callback parameter \nfunction processUserInput(callback) { \n  // Prompt user for name \n  var name = prompt('Please enter your name.'); \n  // Execute callback with `name` \n  console.log(callback(name)); \n} \n\n// Invoke `processUserInput` with `greet` callback \nprocessUserInput(greet); // Use `greet` as callback",_n=e(`${i} ${Q}`),Z="// Define and immediately invoke an anonymous function to create a private scope \n(function() { \n  // Declare a variable `privateVar` within the function's scope, making it private \n  var privateVar = 'I am private'; \n  // Log the value of `privateVar`, accessible only within this function \n  console.log(privateVar);  // Output: 'I am private' \n})(); // The function is invoked immediately after being defined",hn=e(Z),ee="// Declare a global variable `globalVar` \nlet globalVar = 'I am global'; \n\n// Define a function `testScope` \nfunction testScope() { \n  // Log the value of `globalVar`, demonstrating it's accessible within this function \n  console.log(globalVar); // Accessible here \n} \n\n// Call `testScope`, which will access and log the value of `globalVar` \ntestScope(); \n\n// Log the value of `globalVar`, demonstrating it's also accessible outside the function \nconsole.log(globalVar); // Also accessible here",xn=e(ee),te="// Define `testFunctionScope` function \nfunction testFunctionScope() { \n  // Declare local variable `localVar` \n  var localVar = 'I am local to testFunctionScope'; \n  // Log `localVar` within its function scope \n  console.log(localVar); // Accessible here \n} \n\n// Invoke `testFunctionScope` to log `localVar` \ntestFunctionScope(); \n\n// Try accessing `localVar` outside its scope \ntry { \n  console.log(localVar); // Causes `ReferenceError` \n} catch (err) { \n  // Handle error when `localVar` is accessed outside scope \n  console.error(err); // Logs error \n}",fn=e(te),oe="// Use an if statement to create a block scope \nif (true) { \n  // Declare a block-scoped variable `blockScopedVar` using `let` \n  let blockScopedVar = 'I am block-scoped'; \n  // Log the value of `blockScopedVar`, showing it's accessible within this block \n  console.log(blockScopedVar); // Accessible here \n} \n\n// Attempt to access `blockScopedVar` outside its block, expecting a `ReferenceError` \ntry { \n  console.log(blockScopedVar); // Attempt to log `blockScopedVar` outside its block \n} catch (err) { \n  // Catch and log the error \n  console.error(err); // Expected error: blockScopedVar is not defined \n}",yn=e(oe),le="// Define `outerFunction` with one parameter \nfunction outerFunction(outerVariable) { \n  // Return a closure `innerFunction` with one parameter \n  return function innerFunction(innerVariable) { \n      // Log `outerVariable`, accessible due to closure \n      console.log('Outer Variable: ' + outerVariable); \n      // Log `innerVariable`, local to `innerFunction` \n      console.log('Inner Variable: ' + innerVariable); \n  } \n} \n\n// Create `newFunction` by calling `outerFunction` with 'outside' \nconst newFunction = outerFunction('outside'); \n// Invoke `newFunction` (closure) with 'inside', accessing both variables \nnewFunction('inside');",bn=e(le),ne="// Define an object `person` with a `name` property and a `greet` method \nconst person = { \n  name: 'Alice', \n  // Define `greet` method that logs a greeting using `this.name` \n  greet: function() { \n    console.log('Hello, ' + this.name); \n  } \n}; \n\n// Invoke the `greet` method of `person`. `this` within `greet` refers to the `person` object \nperson.greet(); // Output: Hello, Alice",jn=e(ne),ae="// Declare a global variable `hello` \nvar hello = 'Hello'; \n\n// Define a function `showThis` to log `this.hello` \nfunction showThis() { \n  console.log(this.hello); \n} \n\n// Invoke `showThis`, where `this` refers to the global object, or `undefined` in strict mode \nshowThis(); // Output: Hello in non-strict mode, undefined in strict mode",vn=e(ae),se="// Define a constructor function `Person` with a `name` parameter \nfunction Person(name) { \n  this.name = name; // Assign the `name` parameter to the `name` property of the new object \n} \n\n// Create a new instance of `Person` named `bob` \nconst bob = new Person('Bob'); \n\n// Log the `name` property of `bob`. `this` within `Person` refers to the new object. \nconsole.log(bob.name); // Output: Bob",wn=e(se),ie="// Define a function `greet` that logs a greeting message \nfunction greet() { \n  console.log('Hello, ' + this.name); // `this` will refer to the object passed to `call` \n} \n\n// Create an object `user` with a `name` property \nconst user = { name: 'Sarah' }; \n\n// Use `greet.call(user)` to invoke `greet` with `this` set to `user` \ngreet.call(user); // Output: Hello, Sarah",Sn=e(ie),re="// Define a `team` object with properties (`members` and `name`), and a `greet` method \nconst team = { \n  members: ['Jane', 'Bill'], \n  teamName: 'Super Squad', \n  teamGreet: function() { \n    // Use `forEach` to iterate over `members` array \n    this.members.forEach((member) => { \n      // Inside arrow function, `this` still refers to `team` object due to lexical scoping \n      console.log(member + ' is part of ' + this.teamName); \n    }); \n  } \n \n}; \n\n// Call `teamGreet` method of `team` object \nteam.teamGreet(); // Log each member's name with the `teamName`, demonstrating `this` refers to `team`",Ln=e(re),ue="// Define a function `sum` without defined parameters \nfunction sum() { \n  let total = 0; // Initialize `total` to accumulate the sum \n  // Iterate over `arguments` object which contains all passed arguments \n  for (let i = 0; i < arguments.length; i++) { \n    total += arguments[i]; // Add each argument to `total` \n  } \n  return total; // Return the sum of all arguments \n} \n\n// Call `sum` with four numbers and log the result \nconsole.log(sum(1, 2, 3, 4)); // Output: 10",Tn=e(ue),ce="// Define a function `greet` with parameters for greeting and sign-off messages \nfunction greet(greeting, signOff) { \n  // Log a message using the parameters and `this.name` \n  console.log(greeting + ', ' + this.name + '. ' + signOff); \n} \n\n// Create an object `user` with a `name` property \nconst user = { name: 'Alice' }; \n\n// Use `greet.call(user, 'Hello', 'Have a nice day')` to invoke `greet` with `user` as `this` \n// and 'Hello' and 'Have a nice day' as arguments \ngreet.call(user, 'Hello', 'Have a nice day'); // Output: 'Hello, Alice. Have a nice day'",On=e(ce),de="// Define a function `sum` without defined parameters \nfunction sum() { \n  // Use `reduce` with `call` to iterate over `arguments`, accumulating a total sum \n  return Array.prototype.reduce.call(arguments, (acc, num) => acc + num, 0); \n} \n\n// Create an array of numbers \nconst numbers = [1, 2, 3, 4, 5]; \n\n// Use `sum.apply(null, numbers)` to invoke `sum` with an array of numbers as arguments \nconsole.log(sum.apply(null, numbers)); // Output: 15",Cn=e(de),pe="// Define a function `multiply` that takes two parameters and returns their product \nfunction multiply(a, b) { \n  return a * b; \n} \n\n// Use `bind` to create a new function `double` by fixing the first argument of `multiply` to 2 \nconst double = multiply.bind(null, 2); // `null` is used for the `this` context, which `multiply` doesn't use \n\n// Call `double` with 5 as the argument, which acts as the second parameter to `multiply` \nconsole.log(double(5)); // Output: 10",En=e(pe),kn="const functionName = (parameters) => {\n  // Function body\n};",me="// Define an arrow function `greet` that returns 'Hello' \nconst greet = () => 'Hello'; \n\n// Log the result of calling `greet` \nconsole.log(greet()); // Output: 'Hello'",Jn=e(me),ge="// Define an arrow function `square` that takes one parameter and returns its square \nconst square = number => number * number; \n\n// Log the result of calling `square` with 3 \nconsole.log(square(3)); // Output: 9",An=e(ge),_e="// Define an arrow function `add` that takes two parameters and returns their sum \nconst add = (a, b) => a + b; \n\n// Log the result of calling `add` with 1 and 2 \nconsole.log(add(1, 2)); // Output: 3",In=e(_e),he="// Define an arrow function `multiply` that takes two parameters and returns their product \nconst multiply = (a, b) => a * b; \n\n// Log the result of calling `multiply` with 2 and 3 \nconsole.log(multiply(2, 3)); // Output: 6",Dn=e(he),xe="// Define an arrow function `complexFunction` that calculates the sum of `a` and `b`, then doubles it \nconst complexFunction = (a, b) => { \n  const result = a + b; // Calculate the sum of `a` and `b` \n  return result * 2; // Return the doubled sum \n}; \n\n// Log the result of calling `complexFunction` with 1 and 2 \nconsole.log(complexFunction(1, 2)); // Output: 6",Pn=e(xe),fe="// Define a `Timer` class with a constructor that increments `seconds` after 1 second \nclass Timer { \n  constructor() { \n    this.seconds = 0; // Initialize seconds to 0 \n    setTimeout(() => { \n      this.seconds += 100; // Use arrow function to ensure `this` refers to Timer instance \n    }, 1000); // Increment after 1 second \n  } \n} \n\n// Create a new `Timer` instance \nlet timer = new Timer(); \n\n// Log the `seconds` property of the timer instance after 2 seconds \nsetTimeout(() => { \n  console.log(timer.seconds); // Expected output: 100 \n}, 2000);",Mn=e(fe),ye="// Define an arrow function `showArgs` that takes a variable number of arguments and returns them as an array \nconst showArgs = (...args) => args; \n\n// Log the array returned by calling `showArgs` with multiple arguments \nconsole.log(showArgs(1, 2, 3, 4, 5)); // Output: [1, 2, 3, 4, 5]",Hn=e(ye),be="// Define an array of numbers and use map to calculate their squares\nconst numbers = [1, 2, 3, 4, 5];\nconst squares = numbers.map(number => number * number);\n\n// Log the array of squared numbers\nconsole.log(squares); // Output: [1, 4, 9, 16, 25]",Nn=e(be),je="// Declare a string primitive using single quotes \nlet stringPrimitive1 = 'This is a string'; \n\n// Declare a string primitive using double quotes \nlet stringPrimitive2 = \"This is also a string\"; \n\n// Declare a string primitive using backticks for template literals \nlet stringPrimitive3 = `This is a string using template literals`;",ve="// Declare a string object using the `String` constructor \nlet stringObject = new String('This is a string object');",we="// Log the type of a string primitive\nconsole.log(typeof stringPrimitive1); // Output: 'string'\n\n// Log the type of a string object\nconsole.log(typeof stringObject); // Output: 'object'\n",Rn=e(`${je} ${ve} ${we}`),Se="// Compare two string primitives for equality\nconsole.log('Hello' === 'Hello'); // Output: true\n\n// Compare two string objects for equality\nconsole.log(new String('Hello') === new String('Hello')); // Output: false",Un=e(Se),Le="// Log the length of the string 'Hello'\nconsole.log('Hello'.length); // Output: 5",qn=e(Le),Te="// Log the character at index 1 of the string 'Hello'\nconsole.log('Hello'.charAt(1)); // Output: e",zn=e(Te),Oe="// Concatenate 'Hello ' with 'World!' and log the result\nconsole.log('Hello '.concat('World!')); // Output: Hello World!",Bn=e(Oe),Ce="// Check if 'Hello' includes the substring 'ell' and log the result\nconsole.log('Hello'.includes('ell')); // Output: true",Fn=e(Ce),Ee="// Find the index of 'e' in the string 'Hello' and log the result\nconsole.log('Hello'.indexOf('e')); // Output: 1",Wn=e(Ee),ke="// Use the `slice` method to extract and log the substring from index 1 to 3 of 'Hello' \nconsole.log('Hello'.slice(1, 3)); // Output: el",Vn=e(ke),Je="// Split the string 'a,b,c' by ',' and log the resulting array\nconsole.log('a,b,c'.split(',')); // Output: ['a', 'b', 'c']",$n=e(Je),Ae="// Convert 'Hello' to lowercase and log the result \nconsole.log('Hello'.toLowerCase()); // Output: hello",Yn=e(Ae),Ie="// Convert 'Hello' to uppercase and log the result\nconsole.log('Hello'.toUpperCase()); // Output: HELLO",Gn=e(Ie),De="// Remove whitespace from both ends of '  Hello  ' and log the result\nconsole.log('  Hello  '.trim()); // Output: Hello",Xn=e(De),Pe="// Concatenate 'Hello, ' and 'world!' into a single string `greeting` \nlet hello = 'Hello, '; \nlet world = 'world!'; \nlet greeting = hello + world; \n\n// Log the concatenated string \nconsole.log(greeting); // Output: Hello, world!",Kn=e(Pe),Me="// Initialize `message` with 'Hello, ' and then append 'world!' using `+=` operator \nlet message = 'Hello, '; \nmessage += 'world!'; \n\n// Log the concatenated message \nconsole.log(message); // Output: Hello, world!",Qn=e(Me),He="// Define a variable `name` with the value 'Alice' \nlet name = 'Alice'; \n// Create a greeting message using template literals and embed the `name` variable \nlet greeting = `Hello, ${name}!`; \n\n// Log the greeting \nconsole.log(greeting); // Output: Hello, Alice!",Zn=e(He),Ne="// Iterate over each character of the string `text` using a `for...of` loop \nlet text = 'Hello'; \n\nfor (const char of text) { \n  // Log each character of `text` \n  console.log(char); \n}",ea=e(Ne),Re="// Destructure the string `greeting` into individual characters \nlet greeting = 'Hello'; \nlet [firstChar, secondChar, thirdChar, fourthChar, fifthChar] = greeting; \n\n// Log each character obtained through destructuring \nconsole.log(firstChar);  // Output: H \nconsole.log(secondChar); // Output: e \nconsole.log(thirdChar);  // Output: l \nconsole.log(fourthChar); // Output: l \nconsole.log(fifthChar);  // Output: o",ta=e(Re),Ue="// Destructure the string `str` into its first two characters and the rest of the characters \nlet str = 'Hello, world!'; \nlet [firstChar, secondChar, ...restOfChars] = str; \n\n// Log the first and second characters \nconsole.log(firstChar);  // Output: H \nconsole.log(secondChar); // Output: e \n// Log the array containing the rest of the characters \nconsole.log(restOfChars); // Output: ['l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!']",oa=e(Ue),qe="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n// Declare an empty array `emptyArray` \nlet emptyArray = []; \n\n// Log the contents of the `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana', 'cherry'] \n// Log the contents of the `numbers` array \nconsole.log(numbers); // Output: [1, 2, 3, 4, 5] \n// Log the contents of the `emptyArray`, showing it's empty \nconsole.log(emptyArray); // Output: []",la=e(qe),ze="// Declare an array `colors` using the `Array` constructor with three string elements \nlet colors = new Array('red', 'green', 'blue'); \n\n// Log the contents of the `colors` array \nconsole.log(colors); // Output: ['red', 'green', 'blue']",na=e(ze),Be="// Declare an array `arrayOfUndefined` with 3 empty slots using the `Array` constructor \nlet arrayOfUndefined = new Array(3); \n\n// Log the contents of the `arrayOfUndefined` array, which are uninitialized (thus 'undefined') \nconsole.log(arrayOfUndefined); // Output: [undefined, undefined, undefined]",aa=e(Be),Fe="// Declare an array `mixedArray` containing mixed data types: number, string, object, and another array \nlet mixedArray = [1, 'hello', { a: 1, b: 2 }, [2, 3, 4]]; \n\n// Log the contents of the `mixedArray` \nconsole.log(mixedArray); // Output: [1, 'hello', { a: 1, b: 2 }, [2, 3, 4]]",sa=e(Fe),We="// Declare a 2D array `matrix` representing a 3x3 matrix \nlet matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]; \n\n// Access the element at the first row and first column of `matrix` \nlet firstRowFirstCol = matrix[0][0]; // 1 \n\n// Log the entire `matrix` \nconsole.log(matrix); // Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \n// Log the element from the first row and first column \nconsole.log(firstRowFirstCol); // Output: 1",ia=e(We),Ve="// Declare an array `fruits` and calculate its length \nlet fruits = ['apple', 'banana', 'cherry']; \nlet length = fruits.length; // Retrieve the length of the `fruits` array \n\n// Log the length of the `fruits` array \nconsole.log(length); // Output: 3",ra=e(Ve),$e="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Access the first element of the array \nlet firstFruit = fruits[0]; // 'apple' \n\n// Access the second element of the array \nlet secondFruit = fruits[1]; // 'banana' \n\n// Access the last element using the array's length \nlet lastFruit = fruits[fruits.length - 1]; // 'cherry' \n\n// Log the accessed elements \nconsole.log(firstFruit, secondFruit, lastFruit); // Output: apple banana cherry",ua=e($e),Ye="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Iterate over `fruits` using a traditional `for` loop \nfor (let i = 0; i < fruits.length; i++) { \n  console.log(fruits[i]); // Logs each fruit in the array \n} \n\n// Iterate over `fruits` using a `for...of` loop \nfor (let fruit of fruits) { \n  console.log(fruit); // Logs each fruit in the array \n} \n\n// Iterate over `fruits` using the `forEach` method \nfruits.forEach(fruit => console.log(fruit)); // Logs each fruit in the array",ca=e(Ye),Ge="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array into individual variables \nlet [firstFruit, secondFruit, thirdFruit] = fruits; \n\n// Log each variable to show the result of destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(secondFruit); // Output: banana \nconsole.log(thirdFruit); // Output: cherry",da=e(Ge),Xe="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array, skipping the second element \nlet [firstFruit, , thirdFruit] = fruits; \n\n// Log the variables to show the result of selective destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(thirdFruit); // Output: cherry",pa=e(Xe),Ke="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Destructure `fruits` array, skipping the second element \nlet [firstFruit, , thirdFruit] = fruits; \n\n// Log the variables to show the result of selective destructuring \nconsole.log(firstFruit); // Output: apple \nconsole.log(thirdFruit); // Output: cherry",ma=e(Ke),Qe="// Declare an array `colors` with one element \nlet colors = ['red']; \n\n// Destructure `colors` array, providing a default value for the second element \nlet [firstColor, secondColor = 'green'] = colors; \n\n// Log `firstColor` to show the first element from the array \nconsole.log(firstColor);  // Output: red \n// Log `secondColor` to show the default value, as the second element does not exist in the array \nconsole.log(secondColor); // Output: green (default value)",ga=e(Qe),Ze="// Declare an array `fruits` with two elements \nlet fruits = ['apple', 'banana']; \n\n// Use the `push` method to add 'orange' to the end of `fruits` and store the new length \nlet newLength = fruits.push('orange'); \n\n// Log the new length of the `fruits` array \nconsole.log(newLength); // Output: 3 \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana', 'orange']",_a=e(Ze),et="// Declare an array `fruits` with three elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `pop` method to remove the last element from `fruits` and store it in `lastFruit` \nlet lastFruit = fruits.pop(); // Removes 'cherry' \n\n// Log the removed element \nconsole.log(lastFruit); // Output: cherry \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana']",ha=e(et),tt="// Declare an array `fruits` with two elements \nlet fruits = ['apple', 'banana']; \n\n// Use the `unshift` method to add 'strawberry' to the beginning of `fruits` and store the new length \nlet newLength = fruits.unshift('strawberry'); \n\n// Log the new length of the `fruits` array \nconsole.log(newLength); // Output: 3 \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['strawberry', 'apple', 'banana']",xa=e(tt),ot="// Declare an array `fruits` with four elements \nlet fruits = ['strawberry', 'apple', 'banana', 'cherry']; \n\n// Use the `shift` method to remove the first element from `fruits` and store it in `firstFruit` \nlet firstFruit = fruits.shift(); // Removes 'strawberry' \n\n// Log the removed element \nconsole.log(firstFruit); // Output: strawberry \n// Log the updated `fruits` array \nconsole.log(fruits); // Output: ['apple', 'banana', 'cherry']",fa=e(ot),lt="// Declare an array `numbers` with three numeric elements \nlet numbers = [1, 2, 3]; \n\n// Use the `map` method to create a new array `squared` by squaring each element of `numbers` \nlet squared = numbers.map(num => num * num); // Results in [1, 4, 9] \n\n// Log the `squared` array \nconsole.log(squared); // Output: [1, 4, 9]",ya=e(lt),nt="// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the `filter` method to create a new array `evenNumbers` containing only even numbers from `numbers` \nlet evenNumbers = numbers.filter(num => num % 2 === 0); // Results in [2, 4] \n\n// Log the `evenNumbers` array \nconsole.log(evenNumbers); // Output: [2, 4]",ba=e(nt),at="// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the `reduce` method to calculate the sum of all elements in `numbers` \nlet sum = numbers.reduce((accumulator, currentValue) => accumulator + currentValue, 0); // Results in 15 \n\n// Log the calculated sum \nconsole.log(sum); // Output: 15",ja=e(at),st="// Declare an array `numbers` with five numeric elements \nlet numbers = [1, 2, 3, 4, 5]; \n\n// Use the `find` method to locate the first even number in `numbers` \nlet firstEven = numbers.find(num => num % 2 === 0); // Results in 2 \n\n// Log the first even number found \nconsole.log(firstEven); // Output: 2",va=e(st),it="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `indexOf` method to find the index of 'banana' in the `fruits` array \nlet index = fruits.indexOf('banana'); // Results in 1 \n\n// Log the index of 'banana' \nconsole.log(index); // Output: 1",wa=e(it),rt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `reverse` method to reverse the order of elements in `fruits` \nlet reversedFruits = fruits.reverse(); // The `fruits` array itself is reversed \n\n// Log the reversed array \nconsole.log(reversedFruits); // Output: ['cherry', 'banana', 'apple']",Sa=e(rt),ut="// Declare an array `fruits` with four string elements \nlet fruits = ['strawberry', 'banana', 'apple', 'cherry']; \n\n// Use the `sort` method to sort the elements of `fruits` alphabetically \nlet sortedFruits = fruits.sort(); // The `fruits` array itself is sorted \n\n// Log the sorted array \nconsole.log(sortedFruits); // Output: ['apple', 'banana', 'cherry', 'strawberry']",La=e(ut),ct="// Declare an array `people` with objects containing `name` and `age` properties \nlet people = [ \n  { name: 'John', age: 30 }, \n  { name: 'Anna', age: 24 }, \n  { name: 'Mike', age: 28 } \n]; \n\n// Use the `sort` method with a compare function to sort `people` by `age` \npeople.sort((a, b) => a.age - b.age); \n\n// Log the sorted array, now ordered by age from youngest to oldest \nconsole.log(people); // Output: [{ name: 'Anna', age: 24 }, { name: 'Mike', age: 28 }, { name: 'John', age: 30 }]",Ta=e(ct),dt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `slice` method to create a new array `someFruits` from index 1 to 2 of `fruits` \nlet someFruits = fruits.slice(1, 3); \n\n// Log the new array, which includes elements from index 1 to 2 of the original `fruits` array \nconsole.log(someFruits); // Output: ['banana', 'cherry']",Oa=e(dt),pt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `splice` method to insert 'kiwi' at index 1 without removing any elements \nfruits.splice(1, 0, 'kiwi'); // Arguments: start index, number of elements to remove, element(s) to add \n\n// Log the updated `fruits` array, showing 'kiwi' added at index 1 \nconsole.log(fruits); // Output: ['apple', 'kiwi', 'banana', 'cherry']",Ca=e(pt),mt="// Declare an array `fruits` with three string elements \nlet fruits = ['apple', 'banana', 'cherry']; \n\n// Use the `join` method to concatenate all elements of `fruits` into a single string, separated by ', ' \nlet fruitsString = fruits.join(', '); \n\n// Log the string created from the `fruits` array \nconsole.log(fruitsString); // Output: apple, banana, cherry",Ea=e(mt),gt="// Declare two arrays `array1` and `array2` with numeric elements \nlet array1 = [1, 2, 3]; \nlet array2 = [4, 5, 6]; \n\n// Use the `concat` method to merge `array1` and `array2` into `combinedArray` \nlet combinedArray = array1.concat(array2); \n\n// Log the merged array, showing elements from both `array1` and `array2` \nconsole.log(combinedArray); // Output: [1, 2, 3, 4, 5, 6]",ka=e(gt),_t="// Declare two arrays `array1` and `array2` with string elements \nlet array1 = ['a', 'b', 'c']; \nlet array2 = ['d', 'e', 'f']; \n\n// Use the spread operator to combine `array1` and `array2` into `combinedArray` \nlet combinedArray = [...array1, ...array2]; \n\n// Log the combined array, showing elements from both `array1` and `array2` \nconsole.log(combinedArray); // Output: ['a', 'b', 'c', 'd', 'e', 'f']",Ja=e(_t),ht="// Declare an object `person` with properties `name`, `age`, and a method `greet` \nlet person = { \n  name: 'Alice', \n  age: 30, \n  greet: function() {  \n    return 'Hello!';  \n  } \n}; \n\n// Log the `name` property of `person` \nconsole.log(person.name); // Output: Alice \n// Log the `age` property of `person` \nconsole.log(person.age); // Output: 30 \n// Call the `greet` method of `person` and log the returned greeting \nconsole.log(person.greet()); // Output: Hello!",Aa=e(ht),xt="// Declare an object `person` with properties `name` and `age` \nlet person = { \n  name: 'Alice', \n  age: 30 \n}; \n\n// Add a new property `job` to the `person` object \nperson.job = 'Developer'; \n// Log the newly added property \nconsole.log(person.job); // Output: 'Developer' \n\n// Modify the existing `age` property of `person` \nperson.age = 31; \n// Log the modified `age` property \nconsole.log(person.age); // Output: 31 \n\n// Delete the `age` property from `person` \ndelete person.age; \n// Log the deleted `age` property, which now is `undefined` \nconsole.log(person.age); // Output: undefined",Ia=e(xt),ft="// Define a `person` object with `firstName`, `lastName`, and `fullName` getter and setter \nlet person = { \n  firstName: 'Alice', \n  lastName: 'Smith', \n  // Getter for `fullName` returns the full name by concatenating `firstName` and `lastName` \n  get fullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }, \n  // Setter for `fullName` splits the name into `firstName` and `lastName` \n  set fullName(name) { \n    let parts = name.split(' '); \n    this.firstName = parts[0]; \n    this.lastName = parts[1]; \n  } \n}; \n\n// Log the `fullName` using the getter \nconsole.log(person.fullName); // Output: Alice Smith \n// Set a new `fullName`, which updates `firstName` and `lastName` \nperson.fullName = 'John Doe'; // Resets fullName \n// Log the updated `fullName` using the getter \nconsole.log(person.fullName); // Output: John Doe",Da=e(ft),yt="// Define variables `name` and `age` \nlet name = 'Alice'; \nlet age = 25; \n\n// Create a `person` object using shorthand property names \nlet person = { name, age }; \n\n// Log properties of the `person` object \nconsole.log(person.name); // Output: Alice \nconsole.log(person.age); // Output: 25",Pa=e(yt),bt="// Define a variable for dynamic property name \nlet propName = 'status'; \n\n// Create a `person` object with properties and use computed property name for `status` \nlet person = { \n  name: 'Alice', \n  age: 25, \n  [propName]: 'active' // `status` property is set dynamically using `propName` variable \n}; \n\n// Log the value of the `status` property \nconsole.log(person.status); // Output: active",Ma=e(bt),jt="// Define an object `person` with properties and a method \nlet person = { \n  name: 'Alice', \n  age: 30, \n  greet: function() {  \n    return 'Hello!'; // Method that returns a greeting \n  } \n}; \n\n// Call the `greet` method of the `person` object and log the result \nconsole.log(person.greet()); // Output: Hello!",Ha=e(jt),vt="// Define an object `person` with a `name` property and a `greet` method \nlet person = { \n  name: 'Alice', \n  greet: function() {  \n    return `Hello ${this.name}`;  // Use template literals to include the `name` property in the greeting \n  } \n} \n\n// Call the `greet` method of the `person` object and log the greeting \nconsole.log(person.greet()); // Output: Hello Alice",Na=e(vt),wt="// Define an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Log the `person` object \nconsole.log(person);",Ra=e(wt),St="// Initialize a new object `person` using the `Object` constructor \nlet person = new Object(); \n// Assign properties `name`, `age`, and `isEmployed` to the `person` object \nperson.name = 'John Doe'; \nperson.age = 30; \nperson.isEmployed = true; \n\n// Log the `person` object \nconsole.log(person);",Ua=e(St),Lt="// Define a constructor function `Person` to create an object with `name`, `age`, and `isEmployed` properties \nfunction Person(name, age, isEmployed) { \n  this.name = name; \n  this.age = age; \n  this.isEmployed = isEmployed; \n} \n\n// Instantiate a new `Person` object with specific properties \nlet person = new Person('John Doe', 30, true); \n\n// Log the newly created `person` object \nconsole.log(person);",qa=e(Lt),Tt="// Define a prototype object `personProto` with a `greet` method \nlet personProto = { \n  greet: function() { \n    return `Hello, ${this.name}`; \n  } \n}; \n\n// Create a new object `person` that inherits from `personProto` \nlet person = Object.create(personProto); \n// Assign properties `name`, `age`, and `isEmployed` to the `person` object \nperson.name = 'John Doe'; \nperson.age = 30; \nperson.isEmployed = true; \n\n// Log the `person` object \nconsole.log(person);",za=e(Tt),Ot="// Define a `Person` class with a constructor and a `greet` method \nclass Person { \n  constructor(name, age, isEmployed) { \n    this.name = name; // Initialize `name` property \n    this.age = age; // Initialize `age` property \n    this.isEmployed = isEmployed; // Initialize `isEmployed` property \n  } \n  \n  greet() { \n    return `Hello, ${this.name}`; // Method to return a greeting \n  } \n} \n\n// Instantiate a new `Person` object with specific properties \nlet person = new Person('John Doe', 30, true); \n// Log the newly created `person` object \nconsole.log(person);",Ba=e(Ot),Ct="// Declare an object `person` with properties `name` and `age` \nlet person = { \n  name: 'John Doe', \n  age: 30 \n}; \n\n// Log the `name` property of the `person` object \nconsole.log(person.name); // Output: John Doe \n// Log the `age` property of the `person` object \nconsole.log(person.age); // Output: 30",Fa=e(Ct),Et="// Declare an object `person` with properties `name` and `age` \nlet person = { \n  name: 'John Doe', \n  age: 30 \n}; \n\n// Access and log the `name` property using bracket notation \nconsole.log(person['name']); // Output: John Doe \n// Store the property name `age` in a variable `key` \nlet key = 'age'; // When the property name is stored in a variable \n// Access and log the property using the variable `key` with bracket notation \nconsole.log(person[key]); // Output: 30",Wa=e(Et),kt="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Destructure `person` to extract `name`, `age`, and `isEmployed` properties into variables \nlet { name, age, isEmployed } = person; \n\n// Log the values of the extracted variables \nconsole.log(name); // Output: John Doe \nconsole.log(age); // Output: 30 \nconsole.log(isEmployed); // Output: true",Va=e(kt),Jt="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Iterate over each property in the `person` object \nfor (let key in person) { \n  // Log the key and its corresponding value \n  console.log(key + ': ' + person[key]); \n}",$a=e(Jt),At="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use `Object.keys` to get an array of the object's property names \nlet keys = Object.keys(person); \n\n// Log the array of keys \nconsole.log(keys); // Output: ['name', 'age', 'isEmployed']",Ya=e(At),It="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use `Object.values` to get an array of the object's property values \nlet values = Object.values(person); \n\n// Log the array of values \nconsole.log(values); // Output: ['John Doe', 30, true]",Ga=e(It),Dt="// Declare an object `person` with properties `name`, `age`, and `isEmployed` \nlet person = { \n  name: 'John Doe', \n  age: 30, \n  isEmployed: true \n}; \n\n// Use `Object.entries` to get an array of the object's property [key, value] pairs \nlet entries = Object.entries(person); \n\n// Log the array of entries \nconsole.log(entries); // Output: [['name', 'John Doe'], ['age', 30], ['isEmployed', true]]",Xa=e(Dt),Pt="// Initialize an object `person` with a property `name` \nlet person = { name: 'Alice' }; \n\n// Define a new property `age` on `person` with specific property descriptors \nObject.defineProperty(person, 'age', { \n  value: 25,          // Set the initial value of `age` \n  writable: false,    // Prevent the property from being changed \n  enumerable: true,   // Allow the property to be listed in object enumerations \n  configurable: false // Prevent the property from being deleted or reconfigured \n}); \n\n// Log the `age` property of `person` \nconsole.log(person.age); // Output: 25 \n\n// Attempt to modify the `age` property \nperson.age = 30; // This will not change the age because `writable` is false \n// Log the `age` property again to show it remains unchanged \nconsole.log(person.age); // Output: 25",Ka=e(Pt),Mt="// Initialize an empty object `person` \nlet person = {}; \n\n// Define multiple properties on `person` with specific descriptors \nObject.defineProperties(person, { \n  'firstName': { \n    value: 'Alice',       // Set the initial value of `firstName` \n    writable: true,       // Allow `firstName` to be changed \n    enumerable: true      // Include `firstName` in object enumerations \n  }, \n  'lastName': { \n    value: 'Johnson',     // Set the initial value of `lastName` \n    writable: false,      // Prevent `lastName` from being changed \n    enumerable: true      // Include `lastName` in object enumerations \n  } \n}); \n\n// Log the `person` object to show defined properties \nconsole.log(person); // Output: { firstName: 'Alice', lastName: 'Johnson' }",Qa=e(Mt),Ht="// Initialize an object `person` with a property `name` \nlet person = { name: 'Alice' }; \n\n// Define a new property `age` on `person` with specific descriptors \nObject.defineProperty(person, 'age', { \n  value: 25,          // Set the initial value of `age` \n  writable: false,    // Make `age` read-only \n  enumerable: true,   // Allow `age` to appear in object enumerations \n  configurable: false // Prevent the property from being deleted or reconfigured \n}); \n\n// Retrieve the property descriptor for `age` on `person` \nlet descriptor = Object.getOwnPropertyDescriptor(person, 'age'); \n\n// Log the property descriptor of `age` \nconsole.log(descriptor); // Output: { value: 25, writable: false, enumerable: true, configurable: false }",Za=e(Ht),Nt="// Initialize an object `original` with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a shallow copy of `original` using spread syntax \nlet copy = { ...original }; \n\n// Modify the top-level property `a` in the copy \ncopy.a = 3; \n// Modify a nested property in the copy, which also affects the original due to shared reference \ncopy.b.c = 4; \n\n// Log the `original` object to show that its nested property was affected \nconsole.log(original); // Output: { a: 1, b: { c: 4 } } \n// Log the `copy` object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",es=e(Nt),Rt="// Initialize an object `original` with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a shallow copy of `original` using `Object.assign` \nlet copy = Object.assign({}, original); \n\n// Modify the top-level property `a` in the copy \ncopy.a = 3; \n// Modify a nested property in the copy, which also affects the original due to shared reference \ncopy.b.c = 4; \n\n// Log the `original` object to show that its nested property was affected \nconsole.log(original); // Output: { a: 1, b: { c: 4 } } \n// Log the `copy` object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",ts=e(Rt),Ut="// Initialize an object `original` with nested properties \nlet original = { a: 1, b: { c: 2 } }; \n\n// Create a deep copy of `original` using JSON.parse and JSON.stringify \nlet copy = JSON.parse(JSON.stringify(original)); \n\n// Modify the top-level property `a` in the copy \ncopy.a = 3; \n// Modify a nested property `b.c` in the copy \ncopy.b.c = 4; \n\n// Log the `original` object to show it remains unchanged \nconsole.log(original); // Output: { a: 1, b: { c: 2 } } \n// Log the `copy` object to show its modified state \nconsole.log(copy); // Output: { a: 3, b: { c: 4 } }",os=e(Ut),t="// Initialize a new empty `Map` \nlet map = new Map();",o="// Set string keys with corresponding values \nmap.set('key1', 'value1'); \nmap.set('key2', 'value2'); \n// Set a numeric key with its corresponding value. Keys can be of any type \nmap.set(123, 'numeric key');  \n\n// Demonstrates that `Map` keys can be diverse, including strings and numbers",qt="// Retrieve and log the number of key-value pairs in the `Map` \nlet size = map.size; \nconsole.log(size); // Output: 3",ls=e(`${t} ${o} \n ${qt}`),zt="// Use the `get` method to retrieve values based on their keys \nlet value1 = map.get('key1'); // Retrieve 'value1' \nlet value2 = map.get('key2'); // Retrieve 'value2' \nlet numericValue = map.get(123); // Retrieve 'numeric key' \n\n// Log the retrieved values \nconsole.log(value1, value2, numericValue); // Output: value1 value2 numeric key",ns=e(`${t} ${o} \n ${zt}`),Bt="// Iterate over the `Map` using `forEach`, logging both key and value \nmap.forEach((value, key) => { \n  console.log(key, value); \n});",as=e(`${t} ${o} \n ${Bt}`),Ft="// Iterate over the `Map` using a `for...of` loop on `map.entries()` \nfor (let [key, value] of map.entries()) { \n  // Log the key and value of each entry \n  console.log(key, value); \n}",ss=e(`${t} ${o} \n ${Ft}`),Wt="// Iterate over keys \nfor (let key of map.keys()) { \n  // Log each key in the `Map` \n  console.log(key); \n} \n\n// Iterate over values \nfor (let value of map.values()) { \n  // Log each value in the `Map` \n  console.log(value); \n}",is=e(`${t} ${o} \n ${Wt}`),l="// Initialize a new empty `Set` \nlet set = new Set();",n="// Add unique values to the `Set` \nset.add('value1'); \nset.add('value2'); \nset.add('value3'); \n\n// Demonstrate adding elements to `Set`, ensuring each element is unique",Vt="// Check for the presence of 'value1' in the `Set` \nlet hasValue1 = set.has('value1'); // Return true because 'value1' is in the `Set` \n// Check for the presence of 'value4' in the `Set` \nlet hasValue4 = set.has('value4'); // Return false because 'value4' is not in the `Set` \n\n// Log the results of the checks \nconsole.log(hasValue1, hasValue4); // Output: true false",rs=e(`${l} ${n} ${Vt}`),$t="// Remove 'value1' from the set \nset.delete('value1'); \n\n// Check if 'value1' is present in the `Set` after deletion \nlet hasValue1 = set.has('value1'); // Expected to be false since 'value1' was deleted \n\n// Log the result of the check \nconsole.log(hasValue1); // Output: false",us=e(`${l} ${n} ${$t}`),Yt="// Iterate over each element in the `Set` \nset.forEach(value => { \n  // Log the current value \n  console.log(value); \n});",cs=e(`${l} ${n} ${Yt}`),Gt="// Iterate over each element in the `Set` using a `for...of` loop \nfor (let value of set) { \n  // Log the current element's value \n  console.log(value); \n}",ds=e(`${l} ${n} ${Gt}`),Xt="// Store the number of elements in the `Set` in the variable `size` \nlet size = set.size;  \n\n// Log the number of elements in the `Set` \nconsole.log(size); // Output: 3",ps=e(`${l} ${n} ${Xt}`),r="// Initialize a new `WeakMap` object \nlet weakMap = new WeakMap();",u="// Create an empty object to be used as a key \nlet objKey = {}; \n\n// Associate 'some value' with `objKey` in the` WeakMap` \nweakMap.set(objKey, 'some value');",Kt="// Retrieve the value associated with `objKey` from the `WeakMap` \nlet value = weakMap.get(objKey); // Return 'some value' \n\n// Log the retrieved value \nconsole.log(value); // Output: some value",ms=e(`${r} ${u} ${Kt}`),Qt="// Remove the key-value pair where the key is `objKey` from the `WeakMap` \nweakMap.delete(objKey); // Removes the key-value pair where the key is `objKey` \n\n// Retrieve the value associated with `objKey` after deletion, which is undefined \nlet value = weakMap.get(objKey); // Return undefined \n\n// Log the retrieved value \nconsole.log(value); // Output: undefined",gs=e(`${r} ${u} ${Qt}`),c="// Create a new `WeakSet` instance \nlet weakSet = new WeakSet();",d="// Create empty objects to be used as keys \nlet obj1 = {}; \nlet obj2 = {}; \n\n// Add `obj1` to the `WeakSet` \nweakSet.add(obj1); \n// Add `obj2` to the `WeakSet` \nweakSet.add(obj2);",Zt="// Retrieve whether `obj1` is in the `WeakSet` \nlet hasObj1 = weakSet.has(obj1); // true if `obj1` is in the `WeakSet` \n\n// Retrieve whether a new object (`{}`) is in the `WeakSet`, which is false \nlet hasObj3 = weakSet.has({});   // false, as this is a new object \n\n// Log the results \nconsole.log(hasObj1, hasObj3); // Output: true false",_s=e(`${c} ${d} ${Zt}`),eo="// Remove `obj1` from the `WeakSet` \nweakSet.delete(obj1); // Removes `obj1` from the `WeakSet` \n\n// Retrieve whether `obj1` is in the `WeakSet` after deletion, which is false \nlet hasObj1 = weakSet.has(obj1); \n\n// Log the result \nconsole.log(hasObj1); // Output: false",hs=e(`${c} ${d} ${eo}`),xs='{\n  "name": "John",\n  "occupation": "Engineer"\n}',fs='[\n  "Apple",\n  "Banana",\n  "Cherry"\n]',ys='{\n  "name": "Jane",\n  "age": 30,\n  "address": {\n    "street": "123 Main St",\n    "city": "Anytown"\n  },\n  "hobbies": ["Reading", "Hiking", "Coding"]\n}',to='// Define a `person` object with name, age, and hobbies properties \nlet person = { \n  name: \'Alice\', \n  age: 30, \n  hobbies: [\'reading\', \'cycling\'] \n}; \n\n// Convert the `person` object to a JSON string \nlet jsonString = JSON.stringify(person); \n\n// Log the JSON string, outputting the stringified version of `person` \nconsole.log(jsonString); // Output: {"name":"Alice","age":30,"hobbies":["reading","cycling"]}',bs=e(to),oo='// Define a JSON string representing a person with `name`, `age`, and `hobbies` \nlet jsonString = \'{"name":"Alice","age":30,"hobbies":["reading","cycling"]}\'; \n\n// Parse the JSON string back into a JavaScript object \nlet person = JSON.parse(jsonString); \n\n// Log the `person` object \nconsole.log(person); // Output: { name: \'Alice\', age: 30, hobbies: [\'reading\', \'cycling\'] }',js=e(oo),lo="// Define the `Person` constructor function with a `name` parameter \nfunction Person(name) { \n  this.name = name; // Assign the `name` parameter to the `name` property of the instance \n} \n\n// Add a `greet` method to the `Person.prototype` \nPerson.prototype.greet = function() { \n  // Return a greeting string using the `name` property of the instance \n  return `Hello, my name is ${this.name}`; \n}; \n\n// Create a new instance of `Person` named `alice` \nvar alice = new Person('Alice'); \n\n// Call the `greet` method on the `alice` instance and log the result \nconsole.log(alice.greet()); // Output: Hello, my name is Alice",vs=e(lo),no="// Define the `Vehicle` constructor function with a `type` parameter \nfunction Vehicle(type) { \n  this.type = type; // Assign the `type` parameter to the `type` property of the instance \n} \n\n// Add a `describe` method to the `Vehicle.prototype` \nVehicle.prototype.describe = function() { \n  // Return a description string using the `type` property of the instance \n  return `This is a ${this.type}.`; \n};",ao="// Define the `Car` constructor function with `name` and `type` parameters \nfunction Car(name, type) { \n  Vehicle.call(this, type); // Call the `Vehicle` constructor function to inherit `type` property \n  this.name = name; // Assign the `name` parameter to the `name` property of the `Car` instance \n} \n\n// Inherit from `Vehicle` \nCar.prototype = Object.create(Vehicle.prototype); // Establish `Car.prototype` as an object created from `Vehicle.prototype` for inheritance purposes \nCar.prototype.constructor = Car; // Restore the `constructor` property on `Car.prototype` to refer to `Car`",so="// Adds a `showDetails` method to the `Car` prototype for displaying detailed information about the car \nCar.prototype.showDetails = function() { \n  return `This car is a ${this.name} and is a type of ${this.type}.`; \n}; \n\n// Overriding the `describe` method from `Vehicle` prototype for `Car` instances \nCar.prototype.describe = function() { \n  // Provides a custom description specific to `Car` instances \n  return `This is a car named ${this.name}.`; \n};",io="// Create a new instance of `Car` with `name` as 'Tesla Model 3' and `type` as 'electric car' \nconst myCar = new Car('Tesla Model 3', 'electric car'); \n\n// Call the overridden `describe` method on `myCar` instance and log the output \nconsole.log(myCar.describe()); // Output: This is a car named Tesla Model 3. \n\n// Call the `showDetails` method on `myCar` instance to get a detailed description and log the output \nconsole.log(myCar.showDetails()); // Output: This car is a Tesla Model 3 and is a type of electric car.",ws=e(`${no} ${ao} ${so} ${io}`),Ss="class Person {\n  // Class body goes here\n}",Ls="class Person {\n  constructor(name, age) {\n    // Code goes here\n  }\n}",ro="// Define a class named `Person` \nclass Person { \n  // Declare a public class field `name` and initialize it with 'Default Name' \n  name = 'Default Name'; \n  // Declare another public class field `age` without initializing it \n  age; \n  \n  // Constructor function that initializes a new instance of the `Person` class \n  constructor(age) { \n    this.age = age; // Set the `age` field to the value passed to the constructor \n  } \n} \n\n// Create a new instance of the `Person` class with `age` set to 30 \nconst bob = new Person(30); \n\n// Log the `name` property of the `bob` instance \nconsole.log(bob.name); // Output: Default Name",Ts=e(ro),uo="// Define a class named `Person` \nclass Person { \n  // Initialize a public class field `name` with a default value \n  name = 'Default Name'; \n  // Declare another public class field `age` without initializing it \n  age; \n  \n  // Constructor function for creating a new instance of `Person` \n  constructor(name, age) { \n    this.name = name; // Assign the `name` argument to the `name` field \n    this.age = age; // Assign the `age` argument to the `age` field \n  }  \n  \n  // Define a method `greet` to generate a greeting message \n  greet() { \n    // Return a greeting message using the `name` and `age` fields \n    return `Hello, my name is ${this.name}, I am ${this.age} years old.`;  \n  } \n} \n\n// Create a new instance of `Person` with `name` as 'Bob' and `age` as 30 \nconst bob = new Person('Bob', 30);  \n// Call the `greet` method on the `bob` instance and log the output \nconsole.log(bob.greet()); // Output: Hello, my name is Bob, I am 30 years old.",Os=e(uo),co="// Define a class named `Person` \nclass Person { \n  // Define a static field `species` with the value 'Humans' \n  static species = 'Humans'; // Static field means it belongs to the class itself, not to instances of the class \n  \n  // Define a static method `getSpecies` \n  static getSpecies() { \n    // This method returns the value of the static field `species` \n    return Person.species; // Access the static field using the class name \n  } \n} \n\n// Call the static method `getSpecies` on the `Person` class and log the result \nconsole.log(Person.getSpecies()); // Output: Humans",Cs=e(co),po="// Define a class named `Person` \nclass Person { \n  // Declare a private-like field `_name` to store the person's name \n  _name; \n  \n  // Constructor to initialize a new instance of `Person` with a `name` \n  constructor(name) { \n    this._name = name; // Set the private-like field `_name` to the provided `name` \n  } \n  \n  // Getter for `name` that allows reading the private-like `_name` field \n  get name() { \n    return this._name; // Return the value of `_name` \n  } \n  \n  // Setter for `name` that allows writing to the private-like `_name` field \n  set name(value) { \n    this._name = value; // Set the value of `_name` to the new `value` \n  } \n} \n\n// Create a new instance of `Person` named `bob` with the name 'Bob' \nconst bob = new Person('Bob'); \nconsole.log(bob.name);  // Use the getter to output: Bob \n\n// Change `bob.name` to 'Robert' using the setter \nbob.name = 'Robert'; \nconsole.log(bob.name);  // Use the getter again to output: Robert",Es=e(po),mo="// Define a class named `Person` \nclass Person { \n  // Declare a private field `#secret` initialized with a string \n  #secret = 'I have a secret.'; \n  \n  // Define a private method `#privateMethod` that uses the private field `#secret` \n  #privateMethod() {  \n    // Return a string that incorporates the private field `#secret` \n    return `The secret is: ${this.#secret}`; \n  } \n  \n  // Define a public method `revealSecret` that calls the private method `#privateMethod` \n  revealSecret() {  \n    // Call and return the result of the private method `#privateMethod` \n    return this.#privateMethod(); // Calling the private method  \n  }  \n}  \n\n// Create an instance of `Person` named `alice` \nconst alice = new Person();  \n// Call the public method `revealSecret` on `alice` and log the output \nconsole.log(alice.revealSecret()); // Output the result of the private method  \n// Attempting to access the private field `#secret` directly outside the class body will result in a `SyntaxError` \n// console.log(alice.#secret); // Syntax Error: Private field '#secret' must be declared in an enclosing class",ks=e(mo),Js="class Vehicle {\n  // Class body goes here\n}\n\nclass Car extends Vehicle {\n  // Class body goes here\n}",As="class Car extends Vehicle {\n  ...\n\n  constructor(...) {\n    super(...); // Call the parent's constructor\n    ...\n  }\n\n  ...\n}",go="// Define a class named `Vehicle` \nclass Vehicle { \n  // Constructor that initializes a new instance of `Vehicle` with a `brand` \n  constructor(brand) { \n    this.brand = brand; // Assign the `brand` argument to the `brand` field \n  } \n  \n  // Define a method `start` to simulate starting the vehicle \n  start() { \n    // Return a message indicating the vehicle is starting, including its brand \n    return `Starting the ${this.brand}`; \n  } \n}",Is="// Define a subclass `Car` that inherits from the `Vehicle` class \nclass Car extends Vehicle { \n  // Constructor that initializes a new instance of `Car` with `brand` and `model` \n  constructor(brand, model) { \n    super(brand); // Call the parent class `Vehicle` constructor with `brand` \n    this.model = model; // Assign the `model` argument to the `model` field \n  } \n  \n  // Define a method `display` to show information about the car \n  display() { \n    // Return a message indicating the brand and model of the car \n    return `This is a ${this.brand} ${this.model}`; \n  } \n}",_o="// Define a subclass `Car` that inherits from the `Vehicle` class \nclass Car extends Vehicle { \n  // Constructor that initializes a new instance of `Car` with `brand` and `model` \n  constructor(brand, model) { \n    super(brand); // Call the parent class `Vehicle` constructor with `brand` \n    this.model = model; // Assign the `model` argument to the `model` field \n  } \n  \n  // Define a method `display` to show information about the car \n  display() { \n    // Return a message indicating the brand and model of the car \n    return `This is a ${this.brand} ${this.model}`; \n  } \n  \n  // Override the `start` method to add custom behavior for `Car` \n  start() { \n    // Call the parent's `start` method and add additional text specific to `Car` \n    return `${super.start()}. The ${this.model} is ready to go!`; \n  } \n}",ho="// Create a new instance of the `Car` class with 'Toyota' as the `brand` and 'Corolla' as the `model` \nconst myCar = new Car('Toyota', 'Corolla'); \n\n// Call the `display` method on `myCar` to output a description of the car \nconsole.log(myCar.display()); // Output: This is a Toyota Corolla \n\n// Call the `start` method on `myCar` to simulate starting the car and append additional information \nconsole.log(myCar.start()); // Output: Starting the Toyota. The Corolla is ready to go!",Ds=e(`${go} ${_o} ${ho}`),xo="let myObject = new Object();\nmyObject.name = 'Alice';\nmyObject.age = 30;\n\n// Alternatively, using object literal syntax\nlet myObjectLiteral = {\n    name: 'Alice',\n    age: 30\n};\n\nconsole.log('Created by constructor:', myObject);\nconsole.log('Created by literal:', myObject);",Ps=e(xo),fo="let myObject = Object();  // Equivalent to let obj = new Object();\nmyObject.name = 'Alice';\nmyObject.age = 30;\n\nconsole.log('Created by calling the constructor as a function:', myObject);",Ms=e(fo),yo="let myArray = new Array('apple', 'banana', 'cherry');\n\n// Alternatively, using array literal syntax\nlet myArrayLiteral = ['apple', 'banana', 'cherry'];\n\nconsole.log('Created by constructor:', myArray);\nconsole.log('Created by literal:', myArrayLiteral);",Hs=e(yo),bo="let myArray = Array('apple', 'banana', 'cherry');  // Equivalent to let arr = new Array('apple', 'banana', 'cherry');\nconsole.log('Created by calling the constructor as a function:', myArray);",Ns=e(bo),jo="let myString = new String('Hello world');\n\n// Using valueOf method to get string primitive\nlet myStringPrimitive = myString.valueOf();\n\n// Operations on a string object returns a string primitive\nlet myStringResult = myStringPrimitive.concat('!');\n\n// It's generally recommended to use string literals\nlet myStringLiteral = 'Hello world';\n\nconsole.log('Created by constructor:', myStringPrimitive); // Output: Hello world\nconsole.log('Type of concatenation of string objects:', typeof myStringResult); // Output: string\nconsole.log('Created by literal:', myStringLiteral); // Output: Hello world",Rs=e(jo),vo="let stringFromNumber = String(123);  // Converts the number 123 to a string '123'\nlet stringFromBoolean = String(true);  // Converts the boolean value true to a string 'true'\n\nconsole.log('Created by calling the constructor as a function:', stringFromNumber); // Output: 123\nconsole.log('Created by calling the constructor as a function:', stringFromBoolean); // Output: true\nconsole.log('Type of created string:', typeof stringFromNumber); // Output: string",Us=e(vo),wo="let myNumber = new Number(123);\n\n// Using valueOf method to get number primitive\nlet myNumberPrimitive = myNumber.valueOf();\n\n// Operations on a number object returns a number primitive\nlet myNumberResult = myNumberPrimitive + new Number(456);\n\n// Using number literal is preferred\nlet myNumberLiteral = 123;\n\nconsole.log('Created by constructor:', myNumberPrimitive); // Output: 123\nconsole.log('Type of sum of 2 number objects:', typeof myNumberResult); // Output: 579\nconsole.log('Created by literal:', myNumberLiteral); // Output: 123",qs=e(wo),So="let numberFromString = Number('123');  // Converts the string '123' to the number 123\nlet numberFromBoolean = Number(false);  // Converts the boolean value false to the number 0\n\nconsole.log('Created by calling the constructor as a function:', numberFromString); // Output: 123\nconsole.log('Created by calling the constructor as a function:', numberFromBoolean); // Output: 0\nconsole.log('Type of created number:', typeof numberFromString); // Output: number",zs=e(So),Lo="let myBoolean = new Boolean(true);\n\n// Using valueOf method to get boolean primitive\nlet myBooleanPrimitive = myBoolean.valueOf();\n\n// Using boolean literal is preferred\nlet myBooleanLiteral = true;\n\nconsole.log('Created by constructor:', myBooleanPrimitive); // Output: true\nconsole.log('Created by literal:', myBooleanLiteral); // Output: true",Bs=e(Lo),To="let boolFromNumber = Boolean(1);  // Converts 1 to true\n\nconsole.log('Created by calling the constructor as a function:', boolFromNumber); // Output: true\nconsole.log('Type of created boolean value:', typeof boolFromNumber); // Output: boolean",Fs=e(To),Oo="let sum = new Function('a', 'b', 'return a + b');\n\n// Typically, function declaration or expression syntax is used instead\nlet sumLiteral = function(a, b) {\n    return a + b;\n};\n\nconsole.log('Created by constructor:', sum(2, 6)); // 8\nconsole.log('Using function declaration:',sumLiteral(2, 6)); // 8",Ws=e(Oo),Co="let sum = Function('a', 'b', 'return a + b');  // Equivalent to new Function('a', 'b', 'return a + b');\n\nconsole.log('Created by calling the constructor as a function:', sum(2, 6)); // Output: 8\nconsole.log('Type of created function:', typeof sum); // Output: function (Note: In JavaScript, functions are objects)",Vs=e(Co),Eo="let now = new Date();\nconsole.log(now); // Current date and time",$s=e(Eo),ko="let now = Date();  // Return a string representing the current date and time\n\nconsole.log('Created by calling the constructor as a function:', now); // Output: 8\nconsole.log('Type of created date:', typeof now); // Output: string",Ys=e(ko),Jo="let regex = new RegExp('\\\\b\\\\w+\\\\b');\n\n// Using regular expression literal is preferred\nlet regexLiteral = /\\b\\w+\\b/;\n\nconsole.log('Created by constructor:', regex); // Output: /\\b\\w+\\b/\nconsole.log('Created by literal:', regexLiteral); // Output: /\\b\\w+\\b/",Gs=e(Jo),Ao="let regex = RegExp('\\\\b\\\\w+\\\\b');  // Equivalent to new RegExp('\\b\\w+\\b');\n\nconsole.log('Created by calling the constructor as a function:', regex); // Output: /\\b\\w+\\b/\nconsole.log('Type of created regular expression:', typeof regex); // Output: object",Xs=e(Ao),Ks="let element = document.getElementById('elementId');",Qs="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by ID Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by ID Example</h1>\n  <div id=\"elementId\">This is the selected element.</div>\n  <br/>\n\n  <script>\n    let element = document.getElementById('elementId');\n\n    console.log('This is the inner text of the selected element: ' + element.innerText); // innerText property will be discussed below\n  <\/script>\n</body>\n</html>",Zs="let elements = document.getElementsByClassName('className');",ei='<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by Class Name Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Class Name Example</h1>\n  <div class="className">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByClassName(\'className\');\n\n    for (let i = 0; i < elements.length; i++) {\n      console.log(\'This is the selected element: \' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>',ti="let elements = document.getElementsByTagName('tagName');",oi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by Tag Name Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Tag Name Example</h1>\n  <div>Element 1</div>\n  <p>Element 2</p>\n  <span>Element 3</span>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByTagName('div');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",li="let element = document.querySelector('selector');\nlet elements = document.querySelectorAll('selector');",ni="<!DOCTYPE html>\n<html>\n<head>\n  <title>Query Selector Examples</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id=\"elementId\">Element 1</div>\n  <div class=\"className\">Element 2</div>\n  <div class=\"className\">Element 3</div>\n  <br/>\n\n  <script>\n    // JavaScript code\n    let element = document.querySelector('#elementId');\n\n    console.log('This is the selected element by id: ' + element.innerText);\n\n    let elements = document.querySelectorAll('.className');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element by class name: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",ai="element.innerHTML = 'New HTML content';\nelement.textContent = 'New text content';",si="<!DOCTYPE html>\n<html>\n<head>\n  <title>Modify Element Content Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <h1 id=\"elementId\">Initial Content</h1>\n  <p>Some paragraph with initial content</p>\n\n  <script>\n    let element = document.getElementById('elementId');\n    element.innerHTML = 'New HTML content';\n\n    let paragraph = document.querySelector('p');\n    paragraph.textContent = 'New text content';\n  <\/script>\n</body>\n</html>",ii="let value = element.getAttribute('attributeName');\nelement.setAttribute('attributeName', 'attributeValue');",ri="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get and Set Attribute Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <img id=\"myImage\" src=\"assets/images/cute_cat.jpg\" alt=\"My Image\">\n  <br/>\n\n  <script>\n    // JavaScript code\n    let element = document.getElementById('myImage');\n\n    // Get the value of the 'src' attribute\n    let value = element.getAttribute('src');\n    console.log(value);\n\n    // Set the value of the 'alt' attribute\n    element.setAttribute('alt', 'New Alt Text');\n  <\/script>\n</body>\n</html>",ui="element.style.property = 'value';",ci="<!DOCTYPE html>\n<html>\n<head>\n  <title>Set CSS Property Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    let element = document.getElementById('myElement');\n    \n    // Set the CSS property values\n    element.style.color = 'blue';\n    element.style.backgroundColor = 'yellow';\n    element.style.fontSize = '20px';\n    element.style.padding = '10px';\n  <\/script>\n</body>\n</html>",di="element.classList.add('className');\nelement.classList.remove('className');",pi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Class Manipulation on Hover Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <style>\n    .highlight {\n      background-color: yellow;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    let element = document.getElementById('myElement');\n\n    // Add class on mouseover; addEventListener method will be discussed on next chapter\n    element.addEventListener('mouseover', function() {\n      element.classList.add('highlight');\n    });\n\n    // Remove class on mouseout\n    element.addEventListener('mouseout', function() {\n      element.classList.remove('highlight');\n    });\n  <\/script>\n</body>\n</html>",mi="let newElement = document.createElement('tagName');\nlet newText = document.createTextNode('Text content');",gi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Create Element and Create Text Node Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div id=\"container\"></div>\n\n  <script>\n    let container = document.getElementById('container');\n\n    // Create a new element\n    let newElement = document.createElement('p');\n\n    // Create a text node\n    let newText = document.createTextNode('Text content');\n\n    // Append the text node to the new element\n    newElement.appendChild(newText);\n\n    // Append the new element to the container\n    container.appendChild(newElement);\n  <\/script>\n</body>\n</html>",_i="parentElement.appendChild(newElement);\nparentElement.removeChild(childElement);",hi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Append and Remove Child Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div id=\"parent\">\n    <p id=\"child\">Child Element</p>\n  </div>\n\n  <script>\n    // JavaScript code\n    let parentElement = document.getElementById('parent');\n    let childElement = document.getElementById('child');\n\n    // Create a new element\n    let newElement = document.createElement('span');\n    newElement.textContent = 'New Child Element';\n\n    // Append the new element to the parent\n    parentElement.appendChild(newElement);\n\n    // Remove the child element from the parent\n    parentElement.removeChild(childElement);\n  <\/script>\n</body>\n</html>",xi="element.addEventListener('eventName', eventHandler);",fi="function eventHandler(event) {\n  // Event handling code\n}",yi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Handler Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <button id=\"myButton\">Click Me</button>\n\n  <script>\n    function eventHandler(event) {\n      // Event handling code\n      alert('Button clicked!');\n    }\n\n    // Select the button element\n    let button = document.getElementById('myButton');\n\n    // Attach the event handler to the button's click event\n    button.addEventListener('click', eventHandler);\n  <\/script>\n</body>\n</html>",bi="// Event bubbling\nelement1.addEventListener('click', eventHandler);\n\n// Event capturing\nelement2.addEventListener('click', eventHandler, true);",ji="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling and Capturing Example</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n\n    div {\n      padding: 20px;\n      border: 1px solid black;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"outerDiv1\">\n    <h2>Bubbling:</h2>\n    <div id=\"innerDiv1\">Click Me!</div>\n  </div>\n\n  <div id=\"outerDiv2\">\n    <h2>Capturing:</h2>\n    <div id=\"innerDiv2\">Click Me!</div>\n  </div>\n</div>\n  <script>\n    function eventHandler(event) {\n      alert('Event handler triggered on:' + event.currentTarget.id);\n      // event.stopPropagation();\n    }\n\n    let innerDiv1 = document.getElementById('innerDiv1');\n    let outerDiv1 = document.getElementById('outerDiv1');\n    \n    let innerDiv2 = document.getElementById('innerDiv2');\n    let outerDiv2 = document.getElementById('outerDiv2');\n    \n    // Event bubbling\n    innerDiv1.addEventListener('click', eventHandler, false);\n    outerDiv1.addEventListener('click', eventHandler, false);\n\n    // Event capturing\n    innerDiv2.addEventListener('click', eventHandler, true);\n    outerDiv2.addEventListener('click', eventHandler, true);\n  <\/script>\n</body>\n</html>",vi="const listContainer = document.getElementById('listContainer');\n\nfunction handleItemClick(event) {\n  const target = event.target;\n\n  if (target.tagName === 'LI') {\n    // Toggle the 'selected' class on the clicked list item\n    target.classList.toggle('selected');\n  }\n}\n\n// Attach the event listener to the parent element (listContainer)\nlistContainer.addEventListener('click', handleItemClick);\n\n// Simulate dynamically adding more list items after a delay\nsetTimeout(() => {\n  const newItem = document.createElement('li');\n  newItem.textContent = 'Item 4';\n  listContainer.appendChild(newItem);\n}, 2000);",wi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Delegation Example</title>\n  <style>\n    :root {\n      font-size: 16px;\n    }\n\n    ul {\n      list-style: none;\n      padding: 0;\n    }\n\n    li {\n      cursor: pointer;\n    }\n\n    .selected {\n      background-color: yellow;\n    }\n  </style>\n</head>\n<body>\n  <ul id=\"listContainer\">\n    \x3c!-- Initial list items --\x3e\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n\n  <script>\n    const listContainer = document.getElementById('listContainer');\n\n    function handleItemClick(event) {\n      const target = event.target;\n\n      if (target.tagName === 'LI') {\n        // Toggle the 'selected' class on the clicked list item\n        target.classList.toggle('selected');\n      }\n    }\n\n    // Attach the event listener to the parent element (listContainer)\n    listContainer.addEventListener('click', handleItemClick);\n\n    // Simulate dynamically adding more list items after a delay\n    setTimeout(() => {\n      const newItem = document.createElement('li');\n      newItem.textContent = 'Item 4';\n      listContainer.appendChild(newItem);\n    }, 2000);\n  <\/script>\n</body>\n</html>",Si="element.removeEventListener('eventName', eventHandler);",Li="<!DOCTYPE html>\n<html>\n<head>\n  <title>Remove Event Listener Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <button id=\"myButton\">Click Me</button>\n\n  <script>\n    function eventHandler() {\n      alert('Button clicked!');\n    }\n\n    let button = document.getElementById('myButton');\n\n    // Attach the event handler to the button's click event\n    button.addEventListener('click', eventHandler);\n\n    // Remove the event handler after 3 seconds\n    setTimeout(() => {\n      button.removeEventListener('click', eventHandler);\n      alert('Event handler removed!');\n    }, 3000);\n  <\/script>\n</body>\n</html>",Ti='<button onclick="eventHandler(event)">Click me</button>',Oi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Inline Event Handling Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <button onclick=\"eventHandler()\">Click me</button>\n\n  <script>\n    function eventHandler() {\n      alert('Button clicked!');\n    }\n  <\/script>\n</body>\n</html>",Ci="// Fetch data from the server\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => {\n    // DOM manipulation\n    const container = document.getElementById('data-container');\n\n    // Create a new list element for each data item\n    data.forEach(item => {\n      const listItem = document.createElement('li');\n      listItem.textContent = item.name;\n      container.appendChild(listItem);\n    });\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Ei="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch API Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <ul id=\"data-container\"></ul>\n\n  <script>\n    fetch('assets/data/json/list.json')\n      .then(response => response.json())\n      .then(data => {\n        const container = document.getElementById('data-container');\n\n        // Create a new list element for each data item\n        data.forEach(item => {\n          const listItem = document.createElement('li');\n          listItem.textContent = item.name;\n          container.appendChild(listItem);\n        });\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",ki="function callbackFunction(result) {\n  // Code to be executed when the callback is invoked\n}\n\n// Passing callbackFunction as a callback to another function\nsomeFunction(callbackFunction);",Ji="<!DOCTYPE html>\n<html>\n<head>\n  <title>Javascript Callback Function Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function called 'greet' with parameters 'name' and 'callback'\n    function greet(name, callback) {\n      const message = 'Hello, ' + name + '!';\n    \n      // Call the 'callback' function and pass the 'message' as an argument\n      callback(message);\n    }\n    \n    function displayMessage(message) {\n      console.log(message);\n    }\n    \n    // Call the 'greet' function with arguments 'John' as the name and 'displayMessage' as the callback\n    greet('John', displayMessage);\n  <\/script>\n</body>\n</html>",Ai="// Asynchronous function that simulates making an API request\nfunction fetchDataFromAPI(callback) {\n  // Simulating API request delay with setTimeout\n  setTimeout(() => {\n    const data = ['John', 'Jane', 'Alice'];\n    callback(data);\n  }, 2000); // Simulate 2 seconds delay\n}\n\n// Callback function to handle the fetched data\nfunction handleData(data) {\n  console.log(data);\n}",Ii="<!DOCTYPE html>\n<html>\n<head>\n  <title>Asynchronous Callback Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Asynchronous function that simulates making an API request\n    function fetchDataFromAPI(callback) {\n      // Simulating API request delay with setTimeout\n      setTimeout(() => {\n        const data = ['John', 'Jane', 'Alice'];\n        callback(data);\n      }, 2000); // Simulate 2 seconds delay\n    }\n\n    // Callback function to handle the fetched data\n    function handleData(data) {\n      console.log(data);\n    }\n\n    fetchDataFromAPI(handleData);\n  <\/script>\n</body>\n</html>",Di="function fetchData() {\n  return new Promise(function(resolve, reject) {\n    // Simulating an asynchronous operation with setTimeout\n    setTimeout(function() {\n      // Simulating a successful response\n      const data = { message: 'Data successfully fetched!' };\n\n      // Resolve the promise with the data\n      resolve(data);\n      \n      // Simulating an error scenario\n      // reject(new Error('Failed to fetch data!'));\n    }, 2000); // Wait for 2 seconds\n  });\n}",Pi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Creating Promise Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function fetchData() {\n      return new Promise(function(resolve, reject) {\n        // Simulating an asynchronous operation with setTimeout\n        setTimeout(function() {\n          // Simulating a successful response\n          const data = { message: 'Data successfully fetched!' };\n    \n          // Resolve the promise with the data\n          resolve(data);\n    \n          // Simulating an error scenario\n          // reject(new Error('Failed to fetch data!'));\n        }, 2000); // Wait for 2 seconds\n      });\n    }\n    \n    // Using the fetchData() function and handling the Promise\n    fetchData()\n      .then(function(data) {\n        console.log(data.message); // Output: Data successfully fetched!\n      })\n      .catch(function(error) {\n        console.error(error.message); // If the error scenario is uncommented, this will output: Failed to fetch data!\n      });\n  <\/script>\n</body>\n</html>",Mi="promise\n  .then(result => {\n    // Process the result\n    return transformedResult;\n  })\n  .then(transformedResult => {\n    // Process the transformed result\n  })\n  .catch(error => {\n    // Handle any errors along the chain\n  });",Hi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Chaining Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // A function that returns a Promise to simulate an asynchronous operation\n    function fetchData() {\n      return new Promise(function(resolve) {\n        // Simulating data fetching with setTimeout\n        setTimeout(function() {\n          const data = [1, 2, 3, 4, 5];\n          resolve(data);\n        }, 1000);\n      });\n    }\n    \n    // Function to process the data and return a new Promise with the transformed result\n    function processData(data) {\n      return new Promise(function(resolve) {\n        // Simulating processing with setTimeout\n        setTimeout(function() {\n          const transformedResult = data.map((item) => item * 2);\n          resolve(transformedResult);\n        }, 1500);\n      });\n    }\n    \n    // Function to further process the transformed result and log the final output\n    function processTransformedData(transformedData) {\n      console.log('Final result:', transformedData.reduce((sum, item) => sum + item, 0));\n    }\n    \n    // Chain the Promises together\n    fetchData()\n      .then((result) => {\n        // Process the result and return a new Promise with the transformed result\n        return processData(result);\n      })\n      .then((transformedResult) => {\n        // Process the transformed result\n        processTransformedData(transformedResult);\n      })\n      .catch((error) => {\n        // Handle any errors along the chain\n        console.error('Error occurred:', error);\n      });\n  <\/script>\n</body>\n</html>",Ni="async function fetchData() {\n  const response = await fetch('assets/data/json/hello.json');\n  const data = response.json();\n  return data;\n}",Ri="<!DOCTYPE html>\n<html>\n<head>\n  <title>Async/Await Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    async function fetchData() {\n      const response = await fetch('assets/data/json/hello.json');\n      const data = response.json();\n      return data;\n    }\n\n    fetchData().then(data => {\n      console.log(data.hello);\n    });\n  <\/script>\n</body>\n</html>",Ui="async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = response.json();\n  return data;\n}\n\nfetchData()\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });",qi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Async/Await Error Handling Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    async function fetchData() {\n      const response = await fetch('https://api.example.com/data');\n      const data = response.json();\n      return data;\n    }\n\n    fetchData()\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  <\/script>\n</body>\n</html>",zi="// Adding an event listener to a DOM element for 'click' event\ndocument.getElementById('myButton').addEventListener('click', function() {\n  alert('Button Clicked!');\n});",Bi="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event-Driven Programming</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <button id=\"myButton\">Click Me!</button>\n  <script>\n    // Adding an event listener to the button element for 'click' event\n    document.getElementById('myButton').addEventListener('click', function() {\n      alert('Button Clicked!');\n    });\n  <\/script>\n</body>\n</html>",Fi="let title = window.document.title; // Gets the title of the document\nconsole.log(title); // Output the title of the current web page",Wi='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html {\n      font-size: 16px;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    let title = window.document.title;\n    console.log(title); // Output: My Webpage (Note: \'My Webpage\' was specified in title tag)\n  <\/script>\n</body>\n</html>',Io="let width = window.innerWidth; // Gets the width of the viewport in pixels\nlet height = window.innerHeight; // Gets the height of the viewport in pixels\nconsole.log(width, height) // Output width and height of the viewport in pixels",Vi=e(Io),$i="let frames = window.frames; // Access all the iframes in the document",Yi='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n    iframe { \n      height: 10px;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <iframe></iframe>\n  <iframe></iframe>\n  <script>\n    let frames = window.frames;\n    console.log(frames.length); // Output: 2\n  <\/script>\n</body>\n</html>',Gi="let newWindow = window.open('https://www.example.com');\nwindow.close(); // Closes the current window",Xi='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n<script>\n  let newWindow;\n\n  function onOpenWindow() {\n    newWindow = window.open(\'assets/webpages/large-webpage.html\', \'newWindow\', \'width=200, height=150, left=100, top=150\');\n  }\n\n  function onOpenWindow() {\n    newWindow.close();\n  }\n<\/script>\n<button onclick="onOpenWindow()">Open Window</button>\n<br />\n<button onclick="onOpenWindow()">Close Window</button>\n</body>\n</html>',Ki="window.scrollTo(0, 300); // Scrolls the window to coordinates (0, 300)\nwindow.scrollBy(0, 200); // Scrolls the window 200 pixels down from the current position",Qi='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n    div {\n      width: 300px;\n    }\n    iframe {\n      border-width: 0;\n      height: 800px;\n      width: 300px;\n      overflow-y: hidden;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    function onScrollTo() {\n      window.scrollTo(0, 300);\n    }\n\n    function onScrollBy() {\n      window.scrollBy(0, 200);\n    }\n  <\/script>\n  <div>\n    <button onclick="onScrollTo()">Srcoll Window Using <strong>window.scrollTo()</strong></button>\n    <br />\n    <button onclick="onScrollBy()">Srcoll Window Using <strong>window.scrollBy()</strong></button>\n    <iframe src="assets/webpages/large-webpage.html"></iframe>\n  <div>\n</body>\n</html>',Zi="// Creating an alert dialog\nalert('This is an alert dialog box!');\n\n// Creating a confirm dialog\nlet userResponse = confirm('Do you really want to proceed?');\nif (userResponse) {\n    console.log('User clicked OK!');\n} else {\n    console.log('User clicked Cancel!');\n}\n\n// Creating a propmt dialog\nlet userName = prompt('Please enter your name:', 'John Doe');\nif (userName != null) {\n    console.log('Hello, ' + userName + '!');\n}",er="<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function onAlert() {\n      window.alert('This is an alert dialog box!');\n    }\n\n    function onPrompt() {\n      let userName = window.prompt('Please enter your name:', 'John Doe');\n      if (userName != null) {\n          console.log('Hello, ' + userName + '!');\n      }\n    }\n\n    function onConfirm() {\n      let userResponse = window.confirm('Do you really want to proceed?');\n      if (userResponse) {\n          console.log('User clicked OK!');\n      } else {\n          console.log('User clicked Cancel!');\n      }\n    }\n  <\/script>\n  <div>\n    <button onclick=\"onAlert()\">Creating an Alert Dialog Using <strong>window.alert()</strong></button>\n    <br />\n    <button onclick=\"onPrompt()\">Creating a ConFirm Dialog Using <strong>window.prompt()</strong></button>\n    <br />\n    <button onclick=\"onConfirm()\">Creating a Prompt Dialog Using <strong>window.confirm()</strong></button>\n  <div>\n</body>\n</html>",tr="// Creating setTimeout\nlet timeoutID = setTimeout(() => {\n  console.log('This message is shown after 3 seconds');\n}, 3000);\n\n// Clearing setTimeout\nclearTimeout(timeoutID);\n\n// Creating setInterval\nlet intervalID = setInterval(() => {\n  console.log('This message is shown every 2 seconds');\n}, 2000);\n\n// Clearing setInterval\nclearInterval(intervalID);",or='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n    button {\n      cursor: pointer;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    let timeoutID;\n\n    function onSetTimeout() {\n      timeoutID = window.setTimeout(() => {\n        console.log(\'This message is shown after 3 seconds\');\n      }, 3000);\n    }\n\n    function onClearTimeout() {\n      if(timeoutID) {\n        window.clearTimeout(timeoutID);\n        timeoutID = null;\n        console.log(\'The setTimeout is cleared\');\n      }\n    }\n\n    let intervalID;\n\n    function onSetInterval() {\n      intervalID = window.setInterval(() => {\n        console.log(\'This message is shown every 2 seconds\');\n      }, 2000);\n    }\n\n    function onClearInterval() {\n      if(intervalID) {\n        window.clearInterval(intervalID);\n        intervalID = null;\n        console.log(\'The interval is cleared\');\n      }\n    }\n  <\/script>\n  <div>\n    <button onclick="onSetTimeout()">Creating Timeout Using <strong>window.setTimeout()</strong></button>\n    <br />\n    <button onclick="onClearTimeout()">Clearing Timeout Using <strong>window.clearTimeout()</strong></button>\n    <br />\n    <button onclick="onSetInterval()">Creating Interval Using <strong>window.setInterval()</strong></button>\n    <br />\n    <button onclick="onClearInterval()">Clearing Interval Using <strong>window.clearInterval()</strong></button>\n  <div>\n</body>\n</html>',Do='var globalVar = "I\'m a global variable";\nconsole.log(window.globalVar); // Accesses the global variable',lr=e(Do),Po="window.addEventListener('resize', () => {\n  console.log('Window size changed');\n});",nr=e(Po),Mo="let screenWidth = screen.width;\nlet screenHeight = screen.height;\nconsole.log(screenWidth, screenHeight); // Output depend on device",ar=e(Mo),Ho="let availableScreenWidth = screen.availWidth;\nlet availableScreenHeight = screen.availHeight;\nconsole.log(availableScreenWidth, availableScreenHeight) // Output depend on device",sr=e(Ho),No="let colorDepth = screen.colorDepth;\nconsole.log(colorDepth); // Output depends on device",ir=e(No),Ro="let pixelDepth = screen.pixelDepth;\nconsole.log(pixelDepth); // Output depends on device",rr=e(Ro),Uo="if (screen.width <= 480) {\n  console.log('Load mobile-specific content or layout');\n} else {\n  console.log('Load desktop-specific content or layout');\n}",ur=e(Uo),qo="if (screen.colorDepth > 24) {\n  console.log('Use high-quality images');\n} else {\n  console.log('Use standard-quality images');\n}",cr=e(qo),zo="window.open( \n  'assets/webpages/hello.html', \n  'newWindow', \n  `width=200, height=150, left=${(screen.availWidth-400)/2}, top=${(screen.availHeight-300)/2}` \n);",dr=e(zo),pr="let href = location.href;\nconsole.log(href); // Output the current URL",mr=e('location.href = "assets/webpages/location-href-example.html";'),gr="let protocol = location.protocol;\nconsole.log(protocol); // Output 'http:' or 'https:'",_r=e('location.href = "assets/webpages/location-protocol-example.html";'),hr="let host = location.host;\nconsole.log(host); // Output 'example.com:80', for instance",xr=e('location.href = "assets/webpages/location-host-example.html";'),fr="let hostname = location.hostname;\nconsole.log(hostname); // Output 'example.com'",yr=e('location.href = "assets/webpages/location-hostname-example.html";'),br="let port = location.port;\nconsole.log(port); // Output '80', for instance",jr=e('location.href = "assets/webpages/location-port-example.html";'),vr="let pathname = location.pathname;\nconsole.log(pathname); // Output '/path/'",wr=e('location.href = "assets/webpages/location-pathname-example.html";'),Sr="let search = location.search;\nconsole.log(search); // Output '?query=string', for instance",Lr=e('location.href = "assets/webpages/location-search-example.html?id=123";'),Tr="let hash = location.hash;\nconsole.log(hash); // Output '#section1', for instance",Or=e('location.href = "assets/webpages/location-hash-example.html#section/12";'),Cr='// Please refer to the reload example in "Use Cases"\nlocation.reload(); // Reloads the current page',Er="// Please refer to the redirect example in \"Use Cases\"\nlocation.replace('https://www.newsite.com'); // Redirects to newsite.com without adding a history entry",kr="// Please refer to the redirect example in \"Use Cases\"\nlocation.assign('https://www.newsite.com'); // Redirects to newsite.com and adds a history entry",Jr="location.href = 'https://www.newsite.com'; // Redirects the browser to newsite.com\nlocation.assign('https://www.newsite.com'); // Redirects to newsite.com and adds a history entry",Ar='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html { \n      font-size: 16px; \n    }\n  </style>\n</head>\n<body>\n  <script>\n    function onRedirectWithHref() {\n      location.href = \'assets/webpages/location-redirect-example.html\';\n    }\n\n    function onRedirectWithAssign() {\n      location.assign(\'assets/webpages/location-redirect-example.html\');\n    }\n  <\/script>\n  <button onclick="onRedirectWithHref()">Click to Redirect Using <strong>location.href</strong> Property</button>\n  <button onclick="onRedirectWithAssign()">Click to Redirect Using <strong>location.assign</strong> Method</button>\n</body>\n</html>',Ir="location.reload(); // Reloads the current page",Dr='<!DOCTYPE html>\n<html lang="en">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html {\n      font-size: 16px;\n    }\n  </style>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    function onReload() {\n      // Simulate loading a big webpage by delaying a second to reload\n      console.log(\'Loading ...\');\n      setTimeout(() => {\n        location.reload();\n      }, 1000);\n    }\n  <\/script>\n  <button onclick="onReload()">Click to Reload Using <strong>location.reload</strong> Method</button>\n</body>\n</html>',Pr="let protocol = location.protocol; // 'http:' or 'https:'\nlet host = location.host; // 'example.com:8080'\nlet hostname = location.hostname;  // 'example.com'\nlet port = location.port; // '8080'\nlet pathname = location.pathname; // '/path/page'\nlet search = location.search; // '?query=string'\nlet hash = location.hash; // '#section'",Mr="let params = new URLSearchParams(location.search);\nlet id = params.get('id'); // Assuming URL is '...?id=123'\nconsole.log(id); // Output: 123",Hr=e('location.href = "assets/webpages/location-query-string-example.html?id=123";'),Nr="window.onhashchange = function() { \n  console.log(`New hash: ${location.hash}`); \n};",Rr="<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>My Webpage</title>\n  <style>\n    html {\n      font-size: 16px;\n    }\n  </style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function onChangeHash() {\n      location.hash = 'section/1';\n    }\n\n    window.addEventListener('hashchange', () => {\n      console.log('Current hash:', window.location.hash);\n    });\n  <\/script>\n  <button onclick=\"onChangeHash()\">Click to Change URL Hash Using <strong>location.hash</strong> Property</button>\n</body>\n</html>",Bo="let length = window.history.length;\nconsole.log(length); // Output the number of pages in the session history",Ur=e(Bo),qr="history.back(); // Navigates to the previous page",zr="history.forward(); // Navigates to the next page",Br="history.go(-1); // Equivalent to history.back()\nhistory.go(1); // Equivalent to history.forward()\nhistory.go(0); // Reloads the current page",Fr="history.pushState({ page: 'newpage' }, 'New Page', 'newpage.html');",Wr="history.replaceState({ page: 'anotherpage' }, 'Another Page', 'anotherpage.html');",Vr="// When a new content is loaded\nhistory.pushState({contentID: 'content123'}, 'Content Title', '/content/123');",$r="window.onpopstate = function(event) {\n  if(event.state) {\n    loadContent(event.state.contentID); // Function to load content based on state\n  }\n};",Yr="history.replaceState(null, null, '/newpage');",Fo="let appName = navigator.appName;\nconsole.log(appName); // e.g., 'Netscape' for modern browsers",Gr=e(Fo),Wo="let appVersion = navigator.appVersion;\nconsole.log(appVersion); // e.g., '5.0 (Windows)'",Xr=e(Wo),Vo="let userAgent = navigator.userAgent;\nconsole.log(userAgent); // e.g., 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)...'",Kr=e(Vo),$o="let platform = navigator.platform;\nconsole.log(platform); // e.g., 'Win32'",Qr=e($o),Yo="let language = navigator.language;\nconsole.log(language); // e.g., 'en-US'",Zr=e(Yo),Go="let languages = navigator.languages;\nconsole.log(languages); // e.g., ['en-US', 'en', 'fr']",eu=e(Go),Xo="let onLine = navigator.onLine;\nconsole.log(onLine); // true or false",tu=e(Xo),Ko="let cookieEnabled = navigator.cookieEnabled;\nconsole.log(cookieEnabled); // true or false",ou=e(Ko),Qo="navigator.geolocation.getCurrentPosition(position => {\n  console.log(position.coords.latitude, position.coords.longitude);\n});",lu=e(Qo),Zo="if (navigator.onLine) {\n  console.log('Browser is online');\n} else {\n  console.log('Browser is offline');\n}",nu=e(Zo),el="let preferredLanguage = navigator.languages ? navigator.languages[0] : navigator.language;\nconsole.log(preferredLanguage); // e.g., 'en-US'",au=e(el),tl="if (/Mobi|Android/i.test(navigator.userAgent)) {\n  console.log('Mobile environment detected');\n} else {\n  console.log('Mobile environment is not detected');\n}",su=e(tl),ol="if ('geolocation' in navigator) { \n  navigator.geolocation.getCurrentPosition(position => { \n    console.log(`Latitude: ${position.coords.latitude}, Longitude: ${position.coords.longitude}`); \n  }); \n}",iu=e(ol),ru="",uu="",cu="",du="navigator.geolocation.getCurrentPosition(\n  position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    // Do something with the coordinates\n  },\n  error => {\n    console.error('Error:', error.message);\n  }\n);",pu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Geolocation API Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          console.log(latitude, longitude);\n        },\n        error => {\n          console.error('Error:', error.message);\n        }\n      );\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n    }\n  <\/script>\n</body>\n</html>",mu="// Storing data\nlocalStorage.setItem('key', 'value');\n\n// Retrieving data\nconst data = localStorage.getItem('key');\n\n// Removing data\nlocalStorage.removeItem('key');",gu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Storage API Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Storing data\n    localStorage.setItem('key', 'Hello World!');\n    \n    // Retrieving data\n    const data = localStorage.getItem('key');\n    console.log(data);\n    \n    // Removing data\n    localStorage.removeItem('key');\n  <\/script>\n</body>\n</html>",_u="const copyButton = document.getElementById('copyButton');\nconst textToCopy = 'Hello, world!';\n\ncopyButton.addEventListener('click', async () => {\n  try {\n    await navigator.clipboard.writeText(textToCopy);\n    console.log('Text copied to clipboard successfully!');\n  } catch (err) {\n    console.error('Failed to copy text:', err);\n  }\n});",hu="const pasteButton = document.getElementById('pasteButton');\nconst outputElement = document.getElementById('output');\n\npasteButton.addEventListener('click', async () => {\n  try {\n    const textFromClipboard = await navigator.clipboard.readText();\n    outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n  } catch (err) {\n    console.error('Failed to read text from clipboard:', err);\n  }\n});",xu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Browser Clipboard API Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <input type=\"text\" id=\"inputText\" placeholder=\"Enter text to copy\">\n  <button id=\"copyButton\">Copy to Clipboard</button>\n  <button id=\"pasteButton\">Paste from Clipboard</button>\n  <div id=\"output\"></div>\n\n  <script>\n    const inputText = document.getElementById('inputText');\n    const copyButton = document.getElementById('copyButton');\n    const pasteButton = document.getElementById('pasteButton');\n    const outputElement = document.getElementById('output');\n\n    copyButton.addEventListener('click', async () => {\n      const textToCopy = inputText.value;\n      try {\n        await navigator.clipboard.writeText(textToCopy);\n        console.log('Text copied to clipboard successfully!');\n      } catch (err) {\n        console.error('Failed to copy text:', err);\n      }\n    });\n\n    pasteButton.addEventListener('click', async () => {\n      try {\n        const textFromClipboard = await navigator.clipboard.readText();\n        outputElement.textContent = 'Text from clipboard: ' + textFromClipboard;\n      } catch (err) {\n        console.error('Failed to read text from clipboard:', err);\n      }\n    });\n  <\/script>\n</body>\n</html>",fu="const xhr = new XMLHttpRequest();",yu="xhr.open('GET', 'https://api.example.com/data', true);",bu="xhr.setRequestHeader('Content-Type', 'application/json');",ju="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n      const responseData = xhr.responseText;\n      // ...\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",vu="xhr.send();",wu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr = new XMLHttpRequest();\n\n    // Set up the AJAX request\n    xhr.open('GET', 'assets/data/json/hello.json', true); // true for asynchronous, false for synchronous\n    \n    // Set up request headers\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Handle the Response\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          // Request was successful, handle the response\n          const responseData = xhr.responseText;\n          console.log(xhr.responseText); // Output the response data\n        } else {\n          // Handle HTTP error\n          console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n        }\n      }\n    };\n\n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",Su="let xhr;\ntry {\n  xhr = new XMLHttpRequest();\n} catch (error) {\n  // Handle initialization error\n  console.error('XMLHttpRequest creation failed:', error);\n}",Lu="xhr.onerror = function() {\n  // Handle network error\n  console.error('Network error occurred:', xhr.status, xhr.statusText);\n};",Tu="xhr.onreadystatechange = function() {\n  if (xhr.readyState === XMLHttpRequest.DONE) {\n    if (xhr.status === 200) {\n      // Request was successful, handle the response\n    } else {\n      // Handle HTTP error\n      console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n    }\n  }\n};",Ou="xhr.timeout = 5000; // Set the timeout to 5 seconds\n\nxhr.ontimeout = function() {\n  // Handle timeout error\n  console.error('Request timed out');\n};",Cu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Error Handling Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr;\n    try {\n      xhr = new XMLHttpRequest();\n    } catch (error) {\n      // Handle initialization error\n      console.error('XMLHttpRequest creation failed:', error);\n    }\n\n    // Set up the AJAX request\n    xhr.open('GET', 'https://api.example.com/data', true); // true for asynchronous, false for synchronous\n    \n    // Set up request headers\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    // Handle the Response\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          // Request was successful, handle the response\n          const responseData = xhr.responseText;\n          console.log(xhr.responseText); // Output the response data\n        } else {\n          // Handle HTTP error\n          console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n        }\n      }\n    };\n\n    // Handle network error\n    xhr.onerror = function() {\n      console.error('Network error occurred:', xhr.status, xhr.statusText);\n    };\n\n    xhr.timeout = 5000; // Set the timeout to 5 seconds\n\n    // Handle timeout error\n    xhr.ontimeout = function() {\n      console.error('Request timed out');\n    };\n\n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",Eu="<div>\n  \x3c!-- The content will be updated here --\x3e\n  <h2 id=\"header\">Original header</h2>\n  <p id=\"paragraph\">Original paragraph</p>\n</div>\n\n<script>\n  // Create a new XMLHttpRequest object\n  const xhr = new XMLHttpRequest();\n\n  // Configure the AJAX request\n  xhr.open('GET', 'assets/data/json/content.json', true);\n\n  // Set up the response handling\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      if (xhr.status === 200) {\n        // Request was successful, handle the response\n        const data = JSON.parse(xhr.responseText);\n\n        // Update the content of h2 and p elements with the data from the JSON file\n        document.getElementById('header').innerText = data.title;\n        document.getElementById('paragraph').innerText = data.content;\n      }\n    }\n  };\n\n  // Send the AJAX request\n  xhr.send();\n<\/script>",ku="<!DOCTYPE html>\n<html>\n<head>\n  <title>AJAX Updating Web Page Content Example</title>\n  <style>:root {font-size: 16px;}</style>\n</head>\n<body>\n  <div>\n    \x3c!-- The content will be updated here --\x3e\n    <h2 id=\"header\">Original header</h2>\n    <p id=\"paragraph\">Original paragraph</p>\n  </div>\n\n  <button id=\"updateButton\">Update Content</button>\n\n  <script>\n    // Event listener to handle the button click\n    document.getElementById('updateButton').addEventListener('click', function() {\n      // Create a new XMLHttpRequest object\n      const xhr = new XMLHttpRequest();\n\n      // Configure the AJAX request\n      xhr.open('GET', 'assets/data/json/content.json', true);\n\n      // Set up the response handling\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            // Request was successful, handle the response\n            const data = JSON.parse(xhr.responseText);\n\n            // Update the content of h2 and p elements with the data from the JSON file\n            document.getElementById('header').innerText = data.title;\n            document.getElementById('paragraph').innerText = data.content;\n          } else {\n            // Handle HTTP error\n            console.error('HTTP error occurred:', xhr.status, xhr.statusText);\n          }\n        }\n      };\n\n      // Handle network errors\n      xhr.onerror = function() {\n        console.error('Network error occurred');\n      };\n\n      // Send the AJAX request\n      xhr.send();\n    });\n  <\/script>\n</body>\n</html>",Ju="fetch('https://api.example.com/data')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Au="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    fetch('assets/data/json/hello.json')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data.hello);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",Iu="fetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    // Additional headers if needed\n  },\n  body: JSON.stringify(data) // Request body as JSON\n})\n  .then(response => {\n    // Handle the response\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Du="fetch('https://api.example.com/data')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Pu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    fetch('assets/data/json/hello.js') // hello.js file doesn't exist\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data.hello);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",Mu="try {\n  // Code that might throw an error\n} catch (error) {\n  // Handle the error\n  console.error('Error:', error);\n} finally {\n  // Code to be executed regardless of whether an exception is thrown or caught\n}",Hu="<!DOCTYPE html>\n<html>\n<head>\n  <title>Try-Catch Example</title>\n  <style>:root {font-size: 16px;}</style>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    function handleError() {\n      try {\n        // Simulating code that might throw an error\n        throw new Error('Custom error message');\n      } catch (error) {\n        // Handle the error\n        console.error('Error: ' + error.message);\n      } finally {\n        console.log(''Finally' code is exexuted.')\n      }\n    }\n\n    handleError();\n  <\/script>\n</body>\n</html>"}}]);