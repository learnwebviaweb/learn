"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[60],{8060:(ce,u,t)=>{t.r(u),t.d(u,{RxjsBookModule:()=>W});var i={};t.r(i),t.d(i,{rxjs_1_1_1:()=>h,rxjs_1_1_2:()=>d,rxjs_1_1_3:()=>g,rxjs_1_1_4:()=>j,rxjs_1_1_5:()=>f,rxjs_1_1_6:()=>C,rxjs_2_2_1:()=>O,rxjs_2_2_2:()=>y,rxjs_2_2_3:()=>R,rxjs_2_2_4:()=>S,rxjs_2_2_5:()=>w,rxjs_2_2_6:()=>T,rxjs_2_2_7:()=>Y,rxjs_2_3_1:()=>B,rxjs_2_4_1:()=>J,rxjs_2_4_2:()=>Q,rxjs_2_4_3:()=>I,rxjs_2_4_4:()=>Z,rxjs_2_5_1:()=>k,rxjs_2_5_2:()=>M,rxjs_2_5_3:()=>H,rxjs_3_1_1:()=>A,x:()=>m});var l=t(6895),c=t(9299),e=t(4650),p=t(4214);let v=(()=>{class o{constructor(n){this.coreService=n}ngOnInit(){this.coreService.getRxjsBookData()}ngOnDestroy(){}}return o.\u0275fac=function(n){return new(n||o)(e.Y36(p.p))},o.\u0275cmp=e.Xpm({type:o,selectors:[["app-rxjs-book"]],decls:1,vars:0,template:function(n,s){1&n&&e._UZ(0,"router-outlet")},dependencies:[c.lC]}),o})();var x=t(9117);const m=100,h="node -v\nnpm -v",d="mkdir rxjs-tutorial\ncd rxjs-tutorial",g="npm init",j="npm install rxjs",f="// main.ts\n// Import RxJS\nimport { from } from 'rxjs';\n\n// Create an observable from an array\nconst numbers = from([1, 2, 3, 4, 5]);\n\n// Subscribe to the observable\nnumbers.subscribe(number => console.log(number));",C="node main.js",O="import { of } from 'rxjs';\n\n// Creating an Observable from individual values\nconst observable = of(1, 2, 3, 4, 5);\n\n// Subscribing to the Observable\nobservable.subscribe({\n  next: value => console.log(value),\n  complete: () => console.log('Observable complete')\n});",y="import { from } from 'rxjs';\n\nconst array = [1, 2, 3, 4, 5];\nconst observable = from(array);\n\nobservable.subscribe(value => console.log(value));",R="import { from } from 'rxjs';\n\nconst promise = fetch('https://api.example.com/data');\nconst observable = from(promise);\n\nobservable.subscribe(response => console.log(response));",S="import { fromEvent } from 'rxjs';\n\nconst button = document.querySelector('button');\nconst clickObservable = fromEvent(button, 'click');\n\nclickObservable.subscribe(event => console.log('Button clicked!'));",w="import { Observable } from 'rxjs';\n\nconst customObservable = new Observable(observer => {\n  observer.next(1);     // Emitting values\n  observer.next(2);\n  observer.complete();  // Completing the observable\n});\n\ncustomObservable.subscribe(\n  value => console.log(value),\n  error => console.error(error),\n  () => console.log('Observable completed')\n);",T="import { interval } from 'rxjs';\n\nconst intervalObservable = interval(1000); // Emit value every second\n\nintervalObservable.subscribe(value => console.log(value));",Y="import { scheduled, interval, queueScheduler } from 'rxjs'; \nimport { observeOn } from 'rxjs/operators'; \n\n// Create an Observable that emits values at 1-second intervals \nconst source = interval(1000); \n\n// Use the scheduled operator to change the scheduler to queueScheduler \nconst scheduledSource = scheduled([source], queueScheduler); \n\n// Subscribe to the scheduled Observable \nconst subscription = scheduledSource.subscribe(value => { \n  console.log(`Emitted value: ${value}`); \n}); \n\n// Unsubscribe after 5 seconds \nsetTimeout(() => { \n  subscription.unsubscribe(); \n  console.log('Subscription unsubscribed.'); \n}, 5000);",B="import { Observable } from 'rxjs';\n\n// Create an observable that emits values\nconst observable = new Observable(observer => {\n  observer.next(1);\n  observer.next(2);\n  observer.next(3);\n  observer.complete(); // Signal that the observable is completed\n});\n\n// Subscribe to the observable\nconst subscription = observable.subscribe(\n  value => console.log(value),     // Handle emitted values\n  error => console.error(error),   // Handle errors\n  () => console.log('Completed')   // Handle completion\n);\n\n// Later, when you're done with the observable, unsubscribe\nsubscription.unsubscribe();",J="const observable = new Observable(observer => {\n  const intervalHandle = setInterval(() => {\n    observer.next('Value');\n  }, 2000);\n\n  // Clean up when unsubscribing\n  return () => {\n    clearInterval(intervalHandle);\n  };\n});\n\nconst subscription = observable.subscribe(value => console.log(value));\n\n// Later, when you're done with the observable\nsubscription.unsubscribe();",Q="import { Observable } from 'rxjs';\n\nconst observables = [];\n\nfunction createObservable() {\n  const observable = new Observable(/* ... */);\n  const subscription = observable.subscribe(/* ... */);\n  observables.push(subscription);\n}\n\n// Later, when you're done with all observables\nfor (const subscription of observables) {\n  subscription.unsubscribe();\n}",I="import { Subscription, interval } from 'rxjs'; \n\n// Create a Subscription to manage multiple subscriptions \nconst parentSubscription = new Subscription(); \n\n// Create two child subscriptions \nconst subscription1 = interval(1000).subscribe(value => { \n  console.log(`Subscription 1: ${value}`); \n}); \n\nconst subscription2 = interval(1500).subscribe(value => { \n  console.log(`Subscription 2: ${value}`); \n}); \n\n// Add the child subscriptions to the parent Subscription \nparentSubscription.add(subscription1, subscription2); \n\n// Later, when you're done, unsubscribe from all subscriptions at once \nparentSubscription.unsubscribe(); \n\n// After unsubscribing, no further emissions are received from either subscription",Z="import { interval } from 'rxjs'; \nimport { take } from 'rxjs/operators'; \n\nconst observable = interval(1000); \n\nconst sub = observable.pipe( \n  take(5) // Automatically unsubscribes after receiving 5 values \n).subscribe(value => console.log(`Received value: ${value}`));",k="const observer = {\n  next: value => console.log('Next:', value),\n  error: error => console.error('Error:', error),\n  complete: () => console.log('Complete')\n};",M="import { Observable } from 'rxjs';\n\nconst observable = new Observable(observer => {\n  observer.next(1);\n  observer.next(2);\n  observer.complete();\n});\n\nobservable.subscribe(observer);",H="import { Observable } from 'rxjs';\n\nconst observable = new Observable(observer => {\n  observer.next(1);\n  observer.next(2);\n  observer.complete();\n});\n\nobservable.subscribe(\n  value => console.log('Next:', value),\n  error => console.error('Error:', error),\n  () => console.log('Complete')\n);",A="";var _=t(294),b=t(1481),N=t(3353),$=t(7913),F=t(5342);function U(o,r){if(1&o&&(e.TgZ(0,"h2",null,4),e._uU(2),e.qZA()),2&o){const n=e.oxw(2);e.xp6(2),e.AsE("",null==n.chapter?null:n.chapter.chid,". ",null==n.chapter?null:n.chapter.title,"")}}function D(o,r){if(1&o&&(e.ynx(0),e.YNc(1,U,3,2,"h2",1),e.BQk()),2&o){const n=e.oxw();e.xp6(1),e.Q6J("ngIf",null==n.chapter?null:n.chapter.chid)}}function E(o,r){if(1&o&&e._UZ(0,"p",8),2&o){const n=e.oxw().$implicit,s=e.oxw(3);e.Q6J("innerHTML",s.bypass(null==n?null:n.text),e.oJD)}}function L(o,r){if(1&o&&e._UZ(0,"p",8),2&o){const n=e.oxw().$implicit,s=e.oxw(3);e.Q6J("innerHTML",s.bypass(null==n?null:n.text),e.oJD)}}function z(o,r){if(1&o&&(e.TgZ(0,"p"),e._UZ(1,"app-code-viewer",9),e.qZA()),2&o){const n=e.oxw().$implicit,s=e.oxw(3);e.xp6(1),e.Q6J("lang","JS")("codeConfig",s.rectify(n.codeConfig))}}function X(o,r){if(1&o&&(e.ynx(0),e.YNc(1,E,1,1,"p",7),e.YNc(2,L,1,1,"p",7),e.YNc(3,z,2,2,"p",1),e.BQk()),2&o){const n=r.$implicit;e.xp6(1),e.Q6J("ngIf",!n.codeid&&!n.isShortCode),e.xp6(1),e.Q6J("ngIf",!n.codeid&&n.isShortCode),e.xp6(1),e.Q6J("ngIf",n.codeConfig)}}function V(o,r){if(1&o&&(e.ynx(0),e.TgZ(1,"h3",5,6),e._uU(3),e.qZA(),e.YNc(4,X,4,3,"ng-container",2),e.BQk()),2&o){const n=e.oxw().$implicit,s=e.oxw();e.xp6(1),e.cQ8("id","",null==s.chapter?null:s.chapter.category,"-ch-",null==s.chapter?null:s.chapter.chid,"-sec-",null==n?null:n.secid,""),e.xp6(2),e.hij(" ",n.subtitle," "),e.xp6(1),e.Q6J("ngForOf",null==n?null:n.paragraphs)}}function P(o,r){if(1&o&&(e.ynx(0),e.YNc(1,V,5,5,"ng-container",1),e.BQk()),2&o){const n=r.$implicit,s=e.oxw();e.xp6(1),e.Q6J("ngIf",n.secid===+s.secid)}}let a=(()=>{class o extends x.H{constructor(n,s,q,ee,oe,ne,re,se,te){super(n,s,q,ee,oe,ne,re,se,te),this.codeData=i}ngOnInit(){super.ngOnInit()}ngOnDestroy(){super.ngOnDestroy()}}return o.\u0275fac=function(n){return new(n||o)(e.Y36(_.X),e.Y36(b.h_),e.Y36(b.Dx),e.Y36(N.t4),e.Y36(b.H7),e.Y36(c.F0),e.Y36(c.gz),e.Y36(l.Ye),e.Y36(p.p))},o.\u0275cmp=e.Xpm({type:o,selectors:[["app-rxjs-chapter"]],features:[e.qOj],decls:5,vars:2,consts:[[1,"chapter-container"],[4,"ngIf"],[4,"ngFor","ngForOf"],[1,"navigator-container"],["h2",""],[3,"id"],["h3s",""],[3,"innerHTML",4,"ngIf"],[3,"innerHTML"],[3,"lang","codeConfig"]],template:function(n,s){1&n&&(e.TgZ(0,"div",0),e.YNc(1,D,2,1,"ng-container",1),e.YNc(2,P,2,1,"ng-container",2),e.TgZ(3,"div",3),e._UZ(4,"app-chapter-navigator"),e.qZA()()),2&n&&(e.xp6(1),e.Q6J("ngIf","1"===s.secid),e.xp6(1),e.Q6J("ngForOf",null==s.chapter?null:s.chapter.sections))},dependencies:[l.sg,l.O5,$.R,F.V],styles:[".chapter-container[_ngcontent-%COMP%]{margin:1rem}"]}),o})();const G=[{path:"",component:v,children:[{path:"chapter",component:a},{path:"chapter/:chid",component:a},{path:"chapter/:chid/section/:secid",component:a},{path:"**",component:a},{path:"",component:a}]}];let K=(()=>{class o{}return o.\u0275fac=function(n){return new(n||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[c.Bz.forChild(G),c.Bz]}),o})(),W=(()=>{class o{}return o.\u0275fac=function(n){return new(n||o)},o.\u0275mod=e.oAB({type:o}),o.\u0275inj=e.cJS({imports:[l.ez,K,_.I]}),o})()}}]);