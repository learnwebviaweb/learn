"use strict";(self.webpackChunkweb_building=self.webpackChunkweb_building||[]).push([[580],{7580:(Dn,u,r)=>{r.r(u),r.d(u,{JsBookModule:()=>bn});var c={};r.r(c),r.d(c,{js_2_2_1:()=>f,js_2_2_10:()=>w,js_2_2_11:()=>A,js_2_2_2:()=>b,js_2_2_3:()=>x,js_2_2_4:()=>E,js_2_2_5:()=>O,js_2_2_6:()=>v,js_2_2_7:()=>C,js_2_2_8:()=>T,js_2_2_9:()=>D,js_2_3_1:()=>P,js_2_3_10:()=>z,js_2_3_10_1:()=>V,js_2_3_11:()=>X,js_2_3_11_1:()=>Q,js_2_3_12:()=>Z,js_2_3_12_1:()=>K,js_2_3_13:()=>tt,js_2_3_13_1:()=>et,js_2_3_1_1:()=>k,js_2_3_2:()=>I,js_2_3_2_1:()=>S,js_2_3_3:()=>B,js_2_3_3_1:()=>N,js_2_3_4:()=>H,js_2_3_4_1:()=>Y,js_2_3_5:()=>J,js_2_3_5_1:()=>L,js_2_3_6:()=>q,js_2_3_6_1:()=>R,js_2_3_7:()=>F,js_2_3_7_1:()=>M,js_2_3_8:()=>G,js_2_3_8_1:()=>W,js_2_3_9:()=>U,js_2_3_9_1:()=>$,js_2_4_1:()=>st,js_2_4_10:()=>bt,js_2_4_10_1:()=>xt,js_2_4_11:()=>Et,js_2_4_11_1:()=>Ot,js_2_4_1_1:()=>nt,js_2_4_2:()=>ot,js_2_4_2_1:()=>rt,js_2_4_3:()=>at,js_2_4_3_1:()=>lt,js_2_4_4:()=>it,js_2_4_4_1:()=>ct,js_2_4_5:()=>ut,js_2_4_5_1:()=>dt,js_2_4_6:()=>_t,js_2_4_6_1:()=>mt,js_2_4_7:()=>pt,js_2_4_7_1:()=>ht,js_2_4_8:()=>gt,js_2_4_8_1:()=>yt,js_2_4_9:()=>jt,js_2_4_9_1:()=>ft,js_3_1_1:()=>vt,js_3_1_1_1:()=>Ct,js_3_1_2:()=>Tt,js_3_1_2_1:()=>Dt,js_3_1_3:()=>wt,js_3_1_3_1:()=>At,js_3_1_4:()=>Pt,js_3_1_4_1:()=>kt,js_3_1_5:()=>It,js_3_1_5_1:()=>St,js_3_1_6:()=>Bt,js_3_1_6_1:()=>Nt,js_3_1_7:()=>Ht,js_3_1_7_1:()=>Yt,js_3_2_1:()=>Jt,js_3_2_1_1:()=>Lt,js_3_2_2:()=>qt,js_3_2_2_1:()=>Rt,js_3_2_3:()=>Ft,js_3_2_3_1:()=>Mt,js_3_2_4:()=>Gt,js_3_2_4_1:()=>Wt,js_3_2_5:()=>Ut,js_3_2_5_1:()=>$t,js_3_2_5a:()=>_,js_3_2_6:()=>zt,js_3_2_6_1:()=>Vt,js_3_3_1:()=>Xt,js_3_3_2:()=>Qt,js_3_3_3:()=>Zt,js_3_3_3_1:()=>Kt,js_3_3_4:()=>te,js_3_3_4_1:()=>ee,js_3_3_5:()=>se,js_3_3_5_1:()=>ne,js_3_3_6:()=>oe,js_3_3_6_1:()=>re,js_3_3_7:()=>ae,js_3_3_7_1:()=>le,js_3_4_1:()=>ie,js_3_4_2:()=>ce,js_3_4_3:()=>ue,js_3_4_3_1:()=>de,js_3_4_4:()=>_e,js_3_4_4_1:()=>me,js_3_4_5:()=>pe,js_3_4_5_1:()=>he,js_3_4_6:()=>ge,js_3_4_6_1:()=>ye,js_3_4_7:()=>je,js_3_4_7_1:()=>fe,js_3_4_8:()=>be,js_3_4_8_1:()=>xe,js_3_4_9:()=>Ee,js_3_4_9_1:()=>Oe,js_4_2_1:()=>ve,js_4_2_10:()=>Fe,js_4_2_10_1:()=>Me,js_4_2_1_1:()=>Ce,js_4_2_2:()=>Te,js_4_2_2_1:()=>De,js_4_2_3:()=>we,js_4_2_3_1:()=>Ae,js_4_2_4:()=>Pe,js_4_2_4_1:()=>ke,js_4_2_5:()=>Ie,js_4_2_5_1:()=>Se,js_4_2_6:()=>Be,js_4_2_6_1:()=>Ne,js_4_2_7:()=>He,js_4_2_7_1:()=>Ye,js_4_2_8:()=>Je,js_4_2_8_1:()=>Le,js_4_2_9:()=>qe,js_4_2_9_1:()=>Re,js_4_3_1:()=>Ge,js_4_3_2:()=>We,js_4_3_2_1:()=>Ue,js_4_3_3:()=>$e,js_4_3_3_1:()=>ze,js_4_3_4:()=>Ve,js_4_3_4_1:()=>Xe,js_4_3_5:()=>Qe,js_4_3_5_1:()=>Ze,js_4_3_6:()=>Ke,js_4_3_6_1:()=>ts,js_4_4_1:()=>es,js_4_4_1_1:()=>ss,js_5_2_1:()=>ns,js_5_2_1_1:()=>os,js_5_2_2:()=>rs,js_5_2_2_1:()=>as,js_5_3_1:()=>ls,js_5_3_1_1:()=>is,js_5_3_2:()=>cs,js_5_3_2_1:()=>us,js_5_4_1:()=>ds,js_5_4_1_1:()=>_s,js_5_4_2:()=>ms,js_5_4_2_1:()=>ps,js_5_5_1:()=>hs,js_5_5_1_1:()=>gs,js_6_1_1:()=>ys,js_6_1_1_1:()=>js,js_6_1_2:()=>fs,js_6_1_2_1:()=>bs,js_6_2_1:()=>xs,js_6_2_1_1:()=>Es,js_6_2_2:()=>Os,js_6_2_2_1:()=>vs,js_6_3_1:()=>Cs,js_6_3_1_1:()=>Ts,js_6_3_2:()=>Ds,js_6_3_2_1:()=>ws,js_6_3_3:()=>As,js_6_3_3_1:()=>Ps,js_7_1_1:()=>ks,js_7_1_1_1:()=>Is,js_7_1_2:()=>Ss,js_7_1_2_1:()=>Bs,js_7_1_3:()=>Ns,js_7_1_3_1:()=>Ys,js_7_1_3a:()=>Hs,js_7_2_1:()=>Js,js_7_2_1_1:()=>Ls,js_7_2_2:()=>qs,js_7_2_2_1:()=>Rs,js_7_2_3:()=>Fs,js_7_2_3_1:()=>Ms,js_7_2_4:()=>Gs,js_7_2_4_1:()=>Ws,js_7_2_5:()=>Us,js_7_2_5_1:()=>$s,js_7_2_5a:()=>p,js_7_2_6:()=>zs,js_7_2_6_1:()=>Vs,js_7_2_7:()=>Xs,js_7_2_7_1:()=>Qs,js_7_2_8:()=>Zs,js_7_2_8_1:()=>Ks,js_7_3_1:()=>tn,js_7_3_1_1:()=>en,js_7_3_2:()=>sn,js_7_3_2_1:()=>nn,js_8_2_1:()=>on,js_8_2_1_1:()=>rn});var i=r(6895),a=r(9299),t=r(4650),d=r(4214);let y=(()=>{class e{constructor(s){this.coreService=s}ngOnInit(){this.coreService.getJsBookData()}ngOnDestroy(){}}return e.\u0275fac=function(s){return new(s||e)(t.Y36(d.p))},e.\u0275cmp=t.Xpm({type:e,selectors:[["app-js-book"]],decls:1,vars:0,template:function(s,o){1&s&&t._UZ(0,"router-outlet")},dependencies:[a.lC]}),e})();var j=r(9117);const f="let age = 35;",b='let name = "John";',x="let isActive = true;",E="let car = null;",O="let address = undefined;",v="let id = Symbol();",C='let person = { name: "John", age: 25 };',T="let bigNumber = BigInt(123456789);",D='let age = 25;\nlet str = "John is " + 25 + " years old." // returns "John is 25 years old." ',w='let age = 25; \nlet typeOfAge = typeof age; // returns "number"',A='let person = { name: "John", age: 25 };\nlet isInstance = person instanceof Object; // returns true',P="let x = 5;",k="<!DOCTYPE html>\n<html>\n<head>\n  <title>Assignment Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    let x = 5; // Using the assignment operator (=) to assign a value to the variable 'x'\n    console.log('Initial value of x:', x); // Output: 5\n  <\/script>\n</body>\n</html>",I="let x = 5;\nx += 3; // equivalent to x = x + 3;",S="<!DOCTYPE html>\n<html>\n<head>\n  <title>Assignment Operator Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      let x = 5; // Using the assignment operator (=) to assign a value to the variable 'x'\n\n      // Additional assignment operators: +=, -=, *=, /=, and %=\n      x += 3; // x = x + 3\n      console.log('x += 3:', x); // Output: 8\n\n      x -= 2; // x = x - 2\n      console.log('x -= 2:', x); // Output: 6\n\n      x *= 4; // x = x * 4\n      console.log('x *= 4:', x); // Output: 24\n\n      x /= 3; // x = x / 3\n      console.log('x /= 3:', x); // Output: 8\n\n      x %= 5; // x = x % 5 (remainder after division by 5)\n      console.log('x %= 5:', x); // Output: 3\n    <\/script>\n</body>\n</html>",B="let a = 10;\nlet b = 4;\n\n// Addition\nlet sum = a + b;\n\n// Subtraction\nlet difference = a - b;\n\n// Multiplication\nlet product = a * b;\n\n// Division\nlet quotient = a / b;",N="<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operator Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      let a = 10;\n      let b = 4;\n\n      // Addition\n      let sum = a + b;\n      console.log('Addition:', sum); // Output: 14\n\n      // Subtraction\n      let difference = a - b;\n      console.log('Subtraction:', difference); // Output: 6\n\n      // Multiplication\n      let product = a * b;\n      console.log('Multiplication:', product); // Output: 40\n\n      // Division\n      let quotient = a / b;\n      console.log('Division:', quotient); // Output: 2.5\n    <\/script>\n</body>\n</html>",H="let a = 10;\nlet b = 4;\n\n// Modulo\nlet remainder = a % b;",Y="<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      let a = 10;\n      let b = 4;\n\n      // Modulo\n      let remainder = a % b;\n      console.log('Modulo:', remainder); // Output: 2\n    <\/script>\n</body>\n</html>",J="// Increment\nlet x = 5;\nx++; // equivalent to x = x + 1;\n\n// Decrement\nlet y = 8;\ny--; // equivalent to y = y - 1;",L="<!DOCTYPE html>\n<html>\n<head>\n  <title>Arithmetic Operator Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n    <script>\n      // Increment\n      let x = 5;\n      x++;\n      console.log('Increment:', x); // Output: 6\n\n      // Decrement\n      let y = 8;\n      y--;\n      console.log('Decrement:', y); // Output: 7\n    <\/script>\n</body>\n</html>",q="// Equal to (==)\nlet a = 5;\nlet b = '5';\nlet isEqual = a == b;\n\n// Not equal to (!=)\nlet c = 10;\nlet d = 7;\nlet notEqual = c != d;\n\n// Strict equal to (===)\nlet e = 5;\nlet f = 5;\nlet isStrictEqual = e === f;\n\n// Strict not equal to (!==)\nlet g = 10;\nlet h = '10';\nlet isStrictNotEqual = g !== h;",R="<!DOCTYPE html>\n<html>\n<head>\n  <title>Comparison Operator Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Equal to (==)\n    let a = 5;\n    let b = '5';\n    let isEqual = a == b;\n    console.log('Equal to (==):', isEqual); // Output: true\n\n    // Not equal to (!=)\n    let c = 10;\n    let d = 7;\n    let notEqual = c != d;\n    console.log('Not equal to (!=):', notEqual); // Output: true\n\n    // Strict equal to (===)\n    let e = 5;\n    let f = 5;\n    let isStrictEqual = e === f;\n    console.log('Strict equal to (===):', isStrictEqual); // Output: true\n\n    // Strict not equal to (!==)\n    let g = 10;\n    let h = '10';\n    let isStrictNotEqual = g !== h;\n    console.log('Strict not equal to (!==):', isStrictNotEqual); // Output: true\n  <\/script>\n</body>\n</html>",F="// Greater than (>)\nlet i = 8;\nlet j = 5;\nlet isGreater = i > j;\n\n// Less than (<)\nlet k = 3;\nlet l = 6;\nlet isLess = k < l;\n\n// Greater than or equal to (>=)\nlet m = 7;\nlet n = 7;\nlet isGreaterOrEqual = m >= n;\n\n// Less than or equal to (<=)\nlet o = 9;\nlet p = 12;\nlet isLessOrEqual = o <= p;",M="<!DOCTYPE html>\n<html>\n<head>\n  <title>Comparison Operator Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Greater than (>)\n    let i = 8;\n    let j = 5;\n    let isGreater = i > j;\n    console.log('Greater than (>):', isGreater); // Output: true\n\n    // Less than (<)\n    let k = 3;\n    let l = 6;\n    let isLess = k < l;\n    console.log('Less than (<):', isLess); // Output: true\n\n    // Greater than or equal to (>=)\n    let m = 7;\n    let n = 7;\n    let isGreaterOrEqual = m >= n;\n    console.log('Greater than or equal to (>=):', isGreaterOrEqual); // Output: true\n\n    // Less than or equal to (<=)\n    let o = 9;\n    let p = 12;\n    let isLessOrEqual = o <= p;\n    console.log('Less than or equal to (<=):', isLessOrEqual); // Output: true\n  <\/script>\n</body>\n</html>",G="// Logical AND (&&)\nlet a = true;\nlet b = true;\nlet resultAND = a && b;",W="<!DOCTYPE html>\n<html>\n<head>\n  <title>Logical Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Logical AND (&&)\n    let a = true;\n    let b = true;\n    let resultAND = a && b;\n    console.log('Logical AND (&&):', resultAND); // Output: true\n  <\/script>\n</body>\n</html>",U="// Logical OR (||)\nlet c = true;\nlet d = false;\nlet resultOR = c || d;",$="<!DOCTYPE html>\n<html>\n<head>\n  <title>Logical Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Logical OR (||)\n    let c = true;\n    let d = false;\n    let resultOR = c || d;\n    console.log('Logical OR (||):', resultOR); // Output: true\n  <\/script>\n</body>\n</html>",z="// Logical NOT (!)\nlet e = true;\nlet resultNOT = !e;",V="<!DOCTYPE html>\n<html>\n<head>\n  <title>Logical Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Logical NOT (!)\n    let e = true;\n    let resultNOT = !e;\n    console.log('Logical NOT (!):', resultNOT); // Output: false\n  <\/script>\n</body>\n</html>",X="let num = 10;\nlet result = num % 2 === 0 ? 'Even' : 'Odd';",Q="<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    let num = 10;\n    let result = num % 2 === 0 ? 'Even' : 'Odd';\n    console.log(result); // Output: \"Even\"\n  <\/script>\n</body>\n</html>",Z="let result = (10 + 5) * 2;",K="<!DOCTYPE html>\n<html>\n<head>\n  <title>Grouping Operator Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Without using the grouping operator\n    let result1 = 10 + 5 * 2;\n    console.log('Result 1:', result1); // Output: 20 (Multiplication performed first, then addition)\n\n    // Using the grouping operator\n    let result2 = (10 + 5) * 2;\n    console.log('Result 2:', result2); // Output: 30 (Addition inside parentheses performed first, then multiplication)\n  <\/script>\n</body>\n</html>",tt="// Bitwise AND (&)\nlet a = 5; // Binary: 0101\nlet b = 3; // Binary: 0011\nlet resultAND = a & b; // Binary: 0001 (Decimal: 1)\n\n// Bitwise OR (|)\nlet c = 5; // Binary: 0101\nlet d = 3; // Binary: 0011\nlet resultOR = c | d; // Binary: 0111 (Decimal: 7)\n\n// Bitwise XOR (^)\nlet e = 5; // Binary: 0101\nlet f = 3; // Binary: 0011\nlet resultXOR = e ^ f; // Binary: 0110 (Decimal: 6)\n\n// Bitwise NOT (~)\nlet g = 5; // Binary: 0101\nlet resultNOT = ~g; // Binary: 1010 (Decimal: -6)\n\n// Bitwise left shift (<<)\nlet h = 5; // Binary: 0101\nlet resultLeftShift = h << 2; // Binary: 010100 (Decimal: 20)\n\n// Bitwise right shift (>>)\nlet i = 16; // Binary: 0001 0000\nlet resultRightShift = i >> 2; // Binary: 0000 0100 (Decimal: 4)\n\n// Bitwise unsigned right shift (>>>)\nlet j = -16; // Binary: 1111 1111 1111 1111 1111 1111 1111 0000\nlet resultUnsignedRightShift = j >>> 2; // Binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820)",et="<!DOCTYPE html>\n<html>\n<head>\n  <title>Bitwise Operator Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Bitwise AND (&)\n    let a = 5; // Binary: 0101\n    let b = 3; // Binary: 0011\n    let resultAND = a & b; // Binary: 0001 (Decimal: 1)\n    console.log('Bitwise AND (&):', resultAND); // Output: 1\n\n    // Bitwise OR (|)\n    let c = 5; // Binary: 0101\n    let d = 3; // Binary: 0011\n    let resultOR = c | d; // Binary: 0111 (Decimal: 7)\n    console.log('Bitwise OR (|):', resultOR); // Output: 7\n\n    // Bitwise XOR (^)\n    let e = 5; // Binary: 0101\n    let f = 3; // Binary: 0011\n    let resultXOR = e ^ f; // Binary: 0110 (Decimal: 6)\n    console.log('Bitwise XOR (^):', resultXOR); // Output: 6\n\n    // Bitwise NOT (~)\n    let g = 5; // Binary: 0101\n    let resultNOT = ~g; // Binary: 1010 (Decimal: -6)\n    console.log('Bitwise NOT (~):', resultNOT); // Output: -6\n\n    // Bitwise left shift (<<)\n    let h = 5; // Binary: 0101\n    let resultLeftShift = h << 2; // Binary: 010100 (Decimal: 20)\n    console.log('Bitwise left shift (<<):', resultLeftShift); // Output: 20\n\n    // Bitwise right shift (>>)\n    let i = 16; // Binary: 0001 0000\n    let resultRightShift = i >> 2; // Binary: 0000 0100 (Decimal: 4)\n    console.log('Bitwise right shift (>>):', resultRightShift); // Output: 4\n\n    // Bitwise unsigned right shift (>>>)\n    let j = -16; // Binary: 1111 1111 1111 1111 1111 1111 1111 0000\n    let resultUnsignedRightShift = j >>> 2; // Binary: 0011 1111 1111 1111 1111 1111 1111 1100 (Decimal: 1073741820)\n    console.log('Bitwise unsigned right shift (>>>):', resultUnsignedRightShift); // Output: 1073741820\n  <\/script>\n</body>\n</html>",st="if (condition) {\n  // code to be executed if the condition is true\n} else {\n  // code to be executed if the condition is false\n}",nt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Statement Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let number = 10;\n\n    if (number > 0) {\n      console.log("The number is positive.");\n    } else {\n      console.log("The number is zero or negative.");\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',ot="if (condition1) {\n  // code to be executed if condition1 is true\n} else if (condition2) {\n  // code to be executed if condition2 is true\n} else {\n  // code to be executed if all conditions are false\n}",rt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Statement Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let num = -10;\n\n    if (num > 0) {\n      console.log("The number is positive.");\n    } else if (num < 0) {\n      console.log("The number is negative.");\n    } else {\n      console.log("The number is zero.");\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',at="switch (expression) {\n  case value1:\n    // code to be executed if expression matches value1\n    break;\n  case value2:\n    // code to be executed if expression matches value2\n    break;\n  default:\n    // code to be executed if no case matches the expression\n}",lt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Conditional Statement Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let day = "Thursday";\n\n    switch (day) {\n      case "Monday":\n        console.log("It\'s Monday!");\n        break;\n      case "Tuesday":\n        console.log("It\'s Tuesday!");\n        break;\n      case "Wednesday":\n        console.log("It\'s Wednesday!");\n        break;\n      case "Thursday":\n        console.log("It\'s Thursday!");\n        break;\n      case "Friday":\n        console.log("It\'s Friday!");\n        break;\n      default:\n        console.log("It\'s the weekend!");\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',it="for (initialization; condition; increment/decrement) {\n  // code to be executed in each iteration\n}",ct='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    for (let i = 1; i <= 5; i++) {\n      console.log("Iteration " + i);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',ut="while (condition) {\n  // code to be executed as long as the condition is true\n}",dt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let count = 1;\n\n    while (count <= 5) {\n      console.log("Iteration " + count);\n      count++;\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',_t="do {\n  // code to be executed at least once\n} while (condition);",mt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let count = 1;\n\n    do {\n      console.log("Iteration " + count);\n      count++;\n    } while (count <= 5);\n  <\/script>\n</head>\n<body>\n</body>\n</html>',pt="for (variable in object) {\n  // code to be executed for each property\n}",ht='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const person = {\n      name: "John",\n      age: 30,\n      city: "New York"\n    };\n    \n    for (let key in person) {\n      console.log(key + ": " + person[key]);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',gt="for (variable of iterable) {\n  // code to be executed for each element\n}",yt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Structure Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const fruits = ["apple", "banana", "orange"];\n\n    for (let fruit of fruits) {\n      console.log(fruit);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',jt="for (initialization; condition; increment/decrement) {\n  // code to be executed in each iteration\n  break;\n  // code to be executed in each iteration and possibly skipped\n}",ft='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Control Statement Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    for (let i = 0; i < 10; i++) {\n      if (i === 5) {\n        break; // exit the loop when i is 5\n      }\n      console.log(i);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',bt="for (initialization; condition; increment/decrement) {\n  // code to be executed in each iteration\n  continue;\n  // code to be executed in each iteration and possibly skipped\n}",xt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Control Statement Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    for (let i = 0; i < 10; i++) {\n      if (i === 5) {\n        continue; // skip the iteration when i is 5\n      }\n      console.log(i);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Et="for (variable of iterable) {\n  // code to be executed for each element\n  return;\n  // code to be executed for each element and possibly skipped\n}",Ot='<!DOCTYPE html>\n<html>\n<head>\n  <title>Loop Control Statement Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    function findNumber(array, target) {\n      for (let num of array) {\n        if (num === target) {\n          return true; // exit the function and return true if target is found\n        }\n      }\n      return false; // return false if target is not found\n    }\n\n    console.log(findNumber([1, 2, 3, 4, 5], 3));\n  <\/script>\n</head>\n<body>\n</body>\n</html>',vt="function functionName(parameter1, parameter2, ...) {\n  // code to be executed\n  return result; // optional\n}",Ct='<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Definition Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    function greet(name) {\n      const message = "Hello, " + name + "!";\n    \n      return message;\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Tt="functionName(argument1, argument2, ...);",Dt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Call Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    function greet(name) {\n      const message = "Hello, " + name + "!";\n    \n      return message;\n    }\n\n    // Calling the function\n    const result = greet("John");\n    console.log(result); // Output: Hello, John!\n  <\/script>\n</head>\n<body>\n</body>\n</html>',wt='// Global variable\nlet globalVariable = "I\'m a global variable";\n\nfunction exampleFunction() {\n  // Local variable\n  let localVariable = "I\'m a local variable";\n}',At='<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Scope Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    // Global variable\n    let globalVariable = "I\'m a global variable";\n    \n    function exampleFunction() {\n      // Local variable\n      let localVariable = "I\'m a local variable";\n    \n      console.log(globalVariable); // Accessing the global variable\n      console.log(localVariable); // Accessing the local variable\n    }\n    \n    exampleFunction(); // Calling the function\n    \n    console.log(globalVariable); // Accessing the global variable outside the function\n    // console.log(localVariable); // This will result in an error since localVariable is not accessible outside the function\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Pt="let anonymousFunction = function(parameter1, parameter2) {\n  // code to be executed\n};",kt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Anonymous Function Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let anonymousFunction = function(parameter1, parameter2) {\n      // code to be executed\n      console.log("Parameters:", parameter1, parameter2);\n      console.log("Executing the anonymous function");\n    };\n    \n    // Calling the anonymous function\n    anonymousFunction("Hello", "World");\n  <\/script>\n</head>\n<body>\n</body>\n</html>',It="function outerFunction() {\n  let outerVariable = \"I'm an outer variable\";\n\n  function innerFunction() {\n    console.log(outerVariable); // Accessing the outer variable from the inner function\n  }\n\n  return innerFunction;\n}\n\n// Creating a closure by calling the outer function and assigning the returned inner function to a variable\nlet closure = outerFunction();\n\n// Calling the inner function, which still has access to the outer variable\nclosure(); // Output: I'm an outer variable",St='<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Closure Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    function outerFunction() {\n      let outerVariable = "I\'m an outer variable";\n    \n      function innerFunction() {\n        console.log(outerVariable); // Accessing the outer variable from the inner function\n      }\n    \n      return innerFunction;\n    }\n    \n    // Creating a closure by calling the outer function and assigning the returned inner function to a variable\n    let closure = outerFunction();\n    \n    // Calling the inner function, which still has access to the outer variable\n    closure(); // Output: I\'m an outer variable\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Bt="const functionName = (parameter1, parameter2) => {\n  // code to be executed\n  return result; // optional\n};",Nt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Arrow Function Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const sum = (num1, num2) => {\n      return num1 + num2;\n    };\n    \n    console.log(sum(2, 3)); // Output: 5\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Ht="(function() {\n  // code to be executed immediately\n})();",Yt='<!DOCTYPE html>\n<html>\n<head>\n  <title>IIFE Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    (function(name) {\n      console.log("Hello, " + name + "!");\n    })("John");\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Jt='const firstName = "John";\nconst lastName = "Doe";\n\nconst fullName = firstName + " " + lastName;\nconsole.log(fullName); // Output: "John Doe"',Lt='<!DOCTYPE html>\n<html>\n<head>\n  <title>String Concatenation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const firstName = "John";\n    const lastName = "Doe";\n    \n    const fullName = firstName + " " + lastName;\n    console.log(fullName); // Output: "John Doe"\n  <\/script>\n</head>\n<body>\n</body>\n</html>',qt='const message = "Hello, World!";\nconsole.log(message.length); // Output: 13',Rt='<!DOCTYPE html>\n<html>\n<head>\n  <title>String Length Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const message = "Hello, World!";\n    console.log(message.length); // Output: 13\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Ft='const greeting = "Hello";\nconsole.log(greeting[0]); // Output: "H"\nconsole.log(greeting.charAt(1)); // Output: "e"',Mt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Accessing Characters in a String Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const greeting = "Hello";\n    console.log(greeting[0]); // Output: "H"\n    console.log(greeting.charAt(1)); // Output: "e"\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Gt='// The toLowerCase() method converts the string to all lowercase characters\nconst str1 = "Hello, World!";\nconst lowerCaseStr = str1.toLowerCase();\nconsole.log(lowerCaseStr); // Output: "hello, world!"\n\n// The toUpperCase() method converts the string to all uppercase characters\nconst str2 = "hello, world!";\nconst upperCaseStr = str2.toUpperCase();\nconsole.log(upperCaseStr); // Output: "HELLO, WORLD!"\n\n// The slice() method extracts a portion of the string from index 7 to 11 (12-1)\nconst str3 = "Hello, World!";\nconst slicedStr = str3.slice(7, 12);\nconsole.log(slicedStr); // Output: "World"\n\n// The indexOf() method finds the index of the substring "World" in the string.\nconst str4 = "Hello, World!";\nconst index = str4.indexOf("World");\nconsole.log(index); // Output: 7\n\n// The replace() method replaces the substring "Hello" with "Hi" in the string\nconst str5 = "Hello, World!";\nconst replacedStr = str5.replace("Hello", "Hi");\nconsole.log(replacedStr); // Output: "Hi, World!"\n\n// The split() method splits the string into an array of substrings based on \',\' as a separator\nconst str6 = "apple,banana,orange";\nconst fruitArray = str6.split(\',\');\nconsole.log(fruitArray); // Output: ["apple", "banana", "orange"]\n\n// The join() method joins the elements of the array into a single string with \' | \' as a separator\nconst fruitArray2 = ["apple", "banana", "orange"];\nconst joinedFruits = fruitArray2.join(\' | \');\nconsole.log(joinedFruits); // Output: "apple | banana | orange"\n\n// The match() method searches the string using a regular expression and returns an array of matches\nconst str7 = "The quick brown fox jumps over the lazy dog.";\nconst pattern = /quick|lazy/g;\nconst matches = str7.match(pattern);\nconsole.log(matches); // Output: ["quick", "lazy"]',Wt='<!DOCTYPE html>\n<html>\n<head>\n  <title>String Method Examples</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    // The toLowerCase() method converts the string to all lowercase characters\n    const str1 = "Hello, World!";\n    const lowerCaseStr = str1.toLowerCase();\n    console.log(lowerCaseStr); // Output: "hello, world!"\n    \n    // The toUpperCase() method converts the string to all uppercase characters\n    const str2 = "hello, world!";\n    const upperCaseStr = str2.toUpperCase();\n    console.log(upperCaseStr); // Output: "HELLO, WORLD!"\n    \n    // The slice() method extracts a portion of the string from index 7 to 11 (12-1)\n    const str3 = "Hello, World!";\n    const slicedStr = str3.slice(7, 12);\n    console.log(slicedStr); // Output: "World"\n    \n    // The indexOf() method finds the index of the substring "World" in the string.\n    const str4 = "Hello, World!";\n    const index = str4.indexOf("World");\n    console.log(index); // Output: 7\n    \n    // The replace() method replaces the substring "Hello" with "Hi" in the string\n    const str5 = "Hello, World!";\n    const replacedStr = str5.replace("Hello", "Hi");\n    console.log(replacedStr); // Output: "Hi, World!"\n    \n    // The split() method splits the string into an array of substrings based on \',\' as a separator\n    const str6 = "apple,banana,orange";\n    const fruitArray = str6.split(\',\');\n    console.log(fruitArray); // Output: ["apple", "banana", "orange"]\n    \n    // The join() method joins the elements of the array into a single string with \' | \' as a separator\n    const fruitArray2 = ["apple", "banana", "orange"];\n    const joinedFruits = fruitArray2.join(\' | \');\n    console.log(joinedFruits); // Output: "apple | banana | orange"\n    \n    // The match() method searches the string using a regular expression and returns an array of matches\n    const str7 = "The quick brown fox jumps over the lazy dog.";\n    const pattern = /quick|lazy/g;\n    const matches = str7.match(pattern);\n    console.log(matches); // Output: ["quick", "lazy"]\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Ut='const name = "John"; \nconst age = 30; \n\nconst message = `My name is ${name} and I am ${age} years old.`; \nconsole.log(message); // Output: "My name is John and I am 30 years old."',_='const name = "John"; \n    const age = 30; \n    \n    const message = `My name is ${name} and I am ${age} years old.`; \n    console.log(message); // Output: "My name is John and I am 30 years old."',$t=`<!DOCTYPE html>\n<html>\n<head>\n  <title>String Template Literal Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    ${_}\n  <\/script>\n</head>\n<body>\n</body>\n</html>`,zt='const heart = "\\u2665";\nconsole.log(heart); // Output: "\u2665"\n\nconst smiley = "\\u{1F604}";\nconsole.log(smiley); // Output: "\u{1f604}"',Vt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Unicode Character Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    const heart = "\\u2665";\n    console.log(heart); // Output: "\u2665"\n    \n    const smiley = "\\u{1F604}";\n    console.log(smiley); // Output: "\u{1f604}"\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Xt="// Using array literal syntax\nlet myArray = [1, 2, 3, 4, 5];",Qt="// Using Array constructor\nlet myArray = new Array(1, 2, 3, 4, 5);",Zt="let myArray = [1, 2, 3, 4, 5];\n\nconsole.log(myArray[0]); // Output: 1\nconsole.log(myArray[2]); // Output: 3",Kt='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n\n    console.log(myArray[0]); // Output: 1\n    console.log(myArray[2]); // Output: 3\n  <\/script>\n</head>\n<body>\n</body>\n</html>',te="let myArray = [1, 2, 3, 4, 5];\n\nmyArray[2] = 10;\nconsole.log(myArray); // Output: [1, 2, 10, 4, 5]",ee='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n\n    myArray[2] = 10;\n    console.log(myArray); // Output: [1, 2, 10, 4, 5]\n  <\/script>\n</head>\n<body>\n</body>\n</html>',se="let myArray = [1, 2, 3, 4, 5];\nconsole.log(myArray.length); // Output: 5\n\nmyArray.length = 3;\nconsole.log(myArray); // Output: [1, 2, 3]",ne='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n    console.log(myArray.length); // Output: 5\n    \n    myArray.length = 3;\n    console.log(myArray); // Output: [1, 2, 3]\n  <\/script>\n</head>\n<body>\n</body>\n</html>',oe="let myArray = [1, 2, 3];\n\nmyArray.push(4); // Adds 4 at the end\nconsole.log(myArray); // Output: [1, 2, 3, 4]\n\nlet removedElement = myArray.pop(); // Removes the last element and returns it\nconsole.log(myArray); // Output: [1, 2, 3]\nconsole.log(removedElement); // Output: 4\n\nmyArray.unshift(0); // Adds 0 at the beginning\nconsole.log(myArray); // Output: [0, 1, 2, 3]\n\nlet shiftedElement = myArray.shift(); // Removes the first element and returns it\nconsole.log(myArray); // Output: [1, 2, 3]\nconsole.log(shiftedElement); // Output: 0",re='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3];\n\n    myArray.push(4); // Adds 4 at the end\n    console.log(myArray); // Output: [1, 2, 3, 4]\n    \n    let removedElement = myArray.pop(); // Removes the last element and returns it\n    console.log(myArray); // Output: [1, 2, 3]\n    console.log(removedElement); // Output: 4\n    \n    myArray.unshift(0); // Adds 0 at the beginning\n    console.log(myArray); // Output: [0, 1, 2, 3]\n    \n    let shiftedElement = myArray.shift(); // Removes the first element and returns it\n    console.log(myArray); // Output: [1, 2, 3]\n    console.log(shiftedElement); // Output: 0\n  <\/script>\n</head>\n<body>\n</body>\n</html>',ae="let myArray = [1, 2, 3, 4, 5];\n\nfor (let i = 0; i < myArray.length; i++) {\n  console.log(myArray[i]);\n}\n\nmyArray.forEach(function(element) {\n  console.log(element);\n});",le='<!DOCTYPE html>\n<html>\n<head>\n  <title>Array Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let myArray = [1, 2, 3, 4, 5];\n\n    for (let i = 0; i < myArray.length; i++) {\n      console.log(myArray[i]);\n    }\n\n    myArray.forEach(function(element) {\n      console.log(element);\n    });\n  <\/script>\n</head>\n<body>\n</body>\n</html>',ie='// Using object literal syntax\nlet person = {\n  name: "John",\n  age: 30,\n  profession: "Developer"\n};',ce='// Using Object constructor\nlet person = new Object();\nperson.name = "John";\nperson.age = 30;\nperson.profession = "Developer";',ue='let person = {\n  name: "John",\n  age: 30,\n  profession: "Developer"\n};\n\nconsole.log(person.name); // Output: John\nconsole.log(person[\'age\']); // Output: 30',de='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let person = {\n      name: "John",\n      age: 30,\n      profession: "Developer"\n    };\n    \n    console.log(person.name); // Output: John\n    console.log(person[\'age\']); // Output: 30\n  <\/script>\n</head>\n<body>\n</body>\n</html>',_e='let person = {\n  name: "John",\n  age: 30,\n  profession: "Developer"\n};\n\nperson.age = 35;\nperson[\'profession\'] = "Engineer";',me='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let person = {\n      name: "John",\n      age: 30,\n      profession: "Developer"\n    };\n    \n    person.age = 35;\n    person[\'profession\'] = "Engineer";\n    \n    console.log(person.age); // Output: 35\n    console.log(person[\'profession\']); // Output: Engineer\n  <\/script>\n</head>\n<body>\n</body>\n</html>',pe='let person = {\n  name: "John",\n  age: 30,\n  profession: "Developer"\n};\n\nperson.city = "New York";',he='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let person = {\n      name: "John",\n      age: 30,\n      profession: "Developer"\n    };\n    \n    person.city = "New York";\n      \n    console.log(person.name); // Output: John\n    console.log(person.city); // Output: New York\n  <\/script>\n</head>\n<body>\n</body>\n</html>',ge='let person = {\n  name: "John",\n  age: 30,\n  profession: "Developer"\n};\n\ndelete person.profession;',ye='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let person = {\n      name: "John",\n      age: 30,\n      profession: "Developer"\n    };\n    \n    delete person.profession;\n    \n    console.log(person.name); // Output: John\n    console.log(person.profession); // Output: undefined\n  <\/script>\n</head>\n<body>\n</body>\n</html>',je='let person = {\n  name: "John",\n  age: 30,\n  sayHello: function() {\n    console.log("Hello!");\n  }\n};\n\nperson.sayHello(); // Output: Hello!',fe='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let person = {\n      name: "John",\n      age: 30,\n      sayHello: function() {\n        console.log("Hello!");\n      }\n    };\n    \n    person.sayHello(); // Output: Hello!\n  <\/script>\n</head>\n<body>\n</body>\n</html>',be='let person = {\n  name: "John",\n  age: 30,\n  profession: "Developer"\n};\n\nfor (let key in person) {\n  console.log(key + ": " + person[key]);\n}\n\nlet keys = Object.keys(person);\nfor (let i = 0; i < keys.length; i++) {\n  let key = keys[i];\n  console.log(key + ": " + person[key]);\n}',xe='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    let person = {\n      name: "John",\n      age: 30,\n      profession: "Developer"\n    };\n    \n    for (let key in person) {\n      console.log(key + ": " + person[key]);\n    }\n    \n    let keys = Object.keys(person);\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      console.log(key + ": " + person[key]);\n    }\n  <\/script>\n</head>\n<body>\n</body>\n</html>',Ee='function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.sayHello = function() {\n    console.log("Hello, my name is " + this.name);\n  };\n}\n\nlet john = new Person("John", 30);\njohn.sayHello(); // Output: Hello, my name is John',Oe='<!DOCTYPE html>\n<html>\n<head>\n  <title>Object Operation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n  <script>\n    function Person(name, age) {\n      this.name = name;\n      this.age = age;\n      this.sayHello = function() {\n        console.log("Hello, my name is " + this.name);\n      };\n    }\n    \n    let john = new Person("John", 30);\n    john.sayHello(); // Output: Hello, my name is John\n  <\/script>\n</head>\n<body>\n</body>\n</html>',ve="let element = document.getElementById('elementId');",Ce="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by ID Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by ID Example</h1>\n  <div id=\"elementId\">This is the selected element.</div>\n  <br/>\n\n  <script>\n    let element = document.getElementById('elementId');\n\n    console.log('This is the inner text of the selected element: ' + element.innerText); // innerText property will be discussed below\n  <\/script>\n</body>\n</html>",Te="let elements = document.getElementsByClassName('className');",De='<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by Class Name Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Class Name Example</h1>\n  <div class="className">Element 1</div>\n  <div class="className">Element 2</div>\n  <div class="className">Element 3</div>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByClassName(\'className\');\n\n    for (let i = 0; i < elements.length; i++) {\n      console.log(\'This is the selected element: \' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>',we="let elements = document.getElementsByTagName('tagName');",Ae="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get Elements by Tag Name Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Get Elements by Tag Name Example</h1>\n  <div>Element 1</div>\n  <p>Element 2</p>\n  <span>Element 3</span>\n  <br/>\n\n  <script>\n    let elements = document.getElementsByTagName('div');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",Pe="let element = document.querySelector('selector');\nlet elements = document.querySelectorAll('selector');",ke="<!DOCTYPE html>\n<html>\n<head>\n  <title>Query Selector Examples</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <h1>Query Selector Example</h1>\n  <div id=\"elementId\">Element 1</div>\n  <div class=\"className\">Element 2</div>\n  <div class=\"className\">Element 3</div>\n  <br/>\n\n  <script>\n    // JavaScript code\n    let element = document.querySelector('#elementId');\n\n    console.log('This is the selected element by id: ' + element.innerText);\n\n    let elements = document.querySelectorAll('.className');\n    \n    for (let i = 0; i < elements.length; i++) {\n      console.log('This is the selected element by class name: ' + elements[i].innerText);\n    };\n  <\/script>\n</body>\n</html>",Ie="element.innerHTML = 'New HTML content';\nelement.textContent = 'New text content';",Se="<!DOCTYPE html>\n<html>\n<head>\n  <title>Modify Element Content Example</title>\n</head>\n<body>\n  <h1 id=\"elementId\">Initial Content</h1>\n  <p>Some paragraph with initial content</p>\n\n  <script>\n    let element = document.getElementById('elementId');\n    element.innerHTML = 'New HTML content';\n\n    let paragraph = document.querySelector('p');\n    paragraph.textContent = 'New text content';\n  <\/script>\n</body>\n</html>",Be="let value = element.getAttribute('attributeName');\nelement.setAttribute('attributeName', 'attributeValue');",Ne="<!DOCTYPE html>\n<html>\n<head>\n  <title>Get and Set Attribute Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <img id=\"myImage\" src=\"assets/images/cute_cat.jpg\" alt=\"My Image\">\n  <br/>\n\n  <script>\n    // JavaScript code\n    let element = document.getElementById('myImage');\n\n    // Get the value of the 'src' attribute\n    let value = element.getAttribute('src');\n    console.log(value);\n\n    // Set the value of the 'alt' attribute\n    element.setAttribute('alt', 'New Alt Text');\n  <\/script>\n</body>\n</html>",He="element.style.property = 'value';",Ye="<!DOCTYPE html>\n<html>\n<head>\n  <title>Set CSS Property Example</title>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    let element = document.getElementById('myElement');\n    \n    // Set the CSS property values\n    element.style.color = 'blue';\n    element.style.backgroundColor = 'yellow';\n    element.style.fontSize = '20px';\n    element.style.padding = '10px';\n  <\/script>\n</body>\n</html>",Je="element.classList.add('className');\nelement.classList.remove('className');",Le="<!DOCTYPE html>\n<html>\n<head>\n  <title>Class Manipulation on Hover Example</title>\n  <style>\n    .highlight {\n      background-color: yellow;\n      color: black;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"myElement\">Hello, World!</div>\n\n  <script>\n    let element = document.getElementById('myElement');\n\n    // Add class on mouseover; addEventListener method will be discussed on next chapter\n    element.addEventListener('mouseover', function() {\n      element.classList.add('highlight');\n    });\n\n    // Remove class on mouseout\n    element.addEventListener('mouseout', function() {\n      element.classList.remove('highlight');\n    });\n  <\/script>\n</body>\n</html>",qe="let newElement = document.createElement('tagName');\nlet newText = document.createTextNode('Text content');",Re="<!DOCTYPE html>\n<html>\n<head>\n  <title>Create Element and Create Text Node Example</title>\n</head>\n<body>\n  <div id=\"container\"></div>\n\n  <script>\n    let container = document.getElementById('container');\n\n    // Create a new element\n    let newElement = document.createElement('p');\n\n    // Create a text node\n    let newText = document.createTextNode('Text content');\n\n    // Append the text node to the new element\n    newElement.appendChild(newText);\n\n    // Append the new element to the container\n    container.appendChild(newElement);\n  <\/script>\n</body>\n</html>",Fe="parentElement.appendChild(newElement);\nparentElement.removeChild(childElement);",Me="<!DOCTYPE html>\n<html>\n<head>\n  <title>Append and Remove Child Example</title>\n</head>\n<body>\n  <div id=\"parent\">\n    <p id=\"child\">Child Element</p>\n  </div>\n\n  <script>\n    // JavaScript code\n    let parentElement = document.getElementById('parent');\n    let childElement = document.getElementById('child');\n\n    // Create a new element\n    let newElement = document.createElement('span');\n    newElement.textContent = 'New Child Element';\n\n    // Append the new element to the parent\n    parentElement.appendChild(newElement);\n\n    // Remove the child element from the parent\n    parentElement.removeChild(childElement);\n  <\/script>\n</body>\n</html>",Ge="element.addEventListener('eventName', eventHandler);",We="function eventHandler(event) {\n  // Event handling code\n}",Ue="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Handler Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <button id=\"myButton\">Click Me</button>\n\n  <script>\n    function eventHandler(event) {\n      // Event handling code\n      alert('Button clicked!');\n    }\n\n    // Select the button element\n    let button = document.getElementById('myButton');\n\n    // Attach the event handler to the button's click event\n    button.addEventListener('click', eventHandler);\n  <\/script>\n</body>\n</html>",$e="// Event bubbling\nelement1.addEventListener('click', eventHandler);\n\n// Event capturing\nelement2.addEventListener('click', eventHandler, true);",ze="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Bubbling and Capturing Example</title>\n  <style>\n    div {\n      padding: 20px;\n      border: 1px solid black;\n      margin-bottom: 10px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"outerDiv1\">\n    <h2>Bubbling:</h2>\n    <div id=\"innerDiv1\">Click Me!</div>\n  </div>\n\n  <div id=\"outerDiv2\">\n    <h2>Capturing:</h2>\n    <div id=\"innerDiv2\">Click Me!</div>\n  </div>\n</div>\n  <script>\n    function eventHandler(event) {\n      alert('Event handler triggered on:' + event.currentTarget.id);\n      // event.stopPropagation();\n    }\n\n    let innerDiv1 = document.getElementById('innerDiv1');\n    let outerDiv1 = document.getElementById('outerDiv1');\n    \n    let innerDiv2 = document.getElementById('innerDiv2');\n    let outerDiv2 = document.getElementById('outerDiv2');\n    \n    // Event bubbling\n    innerDiv1.addEventListener('click', eventHandler, false);\n    outerDiv1.addEventListener('click', eventHandler, false);\n\n    // Event capturing\n    innerDiv2.addEventListener('click', eventHandler, true);\n    outerDiv2.addEventListener('click', eventHandler, true);\n  <\/script>\n</body>\n</html>",Ve="const listContainer = document.getElementById('listContainer');\n\nfunction handleItemClick(event) {\n  const target = event.target;\n\n  if (target.tagName === 'LI') {\n    // Toggle the 'selected' class on the clicked list item\n    target.classList.toggle('selected');\n  }\n}\n\n// Attach the event listener to the parent element (listContainer)\nlistContainer.addEventListener('click', handleItemClick);\n\n// Simulate dynamically adding more list items after a delay\nsetTimeout(() => {\n  const newItem = document.createElement('li');\n  newItem.textContent = 'Item 4';\n  listContainer.appendChild(newItem);\n}, 2000);",Xe="<!DOCTYPE html>\n<html>\n<head>\n  <title>Event Delegation Example</title>\n  <style>\n    ul {\n      list-style: none;\n      padding: 0;\n    }\n\n    li {\n      cursor: pointer;\n    }\n\n    .selected {\n      background-color: yellow;\n    }\n  </style>\n</head>\n<body>\n  <ul id=\"listContainer\">\n    \x3c!-- Initial list items --\x3e\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>\n\n  <script>\n    const listContainer = document.getElementById('listContainer');\n\n    function handleItemClick(event) {\n      const target = event.target;\n\n      if (target.tagName === 'LI') {\n        // Toggle the 'selected' class on the clicked list item\n        target.classList.toggle('selected');\n      }\n    }\n\n    // Attach the event listener to the parent element (listContainer)\n    listContainer.addEventListener('click', handleItemClick);\n\n    // Simulate dynamically adding more list items after a delay\n    setTimeout(() => {\n      const newItem = document.createElement('li');\n      newItem.textContent = 'Item 4';\n      listContainer.appendChild(newItem);\n    }, 2000);\n  <\/script>\n</body>\n</html>",Qe="element.removeEventListener('eventName', eventHandler);",Ze="<!DOCTYPE html>\n<html>\n<head>\n  <title>Remove Event Listener Example</title>\n</head>\n<body>\n  <button id=\"myButton\">Click Me</button>\n\n  <script>\n    function eventHandler() {\n      alert('Button clicked!');\n    }\n\n    let button = document.getElementById('myButton');\n\n    // Attach the event handler to the button's click event\n    button.addEventListener('click', eventHandler);\n\n    // Remove the event handler after 3 seconds\n    setTimeout(() => {\n      button.removeEventListener('click', eventHandler);\n      alert('Event handler removed!');\n    }, 3000);\n  <\/script>\n</body>\n</html>",Ke='<button onclick="eventHandler(event)">Click me</button>',ts="<!DOCTYPE html>\n<html>\n<head>\n  <title>Inline Event Handling Example</title>\n</head>\n<body>\n  <button onclick=\"eventHandler()\">Click me</button>\n\n  <script>\n    function eventHandler() {\n      alert('Button clicked!');\n    }\n  <\/script>\n</body>\n</html>",es="// Fetch data from the server\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => {\n    // DOM manipulation\n    const container = document.getElementById('data-container');\n\n    // Create a new list element for each data item\n    data.forEach(item => {\n      const listItem = document.createElement('li');\n      listItem.textContent = item.name;\n      container.appendChild(listItem);\n    });\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",ss="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch API Example</title>\n</head>\n<body>\n  <ul id=\"data-container\"></ul>\n\n  <script>\n    fetch('assets/data/json/list.json')\n      .then(response => response.json())\n      .then(data => {\n        const container = document.getElementById('data-container');\n\n        // Create a new list element for each data item\n        data.forEach(item => {\n          const listItem = document.createElement('li');\n          listItem.textContent = item.name;\n          container.appendChild(listItem);\n        });\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",ns="function callbackFunction(result) {\n  // Code to be executed when the callback is invoked\n}\n\n// Passing callbackFunction as a callback to another function\nsomeFunction(callbackFunction);",os="<!DOCTYPE html>\n<html>\n<head>\n  <title>Javascript Callback Function Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Define a function called 'greet' with parameters 'name' and 'callback'\n    function greet(name, callback) {\n      const message = \"Hello, \" + name + \"!\";\n    \n      // Call the 'callback' function and pass the 'message' as an argument\n      callback(message);\n    }\n    \n    function displayMessage(message) {\n      console.log(message);\n    }\n    \n    // Call the 'greet' function with arguments 'John' as the name and 'displayMessage' as the callback\n    greet('John', displayMessage);\n  <\/script>\n</body>\n</html>",rs="// Asynchronous function that simulates making an API request\nfunction fetchDataFromAPI(callback) {\n  // Simulating API request delay with setTimeout\n  setTimeout(() => {\n    const data = ['John', 'Jane', 'Alice'];\n    callback(data);\n  }, 2000); // Simulate 2 seconds delay\n}\n\n// Callback function to handle the fetched data\nfunction handleData(data) {\n  console.log(data);\n}",as="<!DOCTYPE html>\n<html>\n<head>\n  <title>Asynchronous Callback Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Asynchronous function that simulates making an API request\n    function fetchDataFromAPI(callback) {\n      // Simulating API request delay with setTimeout\n      setTimeout(() => {\n        const data = ['John', 'Jane', 'Alice'];\n        callback(data);\n      }, 2000); // Simulate 2 seconds delay\n    }\n\n    // Callback function to handle the fetched data\n    function handleData(data) {\n      console.log(data);\n    }\n\n    fetchDataFromAPI(handleData);\n  <\/script>\n</body>\n</html>",ls='function fetchData() {\n  return new Promise(function(resolve, reject) {\n    // Simulating an asynchronous operation with setTimeout\n    setTimeout(function() {\n      // Simulating a successful response\n      const data = { message: "Data successfully fetched!" };\n\n      // Resolve the promise with the data\n      resolve(data);\n      \n      // Simulating an error scenario\n      // reject(new Error("Failed to fetch data!"));\n    }, 2000); // Wait for 2 seconds\n  });\n}',is='<!DOCTYPE html>\n<html>\n<head>\n  <title>Creating Promise Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    function fetchData() {\n      return new Promise(function(resolve, reject) {\n        // Simulating an asynchronous operation with setTimeout\n        setTimeout(function() {\n          // Simulating a successful response\n          const data = { message: "Data successfully fetched!" };\n    \n          // Resolve the promise with the data\n          resolve(data);\n    \n          // Simulating an error scenario\n          // reject(new Error("Failed to fetch data!"));\n        }, 2000); // Wait for 2 seconds\n      });\n    }\n    \n    // Using the fetchData() function and handling the Promise\n    fetchData()\n      .then(function(data) {\n        console.log(data.message); // Output: Data successfully fetched!\n      })\n      .catch(function(error) {\n        console.error(error.message); // If the error scenario is uncommented, this will output: Failed to fetch data!\n      });\n  <\/script>\n</body>\n</html>',cs="promise\n  .then(result => {\n    // Process the result\n    return transformedResult;\n  })\n  .then(transformedResult => {\n    // Process the transformed result\n  })\n  .catch(error => {\n    // Handle any errors along the chain\n  });",us='<!DOCTYPE html>\n<html>\n<head>\n  <title>Promise Chaining Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // A function that returns a Promise to simulate an asynchronous operation\n    function fetchData() {\n      return new Promise(function(resolve) {\n        // Simulating data fetching with setTimeout\n        setTimeout(function() {\n          const data = [1, 2, 3, 4, 5];\n          resolve(data);\n        }, 1000);\n      });\n    }\n    \n    // Function to process the data and return a new Promise with the transformed result\n    function processData(data) {\n      return new Promise(function(resolve) {\n        // Simulating processing with setTimeout\n        setTimeout(function() {\n          const transformedResult = data.map((item) => item * 2);\n          resolve(transformedResult);\n        }, 1500);\n      });\n    }\n    \n    // Function to further process the transformed result and log the final output\n    function processTransformedData(transformedData) {\n      console.log("Final result:", transformedData.reduce((sum, item) => sum + item, 0));\n    }\n    \n    // Chain the Promises together\n    fetchData()\n      .then((result) => {\n        // Process the result and return a new Promise with the transformed result\n        return processData(result);\n      })\n      .then((transformedResult) => {\n        // Process the transformed result\n        processTransformedData(transformedResult);\n      })\n      .catch((error) => {\n        // Handle any errors along the chain\n        console.error("Error occurred:", error);\n      });\n  <\/script>\n</body>\n</html>',ds="async function fetchData() {\n  const response = await fetch('assets/data/json/hello.json');\n  const data = response.json();\n  return data;\n}",_s="<!DOCTYPE html>\n<html>\n<head>\n  <title>Async/Await Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    async function fetchData() {\n      const response = await fetch('assets/data/json/hello.json');\n      const data = response.json();\n      return data;\n    }\n\n    fetchData().then(data => {\n      console.log(data.hello);\n    });\n  <\/script>\n</body>\n</html>",ms="async function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = response.json();\n  return data;\n}\n\nfetchData()\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error(error);\n  });",ps="<!DOCTYPE html>\n<html>\n<head>\n  <title>Async/Await Error Handling Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    async function fetchData() {\n      const response = await fetch('https://api.example.com/data');\n      const data = response.json();\n      return data;\n    }\n\n    fetchData()\n      .then(data => {\n        console.log(data);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  <\/script>\n</body>\n</html>",hs='// Adding an event listener to a DOM element for "click" event\ndocument.getElementById("myButton").addEventListener("click", function() {\n  alert("Button Clicked!");\n});',gs='<!DOCTYPE html>\n<html>\n<head>\n  <title>Event-Driven Programming</title>\n</head>\n<body>\n  <button id="myButton">Click Me!</button>\n  <script>\n    // Adding an event listener to the button element for "click" event\n    document.getElementById("myButton").addEventListener("click", function() {\n      alert("Button Clicked!");\n    });\n  <\/script>\n</body>\n</html>',ys="navigator.geolocation.getCurrentPosition(\n  position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    // Do something with the coordinates\n  },\n  error => {\n    console.error('Error:', error.message);\n  }\n);",js="<!DOCTYPE html>\n<html>\n<head>\n  <title>Geolocation Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          console.log(latitude, longitude);\n        },\n        error => {\n          console.error('Error:', error.message);\n        }\n      );\n    } else {\n      console.error('Geolocation is not supported by this browser.');\n    }\n  <\/script>\n</body>\n</html>",fs="// Storing data\nlocalStorage.setItem('key', 'value');\n\n// Retrieving data\nconst data = localStorage.getItem('key');\n\n// Removing data\nlocalStorage.removeItem('key');",bs="<!DOCTYPE html>\n<html>\n<head>\n  <title>Web Storage Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Storing data\n    localStorage.setItem('key', 'Hello World!');\n    \n    // Retrieving data\n    const data = localStorage.getItem('key');\n    console.log(data);\n    \n    // Removing data\n    localStorage.removeItem('key');\n  <\/script>\n</body>\n</html>",xs="// Create an XMLHttpRequest object\nlet xhr = new XMLHttpRequest();",Es="<!DOCTYPE html>\n<html>\n<head>\n  <title>Ajax Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Create an XMLHttpRequest object\n    let xhr = new XMLHttpRequest();\n\n    // Set up the AJAX request\n    xhr.open('GET', 'assets/data/json/hello.json', true); // true for asynchronous, false for synchronous\n    \n    // Handle the Response\n    xhr.onload = function () {\n      // The request was successful, and the response data is available in xhr.responseText\n      if (xhr.status >= 200 && xhr.status < 300) {\n        console.log(xhr.responseText); // Output the response data\n      } else {\n        console.error('Request failed:', xhr.status, xhr.statusText); // Handle errors if the request was not successful\n      }\n    };\n    \n    // Handle Errors\n    xhr.onerror = function () {\n      console.error('Network error occurred'); // Handle network errors\n    };\n    \n    // Send the Request\n    xhr.send();\n  <\/script>\n</body>\n</html>",Os="<div>\n  \x3c!-- The content will be updated here --\x3e\n  <h2 id=\"header\">----------</h2>\n  <p id=\"paragraph\">----------</p>\n</div>\n\n<button id=\"updateButton\">Update Content</button>\n\n<script>\n  // Event listener to handle the button click\n  document.getElementById('updateButton').addEventListener('click', function() {\n    // Create a new XMLHttpRequest object\n    const xhr = new XMLHttpRequest();\n\n    // Configure the AJAX request\n    xhr.open('GET', 'assets/data/json/content.json', true);\n\n    // Set up the response handling\n    xhr.onload = function() {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        // Parse the JSON response into an object\n        const data = JSON.parse(xhr.responseText);\n\n        // Update the content of h2 and p elements with the data from the JSON file\n        document.getElementById('header').innerHTML = data.title;\n        document.getElementById('paragraph').innerHTML = data.content;\n      } else {\n        console.error('Request failed:', xhr.status, xhr.statusText);\n      }\n    };\n\n    // Handle network errors\n    xhr.onerror = function() {\n      console.error('Network error occurred');\n    };\n\n    // Send the AJAX request\n    xhr.send();\n  });\n<\/script>",vs="<!DOCTYPE html>\n<html>\n<head>\n  <title>AJAX Example</title>\n</head>\n<body>\n  <div>\n    \x3c!-- The content will be updated here --\x3e\n    <h2 id=\"header\">----------</h2>\n    <p id=\"paragraph\">----------</p>\n  </div>\n\n  <button id=\"updateButton\">Update Content</button>\n\n  <script>\n    // Event listener to handle the button click\n    document.getElementById('updateButton').addEventListener('click', function() {\n      // Create a new XMLHttpRequest object\n      const xhr = new XMLHttpRequest();\n\n      // Configure the AJAX request\n      xhr.open('GET', 'assets/data/json/content.json', true);\n\n      // Set up the response handling\n      xhr.onload = function() {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          // Parse the JSON response into an object\n          const data = JSON.parse(xhr.responseText);\n\n          // Update the content of h2 and p elements with the data from the JSON file\n          document.getElementById('header').innerText = data.title;\n          document.getElementById('paragraph').innerText = data.content;\n        } else {\n          console.error('Request failed:', xhr.status, xhr.statusText);\n        }\n      };\n\n      // Handle network errors\n      xhr.onerror = function() {\n        console.error('Network error occurred');\n      };\n\n      // Send the AJAX request\n      xhr.send();\n    });\n  <\/script>\n</body>\n</html>",Cs="fetch('https://api.example.com/data')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Ts="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    fetch('assets/data/json/hello.json')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data.hello);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",Ds="fetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    // Additional headers if needed\n  },\n  body: JSON.stringify(data) // Request body as JSON\n})\n  .then(response => {\n    // Handle the response\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",ws="",As="fetch('https://api.example.com/data')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error('Request failed');\n    }\n  })\n  .then(data => {\n    // Process the response data\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });",Ps="<!DOCTYPE html>\n<html>\n<head>\n  <title>Fetch Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    fetch('assets/data/json/hello.js') // hello.js file doesn't exist\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Request failed');\n        }\n      })\n      .then(data => {\n        console.log(data.hello);\n      })\n      .catch(error => {\n        console.error('Error:', error);\n      });\n  <\/script>\n</body>\n</html>",ks="// Creating a prototype object\nvar animalPrototype = {\n  sound: 'Unknown',\n  makeSound: function() {\n    console.log(this.sound);\n  }\n};\n\n// Creating a new object using the prototype\nvar dog = Object.create(animalPrototype);\ndog.sound = 'Woof';\n\n// Accessing property and method via prototype chain\ndog.makeSound(); // Output: Woof\n\n// Creating another object using the same prototype\nvar cat = Object.create(animalPrototype);\ncat.sound = 'Meow';\n\ncat.makeSound(); // Output: Meow",Is="<!DOCTYPE html>\n<html>\n<head>\n  <title>Prototype and Inheritance Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    // Creating a prototype object\n    var animalPrototype = {\n      sound: 'Unknown',\n      makeSound: function() {\n        console.log(this.sound);\n      }\n    };\n    \n    // Creating a new object using the prototype\n    var dog = Object.create(animalPrototype);\n    dog.sound = 'Woof';\n    \n    // Accessing property and method via prototype chain\n    dog.makeSound(); // Output: Woof\n    \n    // Creating another object using the same prototype\n    var cat = Object.create(animalPrototype);\n    cat.sound = 'Meow';\n    \n    cat.makeSound(); // Output: Meow\n  <\/script>\n</body>\n</html>",Ss="// Constructor function \n function Person(name, age) { \n   this.name = name; \n   this.age = age; \n } \n \n // Adding a method to the prototype \n Person.prototype.introduce = function() { \n   console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n }; \n \n // Creating objects using the constructor function \n var person1 = new Person('Alice', 25); \n var person2 = new Person('Bob', 30); \n \n // Accessing properties and calling the inherited method \n console.log(person1.name); // Output: Alice \n console.log(person2.age); // Output: 30 \n \n person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",m="// Constructor function \n    function Person(name, age) { \n      this.name = name; \n      this.age = age; \n    } \n    \n    // Adding a method to the prototype \n    Person.prototype.introduce = function() { \n      console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n    }; \n    \n    // Creating objects using the constructor function \n    var person1 = new Person('Alice', 25); \n    var person2 = new Person('Bob', 30); \n    \n    // Accessing properties and calling the inherited method \n    console.log(person1.name); // Output: Alice \n    console.log(person2.age); // Output: 30 \n    \n    person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n    person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",Bs=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Prototype and Inheritance Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    ${m}\n  <\/script>\n</body>\n</html>`,Ns="// ES6 class syntax \n class Person { \n   constructor(name, age) { \n     this.name = name; \n     this.age = age; \n   } \n   \n   introduce() { \n     console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n   } \n } \n \n // Creating objects using the class \n var person1 = new Person('Alice', 25); \n var person2 = new Person('Bob', 30); \n \n // Accessing properties and calling the method \n console.log(person1.name); // Output: Alice \n console.log(person2.age); // Output: 30 \n \n person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",Hs="// ES6 class syntax \n   class Person { \n     constructor(name, age) { \n       this.name = name; \n       this.age = age; \n     } \n     \n     introduce() { \n       console.log(`Hi, my name is ${this.name}, and I am ${this.age} years old.`); \n     } \n   } \n   \n   // Creating objects using the class \n   var person1 = new Person('Alice', 25); \n   var person2 = new Person('Bob', 30); \n   \n   // Accessing properties and calling the method \n   console.log(person1.name); // Output: Alice \n   console.log(person2.age); // Output: 30 \n   \n   person1.introduce(); // Output: Hi, my name is Alice, and I am 25 years old. \n   person2.introduce(); // Output: Hi, my name is Bob, and I am 30 years old.",Ys=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Prototype and Inheritance Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    ${m}\n  <\/script>\n</body>\n</html>`,Js="// Pure function\nfunction addNumbers(a, b) {\n  return a + b;\n}\n\n// Calling the pure function\nvar result = addNumbers(3, 5);\nconsole.log(result); // Output: 8",Ls='<!DOCTYPE html>\n<html>\n<head>\n  <title>Pure Function Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Pure function\n    function addNumbers(a, b) {\n      return a + b;\n    }\n    \n    // Calling the pure function\n    var result = addNumbers(3, 5);\n    console.log(result); // Output: 8\n  <\/script>\n</body>\n</html>',qs="// Immutable data\nconst originalArray = [1, 2, 3, 4, 5];\n\n// Creating a new array with an updated value\nconst updatedArray = [...originalArray, 6];\n\n// Output the original and updated arrays\nconsole.log(originalArray); // Output: [1, 2, 3, 4, 5]\nconsole.log(updatedArray); // Output: [1, 2, 3, 4, 5, 6]",Rs='<!DOCTYPE html>\n<html>\n<head>\n  <title>Immutable Data Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Immutable data\n    const originalArray = [1, 2, 3, 4, 5];\n    \n    // Creating a new array with an updated value\n    const updatedArray = [...originalArray, 6];\n    \n    // Output the original and updated arrays\n    console.log(originalArray); // Output: [1, 2, 3, 4, 5]\n    console.log(updatedArray); // Output: [1, 2, 3, 4, 5, 6]\n  <\/script>\n</body>\n</html>',Fs="// Higher-order function example: map\nfunction map(array, transform) {\n  var transformedArray = [];\n  \n  for (var i = 0; i < array.length; i++) {\n    transformedArray.push(transform(array[i]));\n  }\n  \n  return transformedArray;\n}\n\n// Example usage of the higher-order function\nvar numbers = [1, 2, 3, 4, 5];\nvar doubledNumbers = map(numbers, function(num) {\n  return num * 2;\n});\n\nconsole.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]",Ms='<!DOCTYPE html>\n<html>\n<head>\n  <title>Higher-order Function Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Higher-order function example: map\n    function map(array, transform) {\n      var transformedArray = [];\n      \n      for (var i = 0; i < array.length; i++) {\n        transformedArray.push(transform(array[i]));\n      }\n      \n      return transformedArray;\n    }\n    \n    // Example usage of the higher-order function\n    var numbers = [1, 2, 3, 4, 5];\n    var doubledNumbers = map(numbers, function(num) {\n      return num * 2;\n    });\n    \n    console.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]\n  <\/script>\n</body>\n</html>',Gs="// Functions to be composed\nconst add = (x) => x + 5;\nconst multiplyByTwo = (x) => x * 2;\nconst subtractTen = (x) => x - 10;\n\n// Function composition\nconst composedFunction = (x) => subtractTen(multiplyByTwo(add(x)));\n\n// Example usage\nconst result = composedFunction(10);\nconsole.log(result); // Output: 20",Ws='<!DOCTYPE html>\n<html>\n<head>\n  <title>Function Composition Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Functions to be composed\n    const add = (x) => x + 5;\n    const multiplyByTwo = (x) => x * 2;\n    const subtractTen = (x) => x - 10;\n    \n    // Function composition\n    const composedFunction = (x) => subtractTen(multiplyByTwo(add(x)));\n    \n    // Example usage\n    const result = composedFunction(10);\n    console.log(result); // Output: 20\n  <\/script>\n</body>\n</html>',Us="// Recursive function to calculate the factorial of a number \nfunction factorial(n) { \n  if (n === 0 || n === 1) { \n    return 1; \n  } else { \n    return n * factorial(n - 1); \n  } \n} \n\n// Example usage \nconst number = 5; \nconst result = factorial(number); \nconsole.log(`Factorial of ${number} is: ${result}`);",p="// Recursive function to calculate the factorial of a number \n    function factorial(n) { \n      if (n === 0 || n === 1) { \n        return 1; \n      } else { \n        return n * factorial(n - 1); \n      } \n    } \n    \n    // Example usage \n    const number = 5; \n    const result = factorial(number); \n    console.log(`Factorial of ${number} is: ${result}`);",$s=`<!DOCTYPE html>\n<html>\n<head>\n  <title>Recursion Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    ${p}\n  <\/script>\n</body>\n</html>`,zs="// Declarative approach using map to square each number\nconst numbers = [1, 2, 3, 4, 5];\n\nconst squaredNumbers = numbers.map((num) => num * num);\n\nconsole.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]",Vs='<!DOCTYPE html>\n<html>\n<head>\n  <title>Declarative Programming Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Declarative approach using map to square each number\n    const numbers = [1, 2, 3, 4, 5];\n    \n    const squaredNumbers = numbers.map((num) => num * num);\n    \n    console.log(squaredNumbers); // Output: [1, 4, 9, 16, 25]\n  <\/script>\n</body>\n</html>',Xs="// Generator function for generating an infinite sequence of numbers\nfunction* generateNumbers() {\n  let num = 1;\n  while (true) {\n    yield num++;\n  }\n}\n\n// Lazy evaluation function that takes a generator and returns the next value\nfunction getNextValue(generator) {\n  return generator.next().value;\n}\n\n// Create a generator for an infinite sequence of numbers\nconst numbersGenerator = generateNumbers();\n\n// Lazy evaluation example\nconsole.log(getNextValue(numbersGenerator)); // Output: 1\nconsole.log(getNextValue(numbersGenerator)); // Output: 2\nconsole.log(getNextValue(numbersGenerator)); // Output: 3",Qs='<!DOCTYPE html>\n<html>\n<head>\n  <title>Lazy Evaluation Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    // Generator function for generating an infinite sequence of numbers\n    function* generateNumbers() {\n      let num = 1;\n      while (true) {\n        yield num++;\n      }\n    }\n    \n    // Lazy evaluation function that takes a generator and returns the next value\n    function getNextValue(generator) {\n      return generator.next().value;\n    }\n    \n    // Create a generator for an infinite sequence of numbers\n    const numbersGenerator = generateNumbers();\n    \n    // Lazy evaluation example\n    console.log(getNextValue(numbersGenerator)); // Output: 1\n    console.log(getNextValue(numbersGenerator)); // Output: 2\n    console.log(getNextValue(numbersGenerator)); // Output: 3\n  <\/script>\n</body>\n</html>',Zs="const text = \"The quick brown fox jumps over the lazy dog.\";\n\n// Regular expression pattern to search for all words starting with 't' or 'T'\nconst pattern = /[tT]\\w+/g;\n\n// Finding all matches using the 'exec' method in a loop\nlet match;\nconst matches = [];\n\nwhile ((match = pattern.exec(text)) !== null) {\n  matches.push(match[0]);\n}\n\nconsole.log(matches); // Output: ['The', 'the']",Ks="<!DOCTYPE html>\n<html>\n<head>\n  <title>Pattern Matching Example</title>\n  <script src=\"assets/js/utils.js\"><\/script>\n</head>\n<body>\n  <script>\n    const text = \"The quick brown fox jumps over the lazy dog.\";\n\n    // Regular expression pattern to search for all words starting with 't' or 'T'\n    const pattern = /[tT]\\w+/g;\n    \n    // Finding all matches using the 'exec' method in a loop\n    let match;\n    const matches = [];\n    \n    for (const word of text.split(' ')) {\n      if ((match = pattern.exec(word)) !== null) {\n        matches.push(match[0]);\n      }\n    }\n    \n    console.log(matches); // Output: ['The', 'the']\n  <\/script>\n</body>\n</html>",tn="// assets/data/modules/math.module.js\nexport function add(a, b) {\n  return a + b;\n}\n\nexport function subtract(a, b) {\n  return a - b;\n}\n\nexport function multiply(a, b) {\n  return a * b;\n}",en='<!DOCTYPE html>\n<html>\n<head>\n  <title>ES Module Example</title>\n</head>\n<body>\n  <p></p>\n\n  \x3c!-- Indicate that the JavaScript code within the script tag is an ES6 module --\x3e\n  <script type="module">\n    // Importing functions from the math.module.js module\n    import { add, subtract, multiply } from \'./assets/data/modules/math.module.js\';\n    \n    // Define the main function\n    function main() {\n      // Calculate the sum, difference, and product using the imported functions\n      const sum = add(123, 456);\n      const difference = subtract(100, 23);\n      const product = multiply(12, 15);\n    \n      // Create a text containing the calculated values\n      const text = "sum = " + sum + ", " + "difference = " + difference + ", " + "product = " + product;\n    \n      // Call the output function\n      output(text);\n    }\n    \n    // Define the output function to display the text in a <p> element\n    function output(text) {\n      let elem = document.querySelector("p");\n      elem.innerText = text;\n    }\n    \n    // Call the main function to start the execution\n    main();\n  <\/script>\n</body>\n</html>',sn="// Dynamically import the math.module.js module \n// Some browsers don't support this feature\nconst { add, subtract, multiply } = await import('./assets/data/modules/math.module.js');",nn='<!DOCTYPE html>\n<html>\n<head>\n  <title>ES Module Asynchronous Loading Example</title>\n</head>\n<body>\n  <p></p>\n\n  \x3c!-- Indicate that the JavaScript code within the script tag is an ES6 module --\x3e\n  <script type="module">\n    // Define an asynchronous function called "main"\n    async function main() {\n      // Dynamically import the math.module.js module using "import()" and extract "add", "subtract", and "multiply" functions\n      const { add, subtract, multiply } = await import(\'./assets/data/modules/math.module.js\');\n    \n      // Calculate the sum, difference, and product using the imported functions\n      const sum = add(123, 456);\n      const difference = subtract(100, 23);\n      const product = multiply(12, 15);\n    \n      // Return a string containing the calculated values\n      return "sum = " + sum + ", " + "difference = " + difference + ", " + "product = " + product;\n    };\n    \n    // Define the "output" function to display the text in a <p> element\n    function output(text) {\n      let elem = document.querySelector("p");\n      elem.innerText = text;\n    }\n    \n    // Call the "main" function asynchronously\n    main()\n      .then(output)\n      .catch(() => output("Your browser doesn\'t support this feature."));\n  <\/script>\n</body>\n</html>',on="try {\n  // Code that might throw an error\n} catch (error) {\n  // Handle the error\n  console.error('Error:', error);\n}",rn='<!DOCTYPE html>\n<html>\n<head>\n  <title>Try-Catch Example</title>\n  <script src="assets/js/utils.js"><\/script>\n</head>\n<body>\n  <script>\n    function handleError() {\n      try {\n        // Simulating code that might throw an error\n        throw new Error("Custom error message");\n      } catch (error) {\n        // Handle the error\n        console.error(\'Error: \' + error.message);\n      }\n    }\n\n    handleError();\n  <\/script>\n</body>\n</html>';var h=r(294),g=r(1481),an=r(3353),ln=r(7913),cn=r(5342);function un(e,n){if(1&e&&(t.TgZ(0,"h2",null,4),t._uU(2),t.qZA()),2&e){const s=t.oxw(2);t.xp6(2),t.AsE("",null==s.chapter?null:s.chapter.chid,". ",null==s.chapter?null:s.chapter.title,"")}}function dn(e,n){if(1&e&&(t.ynx(0),t.YNc(1,un,3,2,"h2",1),t.BQk()),2&e){const s=t.oxw();t.xp6(1),t.Q6J("ngIf",null==s.chapter?null:s.chapter.chid)}}function _n(e,n){if(1&e&&t._UZ(0,"p",8),2&e){const s=t.oxw().$implicit,o=t.oxw(3);t.Q6J("innerHTML",o.bypass(null==s?null:s.text),t.oJD)}}function mn(e,n){if(1&e&&t._UZ(0,"p",8),2&e){const s=t.oxw().$implicit,o=t.oxw(3);t.Q6J("innerHTML",o.bypass(null==s?null:s.text),t.oJD)}}function pn(e,n){if(1&e&&(t.TgZ(0,"p"),t._UZ(1,"app-code-viewer",9),t.qZA()),2&e){const s=t.oxw().$implicit,o=t.oxw(3);t.xp6(1),t.Q6J("lang","JS")("codeConfig",o.rectify(s.codeConfig))}}function hn(e,n){if(1&e&&(t.ynx(0),t.YNc(1,_n,1,1,"p",7),t.YNc(2,mn,1,1,"p",7),t.YNc(3,pn,2,2,"p",1),t.BQk()),2&e){const s=n.$implicit;t.xp6(1),t.Q6J("ngIf",!s.codeid&&!s.isShortCode),t.xp6(1),t.Q6J("ngIf",!s.codeid&&s.isShortCode),t.xp6(1),t.Q6J("ngIf",s.codeConfig)}}function gn(e,n){if(1&e&&(t.ynx(0),t.TgZ(1,"h3",5,6),t._uU(3),t.qZA(),t.YNc(4,hn,4,3,"ng-container",2),t.BQk()),2&e){const s=t.oxw().$implicit,o=t.oxw();t.xp6(1),t.cQ8("id","",null==o.chapter?null:o.chapter.category,"-ch-",null==o.chapter?null:o.chapter.chid,"-sec-",null==s?null:s.secid,""),t.xp6(2),t.hij(" ",s.subtitle," "),t.xp6(1),t.Q6J("ngForOf",null==s?null:s.paragraphs)}}function yn(e,n){if(1&e&&(t.ynx(0),t.YNc(1,gn,5,5,"ng-container",1),t.BQk()),2&e){const s=n.$implicit,o=t.oxw();t.xp6(1),t.Q6J("ngIf",s.secid===+o.secid)}}let l=(()=>{class e extends j.H{constructor(s,o,xn,En,On,vn,Cn,Tn){super(s,o,xn,En,On,vn,Cn,Tn),this.codeData=c}ngOnInit(){super.ngOnInit()}ngOnDestroy(){super.ngOnDestroy()}}return e.\u0275fac=function(s){return new(s||e)(t.Y36(h.X),t.Y36(g.Dx),t.Y36(an.t4),t.Y36(g.H7),t.Y36(a.F0),t.Y36(a.gz),t.Y36(i.Ye),t.Y36(d.p))},e.\u0275cmp=t.Xpm({type:e,selectors:[["app-js-chapter"]],features:[t.qOj],decls:5,vars:2,consts:[[1,"chapter-container"],[4,"ngIf"],[4,"ngFor","ngForOf"],[1,"navigator-container"],["h2",""],[3,"id"],["h3s",""],[3,"innerHTML",4,"ngIf"],[3,"innerHTML"],[3,"lang","codeConfig"]],template:function(s,o){1&s&&(t.TgZ(0,"div",0),t.YNc(1,dn,2,1,"ng-container",1),t.YNc(2,yn,2,1,"ng-container",2),t.TgZ(3,"div",3),t._UZ(4,"app-chapter-navigator"),t.qZA()()),2&s&&(t.xp6(1),t.Q6J("ngIf","1"===o.secid),t.xp6(1),t.Q6J("ngForOf",null==o.chapter?null:o.chapter.sections))},dependencies:[i.sg,i.O5,ln.R,cn.V],styles:[".chapter-container[_ngcontent-%COMP%]{margin:1rem}"]}),e})();const jn=[{path:"",component:y,children:[{path:"chapter",component:l},{path:"chapter/:chid",component:l},{path:"chapter/:chid/section/:secid",component:l},{path:"**",component:l},{path:"",component:l}]}];let fn=(()=>{class e{}return e.\u0275fac=function(s){return new(s||e)},e.\u0275mod=t.oAB({type:e}),e.\u0275inj=t.cJS({imports:[a.Bz.forChild(jn),a.Bz]}),e})(),bn=(()=>{class e{}return e.\u0275fac=function(s){return new(s||e)},e.\u0275mod=t.oAB({type:e}),e.\u0275inj=t.cJS({imports:[i.ez,fn,h.I]}),e})()}}]);